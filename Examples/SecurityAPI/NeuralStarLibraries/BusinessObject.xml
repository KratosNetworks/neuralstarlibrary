<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BusinessObject</name>
    </assembly>
    <members>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarm">
            <summary>
            Has properties for an Alarm and methods to update Alarms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.ServiceAlarm.GetAlarm(System.Data.DataRow)">
            <summary>
            Translates a DataRow instance into an Alarm instance.
            </summary>
            <param name="dr">A well-formed DataRow instance.</param>
            <returns>An Alarm instance.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.ServiceAlarm.Severity">
            <summary>
            The severity of an Alarm.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarm.AlarmSeverity">
            <summary>
            An Alarm will have one of these severities.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarm.AlarmStatus">
            <summary>
            An Alarm either has been or has not been acknowledged.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarms">
            <summary>
            Has methods to retrieve and update Alarms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.ServiceAlarms.GetDataSet">
            <summary>
            Translates the collection of Alarm instances into a DataSet. 
            </summary>
            <returns>A DataSet representation of the collection of Alarm instances.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.ServiceAlarms.RowVersion">
            <summary>
            The largest RowVersion for the Alarms that were retrieved.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.ServiceAlarms.InitialConsecutiveLoadCap">
            <summary>
            Used in conjunction with a "get by chunks" strategy where an initial retrieval call supplies "zero" as the Alarm record-change mark parameter.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync">
            <summary>
            Has methods to retrieve and update Alarms asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.BeginGetByServices">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.OnGetResponse">
            <summary>
            Fires when an Alarms instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="alarms">An Alarms instance returned from an asynchronous call.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.ServiceAlarmsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine">
            <summary>
            A utility for predicted measurement lines.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.AlgorithmSeedDate">
            <summary>
            x = 0 corresponds to AlgorithmSeedDate and x_i is known as seconds after AlgorithmSeedDate.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.Slope">
            <summary>
            Slope of the predicted measurement line.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.YIntercept">
            <summary>
            Y-intercept of the predicted measurement line, where x = 0 corresponds to AlgorithmSeedDate and x_i is known as seconds after AlgorithmSeedDate.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.CoefficientOfDetermination">
            <summary>
            Coefficient of determination resulting from the analysis used to compute the line; the coefficient of determination indicates a confidence level of the degree to which the measurement values correlate to sample times.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.NumberOfDataPointsUsed">
            <summary>
            The number of data points used to determine the predicted measurement line.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.DataSource">
            <summary>
            Indicates the storage mechanism of the data used to determine the predicted measurement line.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.OldestDataPoint">
            <summary>
            Indicates the oldest data point used to determine the predicted measurement line.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine.PointsUsed">
            <summary>
            The data points used to determine the predicted measurement line.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLines">
            <summary>
            A utility for predicted measurement lines.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLines.Get(System.Guid,System.Int64,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Attempts to retrieve predicted measurement line information.  Returns null if the attempt did not retrieve predicted measurement line information.
            </summary>
            <param name="nsObjectID">ID for the source NSObject.</param>
            <param name="metricID">ID for the source metric.</param>
            <param name="minComputationPoints">Specifies the minimum number of points to use to determine a predicted measurement line.</param>
            <param name="maxComputationWindowHours">Specifies the maximum window for data to use to determine a predicted measurement line.</param>
            <param name="allowUseOfAggregateArchiveData">Specifies whether aggregate data may be used to determine a predicted measurement line.</param>
            <param name="allowUseOfRawArchiveData">Specifies whether raw archive data may be used to determine a predicted measurement line.</param>
            <returns>A PredictedMeasurementLine instance, which may be null if the attempt did not retrieve predicted measurement line information.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLines.GetPoints(AiMetrix.BusinessObject.Analytics.PredictedMeasurementLine,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a collection of measurements based on line information.
            </summary>
            <param name="line">Line information.</param>
            <param name="begin">The oldest measurement in the returned collection.</param>
            <param name="end">The newest measurement in the returned collection.</param>
            <param name="secondsBetweenPoints">Starting at begin, points are created every secondsBetweenPoints.</param>
            <returns>A collection of measurements based on line information.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync">
            <summary>
            Gets PredictedMeasurementLine objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync.BeginGet(System.Guid,System.Int64,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves PredictedMeasurementLines.
            </summary>
            <param name="keysOnly">Indicates whether to make a light-weight return.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync.OnGetResponse">
            <summary>
            Fires when a PredictedMeasurementLines instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="sets"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.PredictedMeasurementLinesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.ObjectRelativity">
            <summary>
            A utility for Object Relativity.  
            General Theory of Object Relativity: anything can relate to anything else in any way within a context.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.Save(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid)">
            <summary>
            Saves a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.Save(System.Guid,System.Guid,System.Int64,System.Guid)">
            <summary>
            Saves a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The ID of the predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.Delete(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid)">
            <summary>
            Deletes a relation.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.Delete(System.Guid)">
            <summary>
            Deletes one or more relations.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.Delete(System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType)">
            <summary>
            Deletes one or more relations.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="predicateTypeID">The predicate of the relation(s).</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.SetCustomAttribute(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid,System.Int64,System.String)">
            <summary>
            Sets a Custom Attribute value for a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
            <param name="customAttributeID">ID of the Custom Attribute.</param>
            <param name="value">Value for the Custom Attribute.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.DeleteCustomAttribute(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid,System.Int64)">
            <summary>
            Deletes a Custom Attribute for a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
            <param name="customAttributeID">ID of the Custom Attribute.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.AttachNSObject(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid,System.Guid)">
            <summary>
            Attaches a NSObject to a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
            <param name="nsobjectID">ID of the NSObject to attach.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.ClearNSObjectAttachment(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid)">
            <summary>
            Clears all NSObject attachments for a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativity.ClearNSObjectAttachment(System.Guid,System.Guid,AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType,System.Guid,System.Guid)">
            <summary>
            Clears a NSObject attachment for a relation within a context.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="subjectObjectID">The ID of the subject of the relation.</param>
            <param name="predicateTypeID">The predicate of the relation.</param>
            <param name="relativeObjectID">The ID having a relation to the subject from the predicate.</param>
            <param name="nsobjectID">The ID of the NSObject whose attachment will be cleared.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.ObjectRelativity.ContextObject">
            <summary>
            The object of the context.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.ObjectRelativity.SubjectObject">
            <summary>
            The object of the subject of the relation.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateTypeID">
            <summary>
            The predicate of the relation.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.ObjectRelativity.RelativeObject">
            <summary>
            The object having a relation to the subject from the predicate.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.ObjectRelativity.PredicateType">
            <summary>
            Predicates for relations.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.ObjectRelativitys">
            <summary>
            A utility for Object Relativity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativitys.Get(System.Guid)">
            <summary>
            Retrieves relations.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <returns>Relations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativitys.Get(System.Guid,System.Byte[])">
            <summary>
            Retrieves relations.
            </summary>
            <param name="contextObjectID">The ID of the context.</param>
            <param name="rowVersion">The record-change mark after which data can be retrieved.</param>
            <returns>Relations.</returns>       
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativitys.GetWhenSubject(System.Guid)">
            <summary>
            Retrieves relations.
            </summary>
            <param name="subjectObjectID">The ID of the subject of the relations.</param>
            <returns>Relations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativitys.GetWhenRelative(System.Guid)">
            <summary>
            Retrieves relations.
            </summary>
            <param name="relativeObjectID">The ID of the relative of the relations.</param>
            <returns>Relations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.ObjectRelativitys.GetWhenSubjectOrRelative(System.Guid)">
            <summary>
            Retrieves relations.
            </summary>
            <param name="objectID">The ID of the subject or relative of the relations.</param>
            <returns>Relations.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.XYPoint">
            <summary>
            A Cartesian coordinate system point on a plane.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.XYPoint.X">
            <summary>
            The x coordinate.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.XYPoint.Y">
            <summary>
            The y coordinate.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine">
            <summary>
            A Least-Squares line utility.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine.GetYAtX(System.Double)">
            <summary>
            Gets the y value corresponding to the x value.
            </summary>
            <param name="x">The x value.</param>
            <returns>The y value.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine.GetXAtY(System.Double)">
            <summary>
            Gets the x value corresponding to the y value.
            </summary>
            <param name="y">The y value.</param>
            <returns>The x value.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine.GetLine(System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.XYPoint})">
            <summary>
            Applies the Least-Squares method to generate a line.
            </summary>
            <param name="points">The points used to generate a Least-Squares line.</param>
            <returns>The Least-Squares line.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine.a">
            <summary>
            The slope of the line.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.NSLeastSquaresLine.b">
            <summary>
            The y-intercept of the line.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateType">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateType.Save(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification})">
            <summary>
            Saves a Calculated State Type.
            </summary>
            <param name="id">NSObjectID or AssetGroupID, depending on idType.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="idType">Specifies whether the instance is with regard to a NSObject or an AssetGroup.</param>
            <param name="defaultStateTypeValueID">The default value for a runtime calculation.</param>
            <param name="stateTypeValueFormulaSpecifications">Formula specifications.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateType.Delete(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Deletes a Calculated State Type.
            </summary>
            <param name="id">NSObjectID or AssetGroupID, depending on idType.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="idType">Specifies whether the instance is with regard to a NSObject or an AssetGroup.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.ID">
            <summary>
            NSObjectID or AssetGroupID, depending on IDType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.IDType">
            <summary>
            Specifies whether the instance is with regard to a NSObject or an AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.DefaultStateTypeValueID">
            <summary>
            The default value for a runtime calculation.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.IsEnabled">
            <summary>
            Specifies whether the Calculated State Type is enabled.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateType.FormulaSpecifications">
            <summary>
            Specifications for the ID/StateTypeID combo.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypes">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypes.Get">
            <summary>
            Retrieves all the Calculated State Types.
            </summary>
            <returns>Calculated State Types.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypes.GetForNSObject(System.Guid,System.Int64)">
            <summary>
            Retrieves the Calculated State Type for the nsObjectID/stateTypeID combo.
            </summary>
            <param name="nsObjectID">The ID for the NSObject.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>A Calculated State Type.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypes.GetForAssetGroup(System.Guid,System.Int64)">
            <summary>
            Retrieves the Calculated State Type for the assetGroupID/stateTypeID combo.
            </summary>
            <param name="assetGroupID">The ID for the NSObject.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>A Calculated State Type.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.BeginGet">
            <summary>
            Asynchronously retrieves all.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.BeginGetForNSObject(System.Guid,System.Int64)">
            <summary>
            Asynchronously retrieves the Calculated State Type for the nsObjectID/stateTypeID combo.
            </summary>
            <param name="nsObjectID">The ID for the NSObject.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.BeginGetForAssetGroup(System.Guid,System.Int64)">
            <summary>
            Asynchronously retrieves the Calculated State Type for the assetGroupID/stateTypeID combo.
            </summary>
            <param name="assetGroupID">The ID for the NSObject.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.OnGetResponse">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.OnGetResponseSingular">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="calculatedStateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.GetResponseSingularDelegate">
            <summary>
            Delegate for OnGetResponseSingular.
            </summary>
            <param name="calculatedStateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.Save(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition})">
            <summary>
            Saves a formula specification.
            </summary>
            <param name="id">The ID on which the corresponding State Type obtains the stateTypeValueID value when formulaDisplay is true.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">Specifies the value the ID/StateTypeID combo obtains when formulaDisplay is true.</param>
            <param name="idType">Specifies whether id is with regard to a NSObject or an AssetGroup.</param>
            <param name="formulaDisplay">The boolean expression--a combination of variable names, "NOT," "OR," "AND," "(," and ")" (e.g., ( A OR B ) AND NOT ( C AND A ))--which, when true, results in the ID/StateTypeID combo obtaining the StateTypeValueID value.</param>
            <param name="variableDefinitions">Definitions for the variables in formulaDisplay.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.Save(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition},System.Nullable{System.Boolean})">
            <summary>
            Saves a formula specification.
            </summary>
            <param name="id">The ID on which the corresponding State Type obtains the stateTypeValueID value when formulaDisplay is true.</param>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">Specifies the value the ID/StateTypeID combo obtains when formulaDisplay is true.</param>
            <param name="idType">Specifies whether id is with regard to a NSObject or an AssetGroup.</param>
            <param name="formulaDisplay">The boolean expression--a combination of variable names, "NOT," "OR," "AND," "(," and ")" (e.g., ( A OR B ) AND NOT ( C AND A ))--which, when true, results in the ID/StateTypeID combo obtaining the StateTypeValueID value.</param>
            <param name="variableDefinitions">Definitions for the variables in formulaDisplay.</param>
            <param name="recordWhenFalse">Indicates whether to snapshot root-cause factors when the specification is false.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.Delete(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Deletes a formula specification.
            </summary>
            <param name="nsObjectID">Part of the triplet identifying the specification to delete.</param>
            <param name="stateTypeID">Part of the triplet identifying the specification to delete.</param>
            <param name="stateTypeValueID">Part of the triplet identifying the specification to delete.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.ID">
            <summary>
            NSObjectID or AssetGroupID, depending on Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.StateTypeValueID">
            <summary>
            Specifies the value the ID/StateTypeID combo obtains when FormulaDisplay is true.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.IDType">
            <summary>
            Specifies whether the instance is with regard to a NSObject or an AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.FormulaDisplay">
            <summary>
            The boolean expression--a combination of variable names, "NOT," "OR," "AND," "(," and ")" (e.g., ( A OR B ) AND NOT ( C AND A ))--which, when true, results in the ID/StateTypeID combo obtaining the StateTypeValueID value.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.RecordWhenFalse">
            <summary>
            Indicates whether to snapshot root-cause factors when the specification is false.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecification.VariableDefinitions">
            <summary>
            Definitions for the variables in FormulaDisplay.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecifications">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecifications.Get(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Retrieves all specifications for an id/stateTypeID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <returns>Specifications.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecifications.Get(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String)">
            <summary>
            Retrieves the specification for an id/stateTypeID/stateTypeValueID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
            <returns>A specification.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.BeginGet(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Asynchronously retrieves all specifications for an id/stateTypeID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.BeginGetSingular(System.Guid,System.Int64,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String)">
            <summary>
            Asynchronously retrieves the specification for an id/stateTypeID/stateTypeValueID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.OnGetResponse">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.OnGetResponseSingular">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.GetResponseSingularDelegate">
            <summary>
            Delegate for OnGetResponseSingular.
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.Save(AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition)">
            <summary>
            Saves a variable definition.
            </summary>
            <param name="definition">The definition to save.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.Delete(AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition)">
            <summary>
            Deletes a variable definition.
            </summary>
            <param name="definition">The definition to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.DeleteForNSObject(System.Guid,System.Int64,System.String,System.String)">
            <summary>
            Deletes a variable definition.
            </summary>
            <param name="nsObjectID">Part of the filter identifying the variable definition to delete.</param>
            <param name="stateTypeID">Part of the filter identifying the variable definition to delete.</param>
            <param name="stateTypeValueID">Part of the filter identifying the variable definition to delete.</param>
            <param name="variableName">Part of the filter identifying the variable definition to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.DeleteForAssetGroup(System.Guid,System.Int64,System.String,System.String)">
            <summary>
            Deletes a variable definition.
            </summary>
            <param name="assetGroupID">Part of the filter identifying the variable definition to delete.</param>
            <param name="stateTypeID">Part of the filter identifying the variable definition to delete.</param>
            <param name="stateTypeValueID">Part of the filter identifying the variable definition to delete.</param>
            <param name="variableName">Part of the filter identifying the variable definition to delete.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.ID">
            <summary>
            NSObjectID or AssetGroupID, depending on Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.StateTypeValueID">
            <summary>
            The ID for the State Type Value.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableName">
            <summary>
            Identifies the variable.  A variable name, X, for example, exists in a FormulaDisplay such as " X AND NOT Y."
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.IDType">
            <summary>
            Specifies whether the instance is with regard to a NSObject or an AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableID">
            <summary>
            ID corresponding to the variable.  Depending on VariableIDType, this is either a NSObjectID or an AssetGroupID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableIDType">
            <summary>
            Specifies whether the variable is with regard to a NSObject or an AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableStateTypeID">
            <summary>
            If not null, this specifies the StateTypeID corresponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableStateTypeValueIDs">
            <summary>
            If VariableStateTypeID.HasValue, these are the StateTypeValueIDs corresponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableStateTypeOperator">
            <summary>
            If VariableStateTypeID.HasValue, this is the operator corresponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableMetricID">
            <summary>
            If not null, this specifies the MetricID corresponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableMetricValueThreshold">
            <summary>
            If VariableMetricID.HasValue, this is the metric value threshold corrsponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.VariableMetricThresholdOperator">
            <summary>
            If VariableMetricID.HasValue, this is the metric threshold operator corrsponding to the condition represented by the variable.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.TimeParadigmID">
            <summary>
            Indicates a time paradigm outside of which the variable is automatically true.  Zero indicates no time paradigm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinition.ConditionDisplay">
            <summary>
            Display value for the variable's condition.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitions">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitions.Get(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String)">
            <summary>
            Retrieves the variable definition for an id/stateTypeID/stateTypeValueID/variableName combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <param name="variableName">Part of the retrieval filter.</param>
            <returns>A variable definition.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitions.Get(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Retrieves all the variable definition for an id/stateTypeID/stateTypeValueID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <returns>Variable definitions.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync">
            <summary>
            A utility for Calculated State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.BeginGet(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType)">
            <summary>
            Asynchronously retrieves all the variable definition for an id/stateTypeID/stateTypeValueID combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.BeginGetSingular(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.Analytics.CalculatedStateTypeIDType,System.String)">
            <summary>
            Asynchronously retrieves the variable definition for an id/stateTypeID/stateTypeValueID/variableName combo.
            </summary>
            <param name="id">Part of the retrieval filter.</param>
            <param name="stateTypeID">Part of the retrieval filter.</param>
            <param name="stateTypeValueID">Part of the retrieval filter.</param>
            <param name="idType">Specifies whether the filter is with regard to a NSObject or an AssetGroup.</param>
            <param name="variableName">Part of the retrieval filter.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.OnGetResponse">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.OnGetResponseSingular">
            <summary>
            Fires when an instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.GetResponseSingularDelegate">
            <summary>
            Delegate for OnGetResponseSingular.
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CalculatedStateTypeStateTypeValueFormulaSpecificationVariableDefinitionsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSet">
            <summary>
            A utility for Suppression Sets.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.Create(System.String)">
            <summary>
            Creates a Suppression Set.
            </summary>
            <param name="SuppressionSetName">The name for the Suppression Set.</param>
            <returns>The ID for the Suppression Set.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.Create">
            <summary>
            Creates the Suppression Set.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.Update(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},AiMetrix.BusinessObject.ObjectList)">
            <summary>
            Updates the Suppression Set.
            </summary>
            <param name="subordinateSuppressionSets">The IDs of the subordinate Suppression Sets.</param>
            <param name="edicts">The SuppressionEdictIDs of the Suppression Set.</param>
            <param name="nsObjects">The NSObjects in the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.Delete(System.Int64)">
            <summary>
            Deletes a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set that will be deleted.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.Delete(System.String)">
            <summary>
            Deletes a Suppression Set.
            </summary>
            <param name="suppressionSetName">The name of the Suppression Set that will be deleted.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.AddNSObject(System.Int64,System.Guid)">
            <summary>
            Adds an NSObject to a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
            <param name="nsObjectID">The NSObjectID to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveNSObject(System.Int64,System.Guid)">
            <summary>
            Removes an NSObject from a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
            <param name="nsObjectID">The NSObjectID to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveNSObjects(System.Int64)">
            <summary>
            Removes all NSObjects from the Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.AddAssetGroup(System.Int64,System.Guid)">
            <summary>
            Adds an Asset Group to a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
            <param name="assetGroupID">The AssetGroupID to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveAssetGroup(System.Int64,System.Guid)">
            <summary>
            Removes an Asset Group from a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
            <param name="assetGroupID">The AssetGroupID to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveAssetGroups(System.Int64)">
            <summary>
            Removes all Asset Groups from a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.AddSubordinateSuppressionSet(System.Int64,System.Int64)">
            <summary>
            Adds a subordinate Suppression Set to a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
            <param name="subordinateSuppressionSetID">The ID of the subordinate Suppression Set to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveSubordinateSuppressionSet(System.Int64,System.Int64)">
            <summary>
            Removes a subordinate Suppression Set from a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
            <param name="subordinateSuppressionSetID">The ID of the subordinate Suppression Set to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveSubordinateSuppressionSets(System.Int64)">
            <summary>
            Removes all subordinate Suppression Sets from a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID of the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.AddEdict(System.Int64,System.Int64)">
            <summary>
            Adds a Suppression Edict to a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
            <param name="suppressionEdictID">The SuppressionEdictID to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveEdict(System.Int64,System.Int64)">
            <summary>
            Removes a Suppression Edict from a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
            <param name="suppressionEdictID">The SuppressionEdictID to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSet.RemoveEdicts(System.Int64)">
            <summary>
            Removes all Suppression Edicts from a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.SuppressionSetID">
            <summary>
            The ID for the Suppression Set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.SuppressionSetName">
            <summary>
            The Name for the Suppression Set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.ObjectList">
            <summary>
            The NSObjects that are in the Suppression Set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.AssetGroupList">
            <summary>
            The Asset Sets that are in the Suppression Set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.Edicts">
            <summary>
            The SuppressionEdictIDs for the Suppression Set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionSet.SubordinateSuppressionSetIDs">
            <summary>
            The IDs for the Suppression Set's subordinates.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSets">
            <summary>
            A utility for Suppression Sets.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.Get(System.Boolean)">
            <summary>
            Retrieves Suppression Sets.
            </summary>
            <param name="keysOnly">Indicates whether to make a light-weight return.</param>
            <returns>Suppression Sets.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.GetBySuppressionSet(System.Int64)">
            <summary>
            Retrieves a Suppression Set.
            </summary>
            <param name="setID">The ID of the Suppression Set.</param>
            <returns>A Suppression Set.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.GetByAssetGroup(System.Guid,System.Boolean)">
            <summary>
            Retrieves Suppression Sets.
            </summary>
            <param name="assetGroupID">The AssetGroupID.</param>
            <param name="keysOnly">Indicates whether to make a light-weight return.</param>
            <returns>Suppression Sets that contain AssetGroupID.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.GetNSObjectIDsForSet(System.Int64)">
            <summary>
            Retrieves the NSObjectIDs that are in a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID for the Suppression Set.</param>
            <returns>NSObjectIDs.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.GetSubordinateSuppressionSetIDsForSet(System.Int64)">
            <summary>
            Retrieves the SuppressionSetIDs that are subordinates of a Suppression Set.
            </summary>
            <param name="SuppressionSetID">The ID for the Suppression Set.</param>
            <returns>SuppressionSetIDs.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSets.GetEdictsForSet(System.Int64)">
            <summary>
            Retrieves SuppressionEdictIDs for a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID for the Suppression Set.</param>
            <returns>SuppressionEdictIDs.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync">
            <summary>
            Gets collection of suppression Sets objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.BeginGet(System.Boolean)">
            <summary>
            Asynchronously retrieves Suppression Sets.
            </summary>
            <param name="keysOnly">Indicates whether to make a light-weight return.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.BeginGetBySuppressionSet(System.Int64)">
            <summary>
            Asynchronously retrieves a Suppression Set.
            </summary>
            <param name="setID">The ID of the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.BeginGetBySuppressionSet(System.Object,System.Int64)">
            <summary>
            Asynchronously retrieves a Suppression Set.
            </summary>
            <param name="setID">The ID of the Suppression Set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.BeginGetByAssetGroup(System.Object,System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Suppression Sets.
            </summary>
            <param name="assetGroupID">The AssetGroupID.</param>
            <param name="keysOnly">Indicates whether to make a light-weight return.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.OnGetResponse">
            <summary>
            Fires when a SuppressionSets instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.OnGetSenderResponse">
            <summary>
            Fires when a SuppressionSets instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="sets"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.GetSenderResponseDelegate">
            <summary>
            Delegate for OnGetSenderResponse.
            </summary>
            <param name="sender"></param>
            <param name="sets"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionSetsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionEdict">
            <summary>
            A utility for Suppression Edicts.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.CreateEdict(AiMetrix.BusinessObject.Analytics.SuppressionEdict)">
            <summary>
            Creates a Suppression Edict.
            </summary>
            <param name="edict">The edict to create.</param>
            <returns>The SuppressionEdictID that was created.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.CreateEdict(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Creates a Suppression Edict.
            </summary>
            <param name="suppressionEdictName">The name for the edict.</param>
            <param name="suppressorRuleGroupIDs">The RuleGroupIDs that can cause suppression.</param>
            <param name="suppressorCompoundRuleIDs">The CompoundRuleIDs that can cause suppression.</param>
            <param name="suppressedRuleGroupIDs">The RuleGroupIDs that can be suppressed.</param>
            <param name="suppressedCompoundRuleIDs">The CompoundRuleIDs that can be suppressed.</param>
            <param name="denouementRuleGroupIDs">The RuleGroupIDs that can stop suppression.</param>
            <param name="denouementCompoundRuleIDs">The CompoundRuleIDs that can stop suppression.</param>
            <returns>The SuppressionEdictID that was created.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.CreateEdictWithMaximalSuppression(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Creates a Suppression Edict.
            </summary>
            <param name="suppressionEdictName">The name for the edict.</param>
            <param name="suppressorRuleGroupIDs">The RuleGroupIDs that can cause suppression.</param>
            <param name="suppressorCompoundRuleIDs">The CompoundRuleIDs that can cause suppression.</param>
            <param name="denouementRuleGroupIDs">The RuleGroupIDs that can stop suppression.</param>
            <param name="denouementCompoundRuleIDs">The CompoundRuleIDs that can stop suppression.</param>
            <returns>The SuppressionEdictID that was created.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.UpdateEdict(AiMetrix.BusinessObject.Analytics.SuppressionEdict)">
            <summary>
            Updates a Suppression Edict.
            </summary>
            <param name="edict">The edict to update.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.Delete(System.Int64)">
            <summary>
            Deletes a Suppression Edict.
            </summary>
            <param name="suppressionEdictID">The ID of the Edict to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.Delete(System.String)">
            <summary>
            Deletes a Suppression Edict.
            </summary>
            <param name="suppressionEdictName">The name of the Edict to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdict.UpdateWhetherSuppressAllRulesAndCompoundRules(System.Int64,System.Boolean)">
            <summary>
            Updates whether to suppress all rules and compound rules when suppression occurs.
            </summary>
            <param name="suppressionEdictID">The ID of the Suppression Edict.</param>
            <param name="suppressAllRulesAndCompoundRules">If true, then, when suppression occurs, all rules and compound rules of the items in the affected subordinate Suppression Sets will be suppressed.
            If false, then, when suppression occurs, only explicitly specified rules and compound rules of the items in the affected subordinate Suppression Sets will be suppressed.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressionEdictID">
            <summary>
            The ID for the Edict.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressionEdictName">
            <summary>
            The name for the Edict.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressAllRulesAndCompoundRules">
            <summary>
            If true, then, when suppression occurs, all rules and compound rules of the items in the affected subordinate Suppression Sets will be suppressed.
            If false, then, when suppression occurs, only explicitly specified rules and compound rules of the items in the affected subordinate Suppression Sets will be suppressed.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressorRuleGroupIDs">
            <summary>
            RuleGroupIDs that can cause suppression.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressorCompoundRuleIDs">
            <summary>
            CompoundRuleIDs that can cause suppression.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressedRuleGroupIDs">
            <summary>
            RuleGroupIDs that can be suppressed.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.SuppressedCompoundRuleIDs">
            <summary>
            CompoundRuleIDs that can be suppressed.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.DenouementRuleGroupIDs">
            <summary>
            RuleGroupIDs that can stop suppression.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.SuppressionEdict.DenouementCompoundRuleIDs">
            <summary>
            CompoundRuleIDs that can stop suppression.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionEdicts">
            <summary>
            A utility for Suppression Edicts.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdicts.GetBySuppressionEdict(System.Int64)">
            <summary>
            Retrieves a Suppression Edict.
            </summary>
            <param name="suppressionEdictID">The ID of the Suppression Edict to retrieve.</param>
            <returns>A Suppression Edict.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdicts.GetBySuppressionSet(System.Int64)">
            <summary>
            Retrieves all the Suppression Edicts for a Suppression Set.
            </summary>
            <param name="suppressionSetID">The ID of the Suppression Set.</param>
            <returns>Suppression Edicts.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.SuppressionEdicts.Get">
            <summary>
            Retrieves all Suppression Edicts.
            </summary>
            <returns>Suppression Edicts.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.SuppressionEdictsAsync">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorDefaultMetricsTemplates">
            <summary>
            Gets collection of ApplicationMonitorDefaultMetricsTemplate objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorDefaultMetricsTemplatesAsync">
            <summary>
            Gets collection of ApplicationMonitorDefaultMetricsTemplate objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorDefaultMetrics.DefaultRightChartMetricNames">
            <summary>
            The ArrayList consists of NameValueStringPair objects.  The Name value is the Metric Group.  The Value value is the Metric Name.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorServiceStatistics">
            <summary>
            Gets collection of ApplicationMonitorServiceStatistics objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorServiceStatisticsAsync">
            <summary>
            Gets collection of ApplicationMonitorServiceStatistic objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorSystemStatistics">
            <summary>
            Gets collection of ApplicationMonitorSystemStatistics objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorSystemStatisticsAsync">
            <summary>
            Gets collection of ApplicationMonitorSystemStatistic objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorServicesTemplates">
            <summary>
            Gets collection of ApplicationMonitorServicesTemplate objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorServicesTemplatesAsync">
            <summary>
            Gets collection of ApplicationMonitorServicesTemplate objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorServiceTemplate">
            <summary>
            Serializable ApplicationMonitorServiceTemplate object
            - is saved as a CustomTemplate object
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRule">
            <summary>
            Has properties to represent a CompoundRule.  Has methods to update a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.GetByCompoundRule(System.Int64)">
            <summary>
            Retrieves a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to retrieve.</param>
            <returns>A CompoundRule instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.Save">
            <summary>
            Saves a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.Delete">
            <summary>
            Deletes a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.Delete(System.Int64)">
            <summary>
            Deletes a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddAction(System.Int64,System.Int32)">
            <summary>
            Adds an Action to a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to which to add an Action.</param>
            <param name="actionID">The ID of the Action to add to the CompoundRule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddActions">
            <summary>
            Adds actions to a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddActions(System.Int64,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds actions to a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to which to add Actions.</param>
            <param name="actionIDList">The IDs of the Actions to add to the CompoundRule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveAction(System.Int64,System.Int32)">
            <summary>
            Removes an Action from a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule from which to remove an Action.</param>
            <param name="actionID">The ID of the Action to remove from the CompoundRule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveActions">
            <summary>
            Removes Actions from a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveActions(System.Int64,System.Collections.Generic.List{System.Int32})">
            <summary>
            Removes Actions from a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule from which to remove Actions.</param>
            <param name="actionIDList">The IDs of the Actions to remove from the CompoundRule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddNSObject(System.Int64,System.Guid)">
            <summary>
            Adds an NSObject to the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to which to add the NSObject.</param>
            <param name="nsObjectID">The ID of the NSObject to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddNSObjects">
            <summary>
            Adds NSObjects to the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.AddNSObjects(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Adds NSObjects to the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to which to add the NSObjects.</param>
            <param name="nsObjectIDList">The NSObjects to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveNSObject(System.Int64,System.Guid)">
            <summary>
            Removes an NSObject from the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule from which to remove the NSObject.</param>
            <param name="nsObjectID">The ID of the NSObject to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveNSObjects">
            <summary>
            Removes NSObjects from the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.RemoveNSObjects(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Removes NSObjects from the collection of NSObjects on which a CompoundRule's Actions fire when the conditions to satisfy the CompoundRule are true.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule from which to remove the NSObjects.</param>
            <param name="nsObjectIDList">The NSObjects to remove.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.Rename">
            <summary>
            Renames a CompoundRule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRule.Rename(System.Int64,System.String)">
            <summary>
            Renames a CompoundRule.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to rename.</param>
            <param name="name">The new name for the CompoundRule.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.NSObjectIDList">
            <summary>
            When the conditions to satisfy a CompoundRule are true, its Actions fire on these NSObjects.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.CompoundRuleName">
            <summary>
            The name of the CompoundRule.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.CompoundRuleID">
            <summary>
            Uniquely identifies a CompoundRule.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.TimespanMinutes">
            <summary>
            For the CompoundRule's Rules, all Rule Achievements must occur within TimespanMinutes of each other for the compound condition to be true.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.ActionList">
            <summary>
            The Actions that fire when the conditions to satisfy a CompoundRule are true.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.Rules">
            <summary>
            The Rules that compose the compound condition for the CompoundRule.  
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CompoundRule.WizardConfigurationXml">
            <summary>
            Facilitates CompoundRule visualization.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRule.Rule">
            <summary>
            A convenient structure with some Rule information.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRules">
            <summary>
            Facilitates retrieval of CompoundRule instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRules.Get(System.Boolean)">
            <summary>
            Retrieves all CompoundRule instances.
            </summary>
            <param name="keysOnly">When true, fewer properties of the retrieved CompoundRule instances are populated.</param>
            <returns>A collection of CompoundRule instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRulesAsync">
            <summary>
            Facilitates asynchronous retrieval of CompoundRule instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRulesAsync.BeginGet(System.Boolean)">
            <summary>
            Asynchronously retrieves all CompoundRule instances.
            </summary>
            <param name="keysOnly">When true, fewer properties of the retrieved CompoundRule instances are populated.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CompoundRulesAsync.BeginGetByRule(System.Int64)">
            <summary>
            Asynchronously retrieves a CompoundRules instance with at most one CompoundRule instance.
            </summary>
            <param name="compoundRuleID">The ID of the CompoundRule to retrieve.</param>
            <returns>A CompoundRules instance.</returns>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.CompoundRulesAsync.OnGetResponse">
            <summary>
            Fires when an asynchronous Get returns.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.CompoundRulesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRulesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="sender"></param>
            <param name="rules"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CompoundRulesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RuleCustomOccurrenceConditionsAsync">
            <summary>
            Gets collection of Rule objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RuleSNMPTrapConditionsAsync">
            <summary>
            Gets collection of Rule objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RuleSysLogConditionsAsync">
            <summary>
            Gets collection of Rule objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.GeoSpatial.GeoSpatialRegion.BoundaryEndpoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ACUListVueItem">
            <summary>
            Antenna Control Unit ListVueItem 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ACUListVueItem.ToString">
            <summary>
            DisplayName
            </summary>
            <returns>DisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.NSObjectID">
            <summary>
            The ID of the Antenna Control Unit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.ClassificationTypeID">
            <summary>
            The classificationType ID of the ACU
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.ClassificationType">
            <summary>
            The classificationType of the antenna
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.DisplayName">
            <summary>
            The NSObject display name of the ACU.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.AntennaNSObjectID">
            <summary>
            The ID of the ACU's antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.AntennaDisplayName">
            <summary>
            The NSObject display name of the ACU's antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.Teleport">
            <summary>
            Location of the ACU
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.Location">
            <summary>
            Location of the ACU
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.ManufacturerDisplayName">
            <summary>
            Manufacturer of the ACU
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.ACUListVueItem.ModelDisplayName">
            <summary>
            Model of the ACU
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ACUListVueItems">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ACUListVueItems.GetPage(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a page of transponders
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ACUListVueItems.GetPageByAssetGroup(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific assetGroup
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="assetGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ACUListVueItems.GetPageByCircuit(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific circuit
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="circuitNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ACUListVueItems.GetPageByCustomer(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific customer
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AntennaListVueItem">
            <summary>
            AntennaListVueItem 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.ToString">
            <summary>
            DisplayName
            </summary>
            <returns>DisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.NSObjectID">
            <summary>
            The ID of the antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.ClassificationTypeID">
            <summary>
            The classificationType ID of the antenna
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.ClassificationType">
            <summary>
            The classificationType of the antenna
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.AntennaDisplayName">
            <summary>
            The NSObject display name of the antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.Teleport">
            <summary>
            The teleport associated with this antenna
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.SatelliteNSObjectID">
            <summary>
            The ID of the satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.SatelliteDisplayName">
            <summary>
            The NSObject display name of the antenna's satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AntennaListVueItem.Size">
            <summary>
            The antenna size
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AntennaListVueItems">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AntennaListVueItems.GetPage(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a page of transponders
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AntennaListVueItems.GetPageByAssetGroup(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific assetGroup
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="assetGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AntennaListVueItems.GetPageByCircuit(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific circuit
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="circuitNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AntennaListVueItems.GetPageByCustomer(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific customer
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Carrier">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carrier.Save(System.Guid,System.Double,System.Double,System.Guid)">
            <summary>
            Saves a Carrier.
            </summary>
            <param name="nsobjectID">ID of the Carrier.</param>
            <param name="plannedCenterFrequencyMHz">The Carrier's planned center frequency.</param>
            <param name="bandwidthMHz">The Carrier's bandwidth.</param>
            <param name="transponderID">The Carrier's transponder.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carrier.Save(System.Guid,System.Double)">
            <summary>
            Saves a Carrier.
            </summary>
            <param name="nsobjectID">ID of the Carrier.</param>
            <param name="plannedCenterFrequencyMHz">The Carrier's planned center frequency.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carrier.Save(System.Guid)">
            <summary>
            Saves a Carrier.
            </summary>
            <param name="nsobjectID">ID of the Carrier.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Carrier.NSObjectID">
            <summary>
            ID of the Carrier.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Carrier.PlannedCenterFrequencyMHz">
            <summary>
            The Carrier's planned center frequency.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Carrier.BandwidthMHz">
            <summary>
            The Carrier's bandwidth.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Carrier.TransponderID">
            <summary>
            The Carrier's transponder.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Carriers">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carriers.Get(System.Guid)">
            <summary>
            Retrieves a Carrier.
            </summary>
            <param name="nsobjectID">ID of the Carrier.</param>
            <returns>Carrier.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carriers.GetByService(System.Guid)">
            <summary>
            Get the carrier (if any) associated with the given service
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carriers.GetByEnterpriseService(System.Guid)">
            <summary>
            Returns all carriers used in the given enterprise service
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carriers.SetService(System.Guid,System.Guid)">
            <summary>
            Associate this carrier with a Service, enforce the one carrier per service rule.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Carriers.Get">
            <summary>
            Retrieves Carriers.
            </summary>
            <returns>Carriers.</returns>       
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.CarrierListVueItem._carrierNSObjectID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CarrierListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.CarrierListVueItem,AiMetrix.BusinessObject.Inventory.CarrierListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CarrierListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.CarrierListVueItem,AiMetrix.BusinessObject.Inventory.CarrierListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CarrierListVueItem.ClassificationTypeID">
            <summary>
            The classificationType ID of the antenna
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CarrierListVueItem.ClassificationType">
            <summary>
            The classificationType of the antenna
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CarrierListVueItems">
            <summary>
            Gets collection of DeviceListVue objects sychronously.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.DeviceListVueItem._NSObjectID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.DeviceListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.DeviceListVueItem,AiMetrix.BusinessObject.Inventory.DeviceListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.DeviceListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.DeviceListVueItem,AiMetrix.BusinessObject.Inventory.DeviceListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.DeviceListVueItem.ModelUrl">
            <summary>
            Display name for the url for the model.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.DeviceListVueItem.ModelUrlDisplayName">
            <summary>
            Display name for the url for the model.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.DeviceListVueItems">
            <summary>
            Gets collection of DeviceListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.DataPortal_Execute">
            <summary>
            this class is read-only
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.NSObjectID">
            <summary>
            The ID of the Satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.DisplayName">
            <summary>
            The NSObject display name of the Satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.SatelliteOperatorOwnerID">
            <summary>
            ID corresponding to the satellite's operatorowner.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.SatelliteOperatorOwnerDisplayName">
            <summary>
            Display name corresponding to the satellite's operatorowner.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteListVueItem.OrbitPosition">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SatelliteListVueItems">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteListVueItems.GetPage(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a page of satellites
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteListVueItems.GetPageByAssetGroup(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of satellites associated with a specific assetGroup
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="assetGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteListVueItems.GetPageByCircuit(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of satellites associated with a specific circuit
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="circuitNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteListVueItems.GetPageByCustomer(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of satellites associated with a specific customer
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem._serviceAssetGroupID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem,AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem,AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ServiceLayoutListVueItems">
            <summary>
            Gets collection of DeviceListVue objects sychronously.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.ServiceListVueItem._serviceAssetGroupID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ServiceListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.ServiceListVueItem,AiMetrix.BusinessObject.Inventory.ServiceListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ServiceListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.ServiceListVueItem,AiMetrix.BusinessObject.Inventory.ServiceListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ServiceListVueItems">
            <summary>
            Gets collection of DeviceListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Transponder">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Transponder.Save(System.Guid,System.Double,System.Double,System.Double,AiMetrix.BusinessObject.Enums.Polarization,AiMetrix.BusinessObject.Enums.Polarization)">
            <summary>
            Saves a transponder entity for the NSObject.
            </summary>
            <param name="nsobjectID">The ID of the Transponder.</param>
            <param name="transponderBandwidthMHz"></param>
            <param name="uplinkCenterFrequencyMHz"></param>
            <param name="downlinkCenterFrequencyMHz"></param>
            <param name="uplinkPolarizationID">Specifies polarization on the uplink.</param>
            <param name="downlinkPolarizationID">Specifies polarization on the downlink.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Transponder.ToString">
            <summary>
            DisplayName
            </summary>
            <returns>DisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.NSObjectID">
            <summary>
            The ID of the Transponder.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.DisplayName">
            <summary>
            The NSObject display name of the Transponder.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.SatelliteNSObjectID">
            <summary>
            The ID of the Transponder's satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.SatelliteDisplayName">
            <summary>
            The NSObject display name of the Transponder's satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.TransponderBandwidthMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.UplinkCenterFrequencyMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.UplinkPolarization">
            <summary>
            Specifies polarization on the uplink.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.DownlinkCenterFrequencyMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Transponder.DownlinkPolarization">
            <summary>
            Specifies polarization on the downlink.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Transponders">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Transponders.Get(System.Guid)">
            <summary>
            Retrieves a Transponder.
            </summary>
            <param name="nsobjectID">The ID of the Transponder.</param>
            <returns>A Transponder.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Transponders.Get">
            <summary>
            Retrieves Transponders.
            </summary>
            <returns>Transponders</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Satellite">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Satellite.Save(System.Guid,System.Int64,System.String)">
            <summary>
            Saves a satellite entity for the NSObject.
            </summary>
            <param name="nsobjectID">The ID of the Satellite.</param>
            <param name="satelliteOperatorOwnerID">ID corresponding to the satellite's operatorowner.</param>
            <param name="orbitPosition"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Satellite.ToString">
            <summary>
            DisplayName
            </summary>
            <returns>DisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Satellite.NSObjectID">
            <summary>
            The ID of the Satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Satellite.DisplayName">
            <summary>
            The NSObject display name of the Satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Satellite.SatelliteOperatorOwnerDisplayName">
            <summary>
            Display name corresponding to the satellite's operatorowner.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Satellite.OrbitPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Satellite.SatelliteOperatorOwnerID">
            <summary>
            ID corresponding to the satellite's operatorowner.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Satellites">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Satellites.Get(System.Guid)">
            <summary>
            Retrieves a Satellite.
            </summary>
            <param name="nsobjectID">The ID of the Satellite.</param>
            <returns>A Satellite.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Satellites.Get">
            <summary>
            Retrieves Satellites.
            </summary>
            <returns>Satellites</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.Save(System.String,System.String)">
            <summary>
            Creates a SatelliteOperatorOwner if satelliteOperatorOwnerNameKey does not already exist; otherwise, updates the display name corresponding to the name-key.
            </summary>
            <param name="satelliteOperatorOwnerNameKey">Fixed name-key for the SatelliteOperatorOwner.</param>
            <param name="satelliteOperatorOwnerDisplayName">Editable display name for the SatelliteOperatorOwner.</param>
            <returns>The ID of the SatelliteOperatorOwner.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.Delete(System.Int64)">
            <summary>
            Deletes a SatelliteOperatorOwner.
            </summary>
            <param name="satelliteOperatorOwnerID">The ID of the SatelliteOperatorOwner.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.Update(System.Int64,System.String)">
            <summary>
            Updates the display name for a SatelliteOperatorOwner.
            </summary>
            <param name="satelliteOperatorOwnerID">The ID of the SatelliteOperatorOwner.</param>
            <param name="satelliteOperatorOwnerDisplayName">Editable display name for the SatelliteOperatorOwner.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.ToString">
            <summary>
            SatelliteOperatorOwnerDisplayName
            </summary>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.SatelliteOperatorOwnerID">
            <summary>
            The ID of the SatelliteOperatorOwner.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.SatelliteOperatorOwnerNameKey">
            <summary>
            Fixed name-key for the SatelliteOperatorOwner.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwner.SatelliteOperatorOwnerDisplayName">
            <summary>
            Editable display name for the SatelliteOperatorOwner.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwners">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwners.Get(System.Int64)">
            <summary>
            Retrieves a SatelliteOperatorOwner.
            </summary>
            <param name="satelliteOperatorOwnerID">The ID of the SatelliteOperatorOwner.</param>
            <returns>A SatelliteOperatorOwner.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SatelliteOperatorOwners.Get">
            <summary>
            Retrieves SatelliteOperatorOwners.
            </summary>
            <returns>SatelliteOperatorOwners</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSCustomAttributeItems">
            <summary>
            Gets collection of NSCustomAttributeItem objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSCustomAttributeItemsAsync">
            <summary>
            Gets collection of NSCustomAttributeItem objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSCustomObjectItems">
            <summary>
            Gets collection of NSCustomObjectItem objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSCustomObjectItemsAsync">
            <summary>
            Gets collection of NSCustomObjectItem objects asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.GeoSpatial.GeoSpatialPosition.SetLatLong(System.Guid,System.Int32,System.Double,System.Double)">
            <summary>
            Set the Latitude and Longitude for given object
            </summary>
            <param name="objectID"></param>
            <param name="containmentTypeID">0-nsobject, 1-subnet, 2-assetgroup</param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.GeoSpatial.GeoSpatialPosition.SetLatLongAlt(System.Guid,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Set the Latitude, Longitude, and Altitude for given object
            </summary>
            <param name="objectID"></param>
            <param name="containmentTypeID">0-nsobject, 1-subnet, 2-assetgroup</param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="altitude"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Antenna">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antenna.Create(System.Guid,System.Nullable{System.Guid},System.String,System.Nullable{System.Double})">
            <summary>
            Creates an antenna entity for the NSObject.
            </summary>
            <param name="nsobjectID">The ID of the Antenna.</param>
            <param name="acuNSObjectID">The ID of the antenna control unit.</param>
            <param name="standard">standard for the antenna</param>
            <param name="antennaSize">size for the antenna</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antenna.Update(System.Guid,System.Nullable{System.Guid},System.String,System.Nullable{System.Double})">
            <summary>
            Updates the antenna control unit and standard for an antenna.
            </summary>
            <param name="nsobjectID">The ID of the Antenna.</param>
            <param name="acuNSObjectID">The ID of the antenna control unit.</param>
            <param name="standard">standard for the antenna</param>
            <param name="antennaSize">size for the antenna</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antenna.UpdateACU(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Updates the antenna control unit for an antenna.
            </summary>
            <param name="nsobjectID">The ID of the Antenna.</param>
            <param name="acuNSObjectID">The ID of the antenna control unit.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antenna.UpdateStandard(System.Guid,System.String)">
            <summary>
            Updates standard for an antenna.
            </summary>
            <param name="nsobjectID">The ID of the Antenna.</param>
            <param name="standard">standard for the antenna</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antenna.UpdateSize(System.Guid,System.Double)">
            <summary>
            Updates size for an antenna.
            </summary>
            <param name="nsobjectID">The ID of the Antenna.</param>
            <param name="antennaSize">size for the antenna</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.NSObjectID">
            <summary>
            The ID of the Antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.DisplayName">
            <summary>
            The NSObject display name of the Antenna.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.ACUNSObjectID">
            <summary>
            The ID of the antenna control unit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.ACUNSDisplayName">
            <summary>
            The NSObject display name of the antenna control unit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Antenna.AntennaSize">
            <summary>
            Antenna size.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Antennas">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antennas.Get(System.Guid)">
            <summary>
            Retrieves an Antenna.
            </summary>
            <param name="nsobectID">The ID of the Antenna.</param>
            <returns>An Antenna.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antennas.Get">
            <summary>
            Retrieves Antennas.
            </summary>
            <returns>Antennas</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Antennas.Get(System.Boolean)">
            <summary>
            Retrieves Antennas.
            </summary>
            <param name="keysOnly">When true, a limitation is placed on the properties that get populated for the retrieved items.</param>
            <returns>Antennas</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.TransponderListVueItem">
            <summary>
            TransponderListVueItem 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.ToString">
            <summary>
            DisplayName
            </summary>
            <returns>DisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.NSObjectID">
            <summary>
            The ID of the Transponder.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.ClassificationTypeID">
            <summary>
            The classificationType ID of the transponder
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.ClassificationType">
            <summary>
            The classificationType of the transponder
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.DisplayName">
            <summary>
            The NSObject display name of the Transponder.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.SatelliteNSObjectID">
            <summary>
            The ID of the Transponder's satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.SatelliteDisplayName">
            <summary>
            The NSObject display name of the Transponder's satellite.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.TransponderBandwidthMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.UplinkCenterFrequencyMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.UplinkPolarization">
            <summary>
            Specifies polarization on the uplink.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.DownlinkCenterFrequencyMHz">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.TransponderListVueItem.DownlinkPolarization">
            <summary>
            Specifies polarization on the downlink.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.TransponderListVueItems">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.TransponderListVueItems.GetPage(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get a page of transponders
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.TransponderListVueItems.GetPageByAssetGroup(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific assetGroup
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="assetGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.TransponderListVueItems.GetPageByCircuit(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific circuit
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="circuitNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.TransponderListVueItems.GetPageByCustomer(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Get a page of transponders associated with a specific customer
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="customerID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Circuit">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuit.Save(System.Guid,System.Double)">
            <summary>
            Saves Circuit info.
            </summary>
            <param name="nsobjectID">ID of the Circuit.</param>
            <param name="datarate"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuit.Save(System.Guid,System.Guid)">
            <summary>
            Saves Circuit info.
            </summary>
            <param name="nsobjectID">ID of the Circuit.</param>
            <param name="primaryServiceLayoutAssetGroupID">ID of the Circuit's primary service layout.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuit.Save(System.Guid,System.Guid,System.Guid,System.Int64,System.Double)">
            <summary>
            Saves a Circuit.
            </summary>
            <param name="nsobjectID">ID of the Circuit.</param>
            <param name="customerID">ID of the Circuit's customer.</param>
            <param name="primaryServiceLayoutAssetGroupID">ID of the Circuit's primary service layout.</param>
            <param name="serviceCategoryID">ID of the category of service for the Circuit.</param>
            <param name="datarate"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.NSObjectID">
            <summary>
            ID of the Circuit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.NSObjectDisplayName">
            <summary>
            Display name for the Circuit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.CustomerID">
            <summary>
            ID of the Circuit's customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.CustomerDisplayName">
            <summary>
            Display name for the Circuit's customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.ServiceLayoutAssetGroupID">
            <summary>
            ID of the Circuit's primary service layout.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.ServiceLayoutAssetGroupName">
            <summary>
            Display name for the Circuit's primary service layout.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.ServiceCategoryID">
            <summary>
            ID of the category of service for the Circuit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.ServiceCategoryDisplayName">
            <summary>
            Display name for the category of service for the Circuit.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Circuit.DataRate">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Circuits">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuits.GetByCustomer(System.Guid)">
            <summary>
            Retrieves Circuits.
            </summary>
            <param name="customerID">ID of the Circuits' customer.</param>
            <returns>Circuits.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuits.GetByServiceLayout(System.Guid)">
            <summary>
            Retrieves Circuits.
            </summary>
            <param name="customerID">ID of the Circuits' primary service layout asset group.</param>
            <returns>Circuits.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuits.Get(System.Guid)">
            <summary>
            Retrieves a Circuit.
            </summary>
            <param name="nsobjectID">ID of the Circuit.</param>
            <returns>Circuit.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuits.Get">
            <summary>
            Retrieves Circuits.
            </summary>
            <returns>Circuits.</returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Circuits.Get(System.String)">
            <summary>
            Retrieves Circuits.
            </summary>
            <param name="nsobjectDisplayName"></param>
            <returns>Circuits.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.CustomerVitals">
            <summary>
            Gets collection of CustomerVital objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.CustomerVitalsAsync">
            <summary>
            Gets collection of CustomerVital objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomerListViewItem">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomerListViewItem.ToString">
            <summary>
            CustomerDisplayName
            </summary>
            <returns>CustomerDisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomerListViewItem.CustomerID">
            <summary>
            The ID of the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomerListViewItem.CustomerDisplayName">
            <summary>
            The display name of the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomerListViewItem.CustomerPhone">
            <summary>
            Customer phone number.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomerListViewItem.CustomerPriorityID">
            <summary>
            Specifies priority for the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomerListViewItem.CanUserEdit">
            <summary>
            Indicates whether the login can edit the Customer.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomerListViewItems">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomerListViewItems.GetPageByNSObject(System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Returns all customers that are associated with specified NSObjectID
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filterAttribute"></param>
            <param name="filter"></param>
            <param name="orderBy"></param>
            <param name="isAscending"></param>
            <param name="NSObjectID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.ServiceCategory">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategory.Save(System.String,System.String)">
            <summary>
            Creates a ServiceCategory if serviceCategoryNameKey does not already exist; otherwise, updates the display name corresponding to the name-key.
            </summary>
            <param name="serviceCategoryNameKey">Fixed name-key for the ServiceCategory.</param>
            <param name="serviceCategoryDisplayName">Editable display name for the ServiceCategory.</param>
            <returns>The ID of the ServiceCategory.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategory.Delete(System.Int64)">
            <summary>
            Deletes a ServiceCategory.
            </summary>
            <param name="serviceCategoryID">The ID of the ServiceCategory.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategory.Update(System.Int64,System.String)">
            <summary>
            Updates the display name for a ServiceCategory.
            </summary>
            <param name="serviceCategoryID">The ID of the ServiceCategory.</param>
            <param name="serviceCategoryDisplayName">Editable display name for the ServiceCategory.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategory.ToString">
            <summary>
            display name
            </summary>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.ServiceCategory.ServiceCategoryID">
            <summary>
            The ID of the ServiceCategory.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.ServiceCategory.ServiceCategoryNameKey">
            <summary>
            Fixed name-key for the ServiceCategory.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.ServiceCategory.ServiceCategoryDisplayName">
            <summary>
            Editable display name for the ServiceCategory.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.ServiceCategorys">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategorys.Get(System.Int64)">
            <summary>
            Retrieves a ServiceCategory.
            </summary>
            <param name="serviceCategoryID">The ID of the ServiceCategory.</param>
            <returns>A ServiceCategory.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.ServiceCategorys.Get">
            <summary>
            Retrieves ServiceCategorys.
            </summary>
            <returns>ServiceCategorys</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Model">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Save(System.String,System.String,System.Int64)">
            <summary>
            Creates a Model if modelNameKey does not already exist; otherwise, updates the display name and manufacturer corresponding to the name-key.
            </summary>
            <param name="modelNameKey">Fixed name-key for the Model.</param>
            <param name="modelDisplayName">Editable display name for the Model.</param>
            <param name="manufacturerID">The ID of the Model's Manufacturer.</param>
            <returns>The ID of the Model.</returns>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Save(System.String,System.String,System.Int64,System.String)">
            <summary>
            Creates a Model if modelNameKey does not already exist; otherwise, updates the display name and manufacturer corresponding to the name-key.
            </summary>
            <param name="modelNameKey">Fixed name-key for the Model.</param>
            <param name="modelDisplayName">Editable display name for the Model.</param>
            <param name="manufacturerID">The ID of the Model's Manufacturer.</param>
            <param name="url">URL for the Model.</param>
            <returns>The ID of the Model.</returns>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Delete(System.Int64)">
            <summary>
            Deletes a Model.
            </summary>
            <param name="modelID">The ID of the Model.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Update(System.Int64,System.String)">
            <summary>
            Updates the display name for a Model.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="modelDisplayName">Editable display name for the Model.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Update(System.Int64,System.Int64)">
            <summary>
            Updates the manufacturer for a Model.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="manufacturerID">The ID of the Model's Manufacturer.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Update(System.Int64,System.String,System.Int64)">
            <summary>
            Updates the display name and manufacturer for a Model.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="modelDisplayName">Editable display name for the Model.</param>
            <param name="manufacturerID">The ID of the Model's Manufacturer.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.Update(System.Int64,System.String,System.Int64,System.String,System.String)">
            <summary>
            Update the data for a Model
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="modelDisplayName">Editable display name for the Model.</param>
            <param name="manufacturerID">The ID of the Model's Manufacturer.</param>
            <param name="url">URL for the Model.</param>
            <param name="urlDisplayName">DisplayName for the URL for the Model.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.UpdateURL(System.Int64,System.String)">
            <summary>
            Updates the Model's url.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="url">URL for the Model.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Model.UpdateURLDisplayName(System.Int64,System.String)">
            <summary>
            Updates the Model's url's display name.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <param name="urlDisplayName">DisplayName for the URL for the Model.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.ModelID">
            <summary>
            The ID of the Model.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.ModelNameKey">
            <summary>
            Fixed name-key for the Model.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.ModelDisplayName">
            <summary>
            Editable display name for the Model.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.ManufacturerID">
            <summary>
            The ID of the Model's Manufacturer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.ManufacturerDisplayName">
            <summary>
            Editable display name for the Manufacturer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.UrlDisplayName">
            <summary>
            Display name for the url for the model.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Model.Url">
            <summary>
            Editable url for the model.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Models">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Models.Get(System.Int64)">
            <summary>
            Retrieves a Model.
            </summary>
            <param name="modelID">The ID of the Model.</param>
            <returns>A Model.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Models.Get">
            <summary>
            Retrieves Models.
            </summary>
            <returns>Models</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Models.GetByManufacturer(System.Int64)">
            <summary>
            Retrieves Models.
            </summary>
            <param name="manufacturerID">The ID of the Models' Manufacturer.</param>
            <returns>Models</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Manufacturer">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Manufacturer.Save(System.String,System.String)">
            <summary>
            Creates a Manufacturer if manufacturerNameKey does not already exist; otherwise, updates the display name corresponding to the name-key.
            </summary>
            <param name="manufacturerNameKey">Fixed name-key for the Manufacturer.</param>
            <param name="manufacturerDisplayName">Editable display name for the Manufacturer.</param>
            <returns>The saved Manufacturer.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Manufacturer.Delete(System.Int64)">
            <summary>
            Deletes a Manufacturer.
            </summary>
            <param name="manufacturerID">The ID of the Manufacturer.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Manufacturer.Update(System.Int64,System.String)">
            <summary>
            Updates the display name for a Manufacturer.
            </summary>
            <param name="manufacturerID">The ID of the Manufacturer.</param>
            <param name="manufacturerDisplayName">Editable display name for the Manufacturer.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Manufacturer.ManufacturerID">
            <summary>
            The ID of the Manufacturer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Manufacturer.ManufacturerNameKey">
            <summary>
            Fixed name-key for the Manufacturer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Manufacturer.ManufacturerDisplayName">
            <summary>
            Editable display name for the Manufacturer.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Manufacturers">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Manufacturers.Get(System.Int64)">
            <summary>
            Retrieves a Manufacturer.
            </summary>
            <param name="manufacturerID">The ID of the Manufacturer.</param>
            <returns>A Manufacturer.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Manufacturers.Get">
            <summary>
            Retrieves Manufacturers.
            </summary>
            <returns>Manufacturers</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.ListDataReader.Reset">
            <summary>
            Reset internal list of rows.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.ListDataReader.Count">
            <summary>
            Number of rows in internal list of rows.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.DBTable.BulkInsertWithScrub(System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.DBTableRow})">
            <summary>
            Protocols: 
                For each DBTableRow, x,... 
                    (a) x.Cells is ordered by ORDINAL_POSITION;
                    (b) timestamp/rowversion cells are omitted;
                    (c) x.Cells[i].CellValue returns the appropriate value to be bulked into the database's awaiting cell.
                Table X has table XBlk and proc XBlk_Scrub.
            </summary>
            <param name="table"></param>
            <param name="bulkList"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.DBTable.Get(System.String,System.Byte[],System.Guid)">
            <summary>
            To do: convert the childNSNodeID parameter to requestingNSNodeID.
            </summary>
            <param name="tableName"></param>
            <param name="lastRowVersion"></param>
            <param name="childNSNodeID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.MaintenanceSchedule.Create(System.Guid,AiMetrix.BusinessObject.Misc.MaintenanceSchedule.MaintenanceObjectType,AiMetrix.BusinessObject.NSDateTime,AiMetrix.BusinessObject.NSDateTime)">
            <summary>
            Use this method when you want to specify a starting date/time and an ending date/time.
            </summary>
            <param name="objectID"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.MaintenanceSchedule.Delete(System.Int64)">
            <summary>
            Deletes a maintenance schedule.
            </summary>
            <param name="scheduleID">The id of the schedule to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.MaintenanceSchedule.Delete(System.Int64,System.Boolean)">
            <summary>
            Deletes a maintenance schedule.
            </summary>
            <param name="scheduleID">The id of the schedule to delete.</param>
            <param name="immediateRemanage">When true, the state managed state(s) is immediately established.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.MaintenanceSchedule.Delete(System.Guid,AiMetrix.BusinessObject.Misc.MaintenanceSchedule.MaintenanceObjectType)">
            <summary>
            Deletes maintenance schedules for objectID.
            </summary>
            <param name="objectID">The id corresponding to the entity having the schedule(s).</param>
            <param name="objectType">Determines whether objectID corresponds to an Asset Group or a NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.MaintenanceSchedule.Delete(System.Guid,AiMetrix.BusinessObject.Misc.MaintenanceSchedule.MaintenanceObjectType,System.Boolean)">
            <summary>
            Deletes maintenance schedules for objectID.
            </summary>
            <param name="objectID">The id corresponding to the entity having the schedule(s).</param>
            <param name="objectType">Determines whether objectID corresponds to an Asset Group or a NSObject.</param>
            <param name="immediateRemanage">When true, the state managed state(s) is immediately established.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Schedule.op_Equality(AiMetrix.BusinessObject.Misc.Schedule,AiMetrix.BusinessObject.Misc.Schedule)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Schedule.op_Inequality(AiMetrix.BusinessObject.Misc.Schedule,AiMetrix.BusinessObject.Misc.Schedule)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYAxesType">
            <summary>
            An instance of this class defines the type of axes for graphing a xy point type.  There are methods to update axes types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYAxesType.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a NSXYAxesType.
            </summary>
            <param name="xType">Indicates the title for the x axis.</param>
            <param name="yType">Indicates the title for the y axis.</param>
            <param name="xMeasurementUnit">Indicates the measurement unit for the x axis.</param>
            <param name="yMeasurementUnit">Indicates the measurement unit for the y axis.</param>
            <returns>The ID of the NSXYAxesType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYAxesType.Create(System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Creates a NSXYAxesType.
            </summary>
            <param name="xType">Indicates the title for the x axis.</param>
            <param name="yType">Indicates the title for the y axis.</param>
            <param name="xMeasurementUnit">Indicates the measurement unit for the x axis.</param>
            <param name="yMeasurementUnit">Indicates the measurement unit for the y axis.</param>
            <param name="xAxisMin">The minimum x value to graph.</param>
            <param name="xAxisMax">The maximum x value to graph.</param>
            <param name="yAxisMin">The minimum y value to graph.</param>
            <param name="yAxisMax">The maximum y value to graph.</param>
            <param name="isLogarithmicX">Indicates whether the x axis is logarithmic.</param>
            <param name="isLogarithmicY">Indicates whether the y axis is logarithmic.</param>
            <returns>The ID of the NSXYAxesType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYAxesType.Update(System.Int64,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Boolean)">
            <summary>
            Updates a NSXYAxesType.
            </summary>
            <param name="nsXYAxesTypeID">The ID of the NSXYAxesType to update.</param>
            <param name="xAxisMin">The minimum x value to graph.</param>
            <param name="xAxisMax">The maximum x value to graph.</param>
            <param name="yAxisMin">The minimum y value to graph.</param>
            <param name="yAxisMax">The maximum y value to graph.</param>
            <param name="isLogarithmicX">Indicates whether the x axis is logarithmic.</param>
            <param name="isLogarithmicY">Indicates whether the y axis is logarithmic.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.NSXYAxesTypeID">
            <summary>
            Uniquely identifies the NSXYAxesType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.XType">
            <summary>
            Indicates the title for the x axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.YType">
            <summary>
            Indicates the title for the y axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.XMeasurementUnit">
            <summary>
            Indicates the measurement unit for the x axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.YMeasurementUnit">
            <summary>
            Indicates the measurement unit for the y axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.XAxisMin">
            <summary>
            The minimum x value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.XAxisMax">
            <summary>
            The maximum x value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.YAxisMin">
            <summary>
            The minimum y value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.YAxisMax">
            <summary>
            The maximum y value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.IsLogarithmicX">
            <summary>
            Indicates whether the x axis is logarithmic.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYAxesType.IsLogarithmicY">
            <summary>
            Indicates whether the y axis is logarithmic.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYAxesTypes">
            <summary>
            Allows for retrieval of NSXYAxesType instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYAxesTypes.Get">
            <summary>
            Retrieves NSXYAxesType instances.
            </summary>
            <returns>A collection of NSXYAxesType instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync">
            <summary>
            Allows for asynchronous retrieval of NSXYAxesType instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync.BeginGet">
            <summary>
            Asynchronously retrieves NSXYAxesType instances.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync.OnGetResponse">
            <summary>
            Fires when a NSXYAxesTypes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsXYAxesTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYAxesTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointType">
            <summary>
            The type for a NSXYPoint.  Has methods to create types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointType.Create(System.String,System.Int64)">
            <summary>
            Creates a NSXYPointType.
            </summary>
            <param name="nsXYPointTypeName">The name for the NSXYPointType.</param>
            <param name="nsXYAxesTypeID">Specifies the NSXYAxesType for the NSXYPointType.</param>
            <returns>NSXYPointTypeID for the created NSXYPointType.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPointType.NSXYPointTypeID">
            <summary>
            Uniquely identifies the NSXYPointType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPointType.NSXYPointTypeName">
            <summary>
            The name for the NSXYPointType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPointType.NSXYAxesTypeID">
            <summary>
            Specifies the NSXYAxesType for the NSXYPointType.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypes">
            <summary>
            Has methods to retrieve NSXYPointType instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointTypes.Get">
            <summary>
            Asynchronously retrieves all NSXYPointType instances.
            </summary>
            <returns>A collection of NSXYPointType instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointTypes.GetByAxes(System.Int64)">
            <summary>
            Retrieves NSXYPointType instances.
            </summary>
            <param name="nsXYAxisTypeID">Specifies the NSXYAxesType for the retrieved NSXYPointType instances.</param>
            <returns>A collection of NSXYPointType instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointTypes.GetByAxes(System.Int64,System.Boolean)">
            <summary>
            Retrieves NSXYPointType instances.
            </summary>
            <param name="nsXYAxisTypeID">Specifies the NSXYAxesType for the retrieved NSXYPointType instances.</param>
            <param name="withDataOnly">When true, restricts the retrieval set to NSXYPointType instances for which NSXYPoint data has been published.</param>
            <returns>A collection of NSXYPointType instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync">
            <summary>
            Facilitates asynchronous retrieval of NSXYPointType instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync.BeginGet">
            <summary>
            Asynchronously retrieves all NSXYPointType instances.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync.OnGetResponse">
            <summary>
            Fires when a NSXYPointTypes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsXYPointTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPoint">
            <summary>
            Has properties representing a xy point.  Has methods to publish points.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.#ctor(System.Int64,System.Guid,System.Double,System.Double,System.DateTime)">
            <summary>
            Constructs a NSXYPoint.
            </summary>
            <param name="nsXYPointTypeID">The ID for the NSXYPoint's NSXYPointType.</param>
            <param name="nsObjectID">The ID of the NSObject for the NSXYPoint.</param>
            <param name="xValue">The x value for the point.</param>
            <param name="yValue">The y value for the point.</param>
            <param name="sampleTime">Indicates the publish time for the NSXYPoint.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.PublishPoint(AiMetrix.BusinessObject.Misc.NSXYPoint)">
            <summary>
            Publishes a NSXYPoint.
            </summary>
            <param name="nsXYPoint">The NSXYPoint to publish.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.PublishPoint(System.Int64,System.Guid,System.Double,System.Double,System.DateTime)">
            <summary>
            Publishes a NSXYPoint.
            </summary>
            <param name="nsXYPointTypeID">The ID for the NSXYPoint's NSXYPointType.</param>
            <param name="nsObjectID">The ID of the NSObject for the NSXYPoint.</param>
            <param name="xValue">The x value for the point.</param>
            <param name="yValue">The y value for the point.</param>
            <param name="sampleTime">Indicates the publish time for the NSXYPoint.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.PublishPoints(System.Int64,System.Guid,System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.XYPoint})">
            <summary>
            Publishes a set of points coalescing into a snapshot at one time.
            </summary>
            <param name="nsXYPointTypeID">The ID of the NSXYPointType for the points.</param>
            <param name="nsObjectID">The ID of the NSObject for the points.</param>
            <param name="xyPoints">The points coalescing into a snapshot.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.PublishPoints(System.Int64,System.Guid,System.Collections.Generic.List{AiMetrix.BusinessObject.Analytics.XYPoint},System.DateTime)">
            <summary>
            Publishes a set of points coalescing into a snapshot at one time.
            </summary>
            <param name="nsXYPointTypeID">The ID of the NSXYPointType for the points.</param>
            <param name="nsObjectID">The ID of the NSObject for the points.</param>
            <param name="xyPoints">The points coalescing into a snapshot.</param>
            <param name="sampleTime">Specifies the publish time for the snapshot.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoint.PublishPoints(System.Collections.Generic.List{AiMetrix.BusinessObject.Misc.NSXYPoint})">
            <summary>
            Publishes a set of points.  Points with the same SampleTime, NSObjectID, and NSXYPointTypeID coalesce into a snapshot.
            </summary>
            <param name="nsXYPoints">The points to publish.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.NSXYPointTypeID">
            <summary>
            The ID for the NSXYPoint's NSXYPointType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.NSXYPointTypeName">
            <summary>
            The name for the NSXYPoint's NSXYPointType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.XType">
            <summary>
            Indicates the title for the x axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.YType">
            <summary>
            Indicates the title for the y axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.XMeasurementUnit">
            <summary>
            Indicates the measurement unit for the x axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.YMeasurementUnit">
            <summary>
            Indicates the measurement unit for the y axis.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.XAxisMin">
            <summary>
            The minimum x value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.XAxisMax">
            <summary>
            The maximum x value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.YAxisMin">
            <summary>
            The minimum y value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.YAxisMax">
            <summary>
            The maximum y value to graph.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.IsLogarithmicX">
            <summary>
            Indicates whether the x axis is logarithmic.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.IsLogarithmicY">
            <summary>
            Indicates whether the y axis is logarithmic.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.NSObjectDisplayName">
            <summary>
            Prefixed display name for the NSXYPoint's NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.NSObjectID">
            <summary>
            The ID of the NSObject for the NSXYPoint.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.XValue">
            <summary>
            The x value for the point.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.YValue">
            <summary>
            The y value for the point.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPoint.SampleTime">
            <summary>
            Indicates the publish time for the NSXYPoint.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPoints">
            <summary>
            Facilitates retrieval of NSXYPoint instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoints.GetLatestSet(System.Int64,System.Guid)">
            <summary>
            Retrieves NSXYPoint instances.
            </summary>
            <param name="nsXYPointTypeID">The ID of the NSXYPointType for the retrieved NSXYPoint instances.</param>
            <param name="nsObjectID">The ID of the NSObject for the retrieved NSXYPoint instances.</param>
            <returns>A collection of NSXYPoint instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPoints.GetLatestSetsByLists(System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Int64})">
            <summary>
            Retrieves NSXYPoint instances.
            </summary>
            <param name="nsObjectIDList">The retrieved NSXYPoint instances will have NSObjectID in this list.</param>
            <param name="xyPointTypeIDList">The retrieved NSXYPoint instances will have NSXYPointTypeID in this list.</param>
            <returns>A collection of NSXYPoint instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointsAsync">
            <summary>
            Facilitates asynchronous retrieval of NSXYPoint instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.BeginGetLatestSet(System.Int64,System.Guid)">
            <summary>
            Asychronously retrieves NSXYPoint instances.
            </summary>
            <param name="nsXYPointTypeID">The ID of the NSXYPointType for the retrieved NSXYPoint instances.</param>
            <param name="nsObjectID">The ID of the NSObject for the retrieved NSXYPoint instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.BeginGetLatestSetsByLists(System.Collections.Generic.List{System.Guid},System.Collections.Generic.List{System.Int64})">
            <summary>
            Asynchronously retrieves NSXYPoint instances.
            </summary>
            <param name="nsObjectIDList">The retrieved NSXYPoint instances will have NSObjectID in this list.</param>
            <param name="xyPointTypeIDList">The retrieved NSXYPoint instances will have NSXYPointTypeID in this list.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.OnGetResponse">
            <summary>
            Fires when a NSXYPoints instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsXYPoints"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.NSXYPointCollector.NSDataReader.Add(System.Object[])">
            <summary>
            Add row to internal list of rows to be read.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.NSXYPointCollector.NSDataReader.Count">
            <summary>
            Number of rows in internal list of rows.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesInventoryObjectsComboAsync">
            <summary>
            Gets collection of NSXYPointTypesInventoryObjectsCombos objects asychronously.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointTypesInventoryObjectsComboAsync.OnGetResponse">
            <summary>
            Fires when an asynchronous Get call returns.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Misc.NSXYPointTypesInventoryObjectsComboAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesInventoryObjectsComboAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="inventoryObjects"></param>
            <param name="nsXYPointTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.NSXYPointTypesInventoryObjectsComboAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Filter">
            <summary>
            Filter
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.FilterID">
            <summary>
            Unique identifier for this filter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.FilterType">
            <summary>
            Type of object this filter is applicable to.
            See Enums.FilterType for possible values
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.FilterName">
            <summary>
            Filter name.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.FilterSecurityGroupID">
            <summary>
            SecurityGroupId that filter applies to.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.ScopeType">
            <summary>
            The scope types are public, group, user.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.ConditionsList">
            <summary>
            ConditionsList, is a collection of Conditions that
            can be bound to a datagrid with add, edit, remove 
            capabilities builtin.  Can be set as the DataSource 
            of a BindingSource to also get builtin navigating, 
            sorting, filtering and updating.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.IncludeAllChildren">
            <summary>
            Include all of the children of any object that meets the filter criteria
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Filter.IncludeAllChildrenSpecified">
            <summary>
            Was the IncludeAllChildren property set
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Filter.Conditions">
            <summary>
            Helper collection takes Conditions string from database
            parses into individual condition items to allow binding
            directly to collection with add, edit remove capablilities builtin.
            Set as the DataSource of a BindingSource to also get
            builtin navigating, sorting, filtering and updating.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filter.Conditions.#ctor(Nsda2.Data.SafeDataReader)">
            <summary>
            Conditions  collection.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filter.Conditions.DataPortal_Update">
            <summary>
            This Update is called just to set the MarkOld property on the children
            so that collection will behave properly in the datagrid.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filter.Conditions.Update(System.Data.SqlClient.SqlTransaction,System.Guid)">
            <summary>
            Call update method on individual condition objects.
            </summary>
            <param name="tr"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Filter.Condition">
            <summary>
            Represents a single condition of the Filter.Conditions collection
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filter.Condition.Update">
            <summary>
            This Update is called just to set the MarkOld property
            so that collection will behave properly in the datagrid.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filter.Condition.AddDBTicks(System.String)">
            <summary>
            return input string with ticks
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Filters">
            <summary>
            Gets collection of Filter objects sychronously.
            Creates, updates or deletes individual Filter object sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.Get">
            <summary>
            This method will return a collection of All 
            filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetByFilterType(System.String)">
            <summary>
            This method will return a collection of All 
            filters of specified type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetFilter(System.Guid)">
            <summary>
            This method will return a single fully populated Filter item
            which can then be updated using Filter.Update(filter);
            </summary>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetFilter(System.Object,System.Guid)">
            <summary>
            This method will return a single fully populated Filter item
            which can then be updated using Filter.Update(alarmFilter);
            </summary>
            <param name="sender"></param>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetSecurityObjectFilter(System.Int32)">
            <summary>
            This method will return the securityobject filter for a specified group
            it can be called by members of the administrator group only
            </summary>
            <param name="sender"></param>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetSecurityMapViewFilter(System.Int32)">
            <summary>
            This method will return the securitymap View filter for a specified group
            it can be called by members of the administrator group only
            </summary>
            <param name="sender"></param>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Filters.GetSecurityMapDisplayInTreeFilter(System.Int32)">
            <summary>
            This method will return the securitymap DisplayInTree filter for a specified group
            it can be called by members of the administrator group only
            </summary>
            <param name="sender"></param>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.FiltersAsync">
            <summary>
            Gets collection of Filter objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.FiltersAsync.GetSecurityObjectFilterDelegate">
            <summary>
            Get the single filter object that defines the securityobject
            filter for specified group.
            </summary>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.FiltersAsync.GetSecurityMapViewFilterDelegate">
            <summary>
            Get the single filter object that defines the securitymap viewing
            filter for specified group.
            </summary>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.FiltersAsync.GetSecurityMapDisplayInTreeFilterDelegate">
            <summary>
            Get the single filter object that defines the securitymap displayInTree
            filter for specified group.
            </summary>
            <param name="securityGroupID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.Actions">
            <summary>
            Gets collection of Action objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.ActionsAsync">
            <summary>
            Gets collection of Action objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.ActionType.ActionParameter">
            <summary>
            Contains a key and value pair.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.ActionType.ActionParameter.Name">
            <summary>
            The Key or Name value.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.ActionType.ActionParameter.Value">
            <summary>
            The Value corresponding to the key/name.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.ActionTypes">
            <summary>
            Gets collection of ActionType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.ActionTypesAsync">
            <summary>
            Gets collection of ActionType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmDurations">
            <summary>
            Gets collection of AlarmDuration objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmDurationsAsync">
            <summary>
            Gets collection of AlarmDuration objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmFilter">
            <summary>
            AlarmFilter
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Alarms.AlarmFilter._conditionsList">
            <summary>
            There is no need to serialize this field because it is only used on the client.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmFilter.AlarmFilterID">
            <summary>
            Unique identifier for this alarm filter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmFilter.AlarmFilterName">
            <summary>
            Alarm filter name.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmFilter.ScopeType">
            <summary>
            The scope types are public, group, user.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmFilter.SqlCondition">
            <summary>
            String representation of the sqlCondtions as stored in the database.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmFilter.ConditionsList">
            <summary>
            ConditionsList, is a collection of Conditions that
            is created by parsing the Conditions string that is stored
            in the database. Can be bound to a datagrid with add, edit, 
            remove capabilities builtin.  Can be set as the DataSource 
            of a BindingSource to also get builtin navigating, sorting, 
            filtering and updating.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmFilter.Conditions">
            <summary>
            Helper collection takes Conditions string from database
            parses into individual condition items to allow binding
            directly to collection with add, edit remove capablilities builtin.
            Set as the DataSource of a BindingSource to also get
            builtin navigating, sorting, filtering and updating.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Conditions.#ctor(System.String)">
            <summary>
            Conditions  collection.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Conditions.DataPortal_Update">
            <summary>
            This Update is called just to set the MarkOld property on the children
            so that collection will behave properly in the datagrid.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition">
            <summary>
            Represents a single condition of the AlarmFilter.Conditions collection
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.ScrubSqlStringToUserText(System.String@)">
            <summary>
            Remove sql specific characters for display of filter value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.ReplaceSqlWithUserText(System.String@,System.Boolean,System.Boolean)">
            <summary>
            Replace Sql words with user understandable text
            </summary>
            <param name="crit"></param>
            <param name="beginPercent"></param>
            <param name="endPercent"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.TimeAckedToUserText(System.String@,System.String@,System.String@)">
            <summary>
            Handle special case Convert TimeAcked to Status
            with value of either acked or unacked.
            </summary>
            <param name="attr"></param>
            <param name="crit"></param>
            <param name="val"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.SeverityIDToUserText(System.String@,System.String@,System.String@)">
            <summary>
            Handle special case convert SeverityID to Severity and 
            convert Severity number to Severitytext e.g. 1 is Critical.
            </summary>
            <param name="attr"></param>
            <param name="crit"></param>
            <param name="val"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.DisplayNameToUserText(System.String@)">
            <summary>
            Handle special case convert NSNode DisplayName to NSNodeName.
            </summary>
            <param name="attr"></param>
            <param name="crit"></param>
            <param name="val"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.AlarmSeverityIdToAlarmSeverityString(System.String@)">
            <summary>
            Convert AlarmSeverityIDs in string to AlarmSeverityText
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilter.Condition.AlarmSeverityStringToAlarmSeverityID(System.String@)">
            <summary>
            Convert AlarmSeverityText in string to AlarmSeverityIDs
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmFilters">
            <summary>
            Gets collection of AlarmFilter objects sychronously.
            Creates, updates or deletes individual AlarmFilter object sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.Get">
            <summary>
            This method will return a collection of All 
            alarmFilters with ID, Name and Scope property values only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetKeys">
            <summary>
            This method will return a collection of All 
            alarmFilters with ID, Name and Scope property values only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetKeys(System.Object)">
            <summary>
            This method will return a collection of All 
            alarmFilters with ID, Name and Scope property values only.
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetByAlarmFilterID(System.Guid)">
            <summary>
            This method will always return a collection containing a single
            fully populated AlarmFilter item, which can then be updated using
            AlarmFilter.Update(alarmFilter);
            </summary>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetByAlarmFilterID(System.Object,System.Guid)">
            <summary>
            This method will always return a collection containing a single
            fully populated AlarmFilter item, which can then be updated using
            AlarmFilter.Update(alarmFilter);
            </summary>
            <param name="sender"></param>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetAlarmFilter(System.Guid)">
            <summary>
            This method will return a single fully populated AlarmFilter item
            which can then be updated using AlarmFilter.Update(alarmFilter);
            </summary>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmFilters.GetAlarmFilter(System.Object,System.Guid)">
            <summary>
            This method will return a single fully populated AlarmFilter item
            which can then be updated using AlarmFilter.Update(alarmFilter);
            </summary>
            <param name="sender"></param>
            <param name="alarmFilterID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmFiltersAsync">
            <summary>
            Gets collection of AlarmFilter objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarm">
            <summary>
            Has properties for an Alarm and methods to update Alarms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.#ctor(System.String,AiMetrix.BusinessObject.Alarms.Alarm.AlarmSeverity,System.String)">
            <summary>
            Constructs an Alarm instance.
            </summary>
            <param name="alarmIDKey">Part of a key to identify the Alarm.</param>
            <param name="severity">The severity for the Alarm.</param>
            <param name="alarmType">The type of Alarm.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.#ctor(System.String,AiMetrix.BusinessObject.Alarms.Alarm.AlarmSeverity,System.String,System.String)">
            <summary>
            Constructs an Alarm instance.
            </summary>
            <param name="alarmIDKey">Part of a key to identify the Alarm.</param>
            <param name="severity">The severity for the Alarm.</param>
            <param name="alarmType">The type of Alarm.</param>
            <param name="alarmID">An alternative display for alarmIDKey.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Save(System.Guid)">
            <summary>
            Saves an Alarm.
            </summary>
            <param name="nsObjectID">The ID for the Alarm's NSObject.</param>
            <returns>The saved Alarm.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Save(System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Guid})">
            <summary>
            Saves an Alarm.
            </summary>
            <param name="nsObjectID">The ID for the Alarm's NSObject.</param>
            <param name="timeFirst">Allows the call to specify the Alarm's TimeFirst.</param>
            <param name="timeLast">Allows the call to specify the Alarm's TimeLast.</param>
            <param name="nsNodeID">The ID for the Alarm's NSNode.</param>
            <returns>The saved Alarm.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Save(System.Boolean)">
            <summary>
            Saves an Alarm.
            </summary>
            <param name="overWriteAllAlarmAttributes">Allows certain fields to be overwritten with empty strings.</param>
            <returns>The saved Alarm.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Save">
            <summary>
            Saves a system Alarm.
            </summary>
            <returns>The saved Alarm.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.SetUserData(System.Guid,AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem[])">
            <summary>
            Sets user data fields for an Alarm.
            </summary>
            <param name="alarmGUID">The ID for the Alarm.</param>
            <param name="items">The user data fields to update.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.SetUserData(System.Guid,System.Collections.Generic.List{AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem})">
            <summary>
            Sets user data fields for an Alarm.
            </summary>
            <param name="alarmGUID">The ID for the Alarm.</param>
            <param name="items">The user data fields to update.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Acknowledge">
            <summary>
            Acknowledges the Alarm.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Acknowledge(System.Guid[])">
            <summary>
            Acknowledges Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to acknowledge.</param>
            <returns>The system-recorded TimeAcknowledged.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Acknowledge(System.Collections.Generic.List{System.Guid})">
            <summary>
            Acknowledges Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to acknowledge.</param>
            <returns>The system-recorded TimeAcknowledged.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.SetProminentAlarm(System.Guid,System.Guid)">
            <summary>
            Sets the Prominent Alarm for an Alarm.
            </summary>
            <param name="alarmGUID">The ID of the Alarm that is getting its Prominent set.</param>
            <param name="prominentAlarmGUID">The ID of the Prominent Alarm.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.ClearProminentAlarm(System.Guid)">
            <summary>
            Removes the prominent Alarm from an Alarm.
            </summary>
            <param name="alarmGUID">The ID of the Alarm that is getting its prominent Alarm removed.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.ClearProminentAlarm(System.Collections.Generic.List{System.Guid})">
            <summary>
            Removes the Prominent Alarm from a list of Alarms
            </summary>
            <param name="alarmGUIDs">List of alarmGUIDs that are getting their Prominent Alarm removed.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Delete">
            <summary>
            Clears an Alarm.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Delete(System.DateTime)">
            <summary>
            Clears an Alarm and specifies the TimeCleared for the Alarm.
            </summary>
            <param name="timeDeleted">The TimeCleared for the Alarm.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Delete(System.String,System.Guid)">
            <summary>
            Clears an Alarm.
            </summary>
            <param name="alarmIDKey">Part of a key to identify the Alarm.</param>
            <param name="nsObjectID">The ID of the Alarm's NSObject.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.DeleteSystemAlarm(System.String)">
            <summary>
            Clears a system Alarm.
            </summary>
            <param name="alarmIDKey">Part of a key to identify the Alarm.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Delete(System.Guid[])">
            <summary>
            Clears Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to clear.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.Delete(System.Collections.Generic.List{System.Guid})">
            <summary>
            Clears Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to clear.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.GetAlarm(System.Data.DataRow)">
            <summary>
            Translates a DataRow instance into an Alarm instance.
            </summary>
            <param name="dr">A well-formed DataRow instance.</param>
            <returns>An Alarm instance.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.AlarmGUID">
            <summary>
            Uniquely identifies an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.NSObjectID">
            <summary>
            Identifies the NSObject for an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.NodePrefix">
            <summary>
            Part of the name of an Alarm's NSObject (not persisted when Save is called).
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.DisplayName">
            <summary>
            The name of an Alarm's NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.Description">
            <summary>
            Descriptive information for an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.AlarmType">
            <summary>
            The type of Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.AlarmIDKey">
            <summary>
            Part of a key to identify an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.AlarmID">
            <summary>
            An alternative display for AlarmIDKey.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.FromAgent">
            <summary>
            Information about the origin of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TimeFirst">
            <summary>
            The time when an Alarm came into being.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TimeLast">
            <summary>
            The last time an Alarm's occurrence count increased.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.Status">
            <summary>
            Either Acked or UnAcked.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.NSNodeName">
            <summary>
            The NSNode(s) incrementing an Alarm's occurrence count.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TimeAcknowledged">
            <summary>
            The time an Alarm was acknowledged.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.AckedBy">
            <summary>
            The acknowledger of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UpdatedBy">
            <summary>
            The last updater of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.OccurrenceCount">
            <summary>
            The number of times an Alarm's impetus has occurred.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.NewOccurrenceCount">
            <summary>
            The number of times an Alarm's occurrence count has increased after the Alarm was acknowledged.  If the Alarm has not been acknowledged, then NewOccurrenceCount == OccurrenceCount.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ClassificationTypeID">
            <summary>
            Identifies the classification type of an Alarm's NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ClassificationType">
            <summary>
            Display for the classification type of an Alarm's NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.CustomerID">
            <summary>
            Information about the customer of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TroubleTicket">
            <summary>
            Information about the trouble ticket of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ProminentAlarmNSObjectID">
            <summary>
            The ID of the NSObject of the prominent Alarm of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ProminentAlarmIDKey">
            <summary>
            Part of a key to identify the prominent Alarm of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ProminentAlarmID">
            <summary>
            An alternative display for the AlarmIDKey of an Alarm's prominent Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ProminentDisplayName">
            <summary>
            The name of the NSObject of an Alarm's prominent Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.ProminentAlarmType">
            <summary>
            The type of an Alarm's prominent Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserDatas">
            <summary>
            Allows iteration through the User Data fields.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData1">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData2">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData3">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData4">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData5">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData6">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData7">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData8">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData9">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData10">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData11">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData12">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData13">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData14">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserData15">
            <summary>
            Placeholder for descriptive information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.SeverityID">
            <summary>
            The ID for the severity of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.Severity">
            <summary>
            The severity of an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.DeletedBy">
            <summary>
            The account that cleared an Alarm.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TimeDeleted">
            <summary>
            TimeDeleted has been deprecated. Please use TimeCleared instead
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.TimeCleared">
            <summary>
            The time an Alarm was cleared.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.IsDeleted">
            <summary>
            True for cleared Alarms; false otherwise.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.RuleGroupID">
            <summary>
            If an Alarm was created by a "Create Alarm" action of a Rule, then this is the corresponding RuleGroupID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.CompoundRuleID">
            <summary>
            If an Alarm was created by a "Create Alarm" action of a Compound Rule, then this is the corresponding CompoundRuleID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.DiffID">
            <summary>
            If an Alarm was created by the Difference Engine, then this is the corresponding DiffID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.DiffConfigType">
            <summary>
            If an Alarm was created by the Difference Engine, then this is the corresponding DiffConfigType.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarm.AlarmSeverity">
            <summary>
            An Alarm will have one of these severities.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarm.AlarmStatus">
            <summary>
            An Alarm either has been or has not been acknowledged.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarm.UserData">
            <summary>
            Corresponds to the user data fields.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem">
            <summary>
            Structure for user data information.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem.#ctor(AiMetrix.BusinessObject.Alarms.Alarm.UserData,System.Object)">
            <summary>
            
            </summary>
            <param name="name">The name of the user data field.</param>
            <param name="value">The value for the user data field.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem.Name">
            <summary>
            The name of the user data field.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarm.UserDataItem.Value">
            <summary>
            The value for the user data field.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.Alarms">
            <summary>
            Has methods to retrieve and update Alarms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Acknowledge(System.Guid[])">
            <summary>
            Acknowledges Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to acknowledge.</param>
            <returns>The system-recorded TimeAcknowledged.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Acknowledge(System.Collections.Generic.List{System.Guid})">
            <summary>
            Acknowledges Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to acknowledge.</param>
            <returns>The system-recorded TimeAcknowledged.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.ClearProminentAlarm(System.Collections.Generic.List{System.Guid})">
            <summary>
            Removes the Prominent Alarm from a list of Alarms
            </summary>
            <param name="alarmGUIDs">List of alarmGUIDs that are getting their Prominent Alarm removed.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Delete(System.Guid[])">
            <summary>
            Clears Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to clear.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Delete(System.Collections.Generic.List{System.Guid})">
            <summary>
            Clears Alarms.
            </summary>
            <param name="alarmGUIDs">The IDs of the Alarms to clear.</param>
            <returns>The system-recorded TimeCleared.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetDataSet">
            <summary>
            Translates the collection of Alarm instances into a DataSet. 
            </summary>
            <returns>A DataSet representation of the collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Get">
            <summary>
            Retrieves Alarms.
            </summary>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.Get(System.Byte[])">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmIDAndNSObjectID(System.String,System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="alarmIDKey">Part of a key to identify the Alarms.</param>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <returns>A collection of Alarm instances; typically, there will only be one Alarm instance in this collection.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmGUID(System.Guid)">
            <summary>
            Retrieves an Alarm.
            </summary>
            <param name="alarmGUID">The ID of the Alarm to retrieve.</param>
            <returns>A collection with one Alarm instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByNSObject(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByNSObject(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByNSObject(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroup(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroup(System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroup(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroup(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupSeverity(System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupSeverity(System.Byte[],System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupUnacked(System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupUnacked(System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupUnacked(System.Byte[],System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAssetGroupUnacked(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnet(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnet(System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnet(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnet(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetUnacked(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetUnacked(System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetUnacked(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetUnacked(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetSeverity(System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetSeverity(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetSeverity(System.Byte[],System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetBySubnetSeverity(System.Byte[],System.Guid,System.Int32,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilter(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilter(System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilter(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilter(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterSeverity(System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterSeverity(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterSeverity(System.Byte[],System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterSeverity(System.Byte[],System.Guid,System.Int32,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterUnacked(System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterUnacked(System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterUnacked(System.Byte[],System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByAlarmFilterUnacked(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMap(System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMap(System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMap(System.Byte[],System.Guid)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMap(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapRowFilter(System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapSeverity(System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapSeverity(System.Byte[],System.Guid,System.Int32)">
            <summary>
            Retrieves Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapUnacked(System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapUnacked(System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapUnacked(System.Byte[],System.Guid)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByMapUnacked(System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves unacknowledged Alarms.
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByCustomer(System.Byte[],System.Byte[],System.Guid,System.Boolean)">
            <summary>
            Retrieves Alarms associated with specific customer
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="customerID">The ID of the customer associated with the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.Alarms.GetByCustomer(System.Byte[],System.Byte[],System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Retrieves Alarms associated with specific customer
            </summary>
            <param name="rowVersion">The Alarm record-change mark after which data can be retrieved.</param>
            <param name="customerID">The ID of the customer associated with the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <returns>A collection of Alarm instances.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarms.RowVersion">
            <summary>
            The largest RowVersion for the Alarms that were retrieved.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.Alarms.InitialConsecutiveLoadCap">
            <summary>
            Used in conjunction with a "get by chunks" strategy where an initial retrieval call supplies "zero" as the Alarm record-change mark parameter.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync">
            <summary>
            Has methods to retrieve and update Alarms asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGet">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObjectUnacked(System.Guid)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObjectUnacked(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObject(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObject(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObject(System.Guid,System.Boolean,System.Int32)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByNSObject(System.Guid,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of nsObjectID can be included.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilter(System.Guid)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilter(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterUnacked(System.Guid)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterUnacked(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterSeverity(System.Guid,System.Int32)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterSeverity(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAlarmFilterRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="alarmFilterID">The ID of the Alarm Filter that determines the Alarms that are returned.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMap(System.Guid)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMap(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMapUnacked(System.Guid)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMapUnacked(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMapSeverity(System.Guid,System.Int32)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMapRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByMapRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="mapID">The ID of the Map containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroup(System.Guid)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroup(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroupSeverity(System.Guid,System.Int32)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroupUnacked(System.Guid)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroupUnacked(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroupRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByAssetGroupRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnet(System.Guid)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnet(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnetSeverity(System.Guid,System.Int32)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="severityID">The ID for the severity of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnetUnacked(System.Guid)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnetUnacked(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves unacknowledged Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnetRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetBySubnetRowFilter(System.Guid,AiMetrix.BusinessObject.Enums.RowFilter,System.String,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="subnetID">The ID of the Subnet containing the NSObjects of the Alarms.</param>
            <param name="rowFilter">Specifies a type of filter.</param>
            <param name="rowFilterString">The value for the filter specified by rowFilter.</param>
            <param name="getProminentAlarmsOnly">When true, only Alarms without a Prominent Alarm will be returned.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginGetByCustomer(System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves Alarms.
            </summary>
            <param name="customerID">The ID of the Customer for the Alarms.</param>
            <param name="includeChildren">When true, Alarms from children of customer can be included.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginDelete(System.Collections.Generic.List{System.Guid})">
            <summary>
            Asynchronously clears Alarms.
            </summary>
            <param name="alarmGuids">The IDs of the Alarms to clear.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginAck(System.Collections.Generic.List{System.Guid})">
            <summary>
            Asynchronously acknowledges Alarms.
            </summary>
            <param name="alarmGuids">The IDs of the Alarms to acknowledge.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmsAsync.BeginClearProminentAlarm(System.Collections.Generic.List{System.Guid})">
            <summary>
            Removes the Prominent Alarm from a list of Alarms
            </summary>
            <param name="alarmGUIDs">List of alarmGUIDs that are getting their Prominent Alarm removed.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnGetResponse">
            <summary>
            Fires when an Alarms instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnDeleteResponse">
            <summary>
            Fires when an asynchronous Delete completes.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnAckResponse">
            <summary>
            Fires when an asynchronous Ack completes.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnClearProminentAlarmResponse">
            <summary>
            Fires when an asynchronous clear Prominent completes.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnDeleteErrorResponse">
            <summary>
            Fires when an asynchronous Delete errors.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnAckErrorResponse">
            <summary>
            Fires when an asynchronous Ack errors.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Alarms.AlarmsAsync.OnClearProminentAlarmErrorResponse">
            <summary>
            Fires when an asynchronous clear Prominent errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="alarms">An Alarms instance returned from an asynchronous call.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.DeleteResponseDelegate">
            <summary>
            Delegate for OnDeleteResponse.
            </summary>
            <param name="timeDeleted">The system-recorded TimeCleared.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.AckResponseDelegate">
            <summary>
            Delegate for OnAckResponse.
            </summary>
            <param name="alarmGuids">The Alarms that were acknowledged.</param>
            <param name="timeAcked">The system-recorded TimeAcknowledged.</param>
            <param name="ackedBy">The acknowledger.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.ClearProminentAlarmResponseDelegate">
            <summary>
            Delegate for OnClearProminentAlarmResponse.
            </summary>
            <param name="alarmGuids"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.DeleteErrorResponseDelegate">
            <summary>
            Delegate for OnDeleteErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.AckErrorResponseDelegate">
            <summary>
            Delegate for OnAckErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmsAsync.ClearProminentAlarmErrorResponseDelegate">
            <summary>
            Delegate for OnClearProminentAlarmErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.UserDataDictionary`2">
            <summary>
            Modifications to read-only dictionary to allow values
            to be changed, no add/remove or clear allows of items
            in dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:AiMetrix.BusinessObject.ReadOnlyDictionary`2">
            <summary> 
            http://www.cuttingedge.it/blogs/steven/pivot/entry.php?id=29
            Provides the base class for a generic read-only dictionary. 
            
            </summary> 
            <typeparam name="TKey"> 
            The type of keys in the dictionary. 
            </typeparam> 
            <typeparam name="TValue"> 
            The type of values in the dictionary. 
            </typeparam> 
            <remarks> 
            <para> 
            An instance of the ReadOnlyDictionary generic class is 
            always read-only. A dictionary that is read-only is simply a 
            dictionary with a wrapper that prevents modifying the 
            dictionary; therefore, if changes are made to the underlying 
            dictionary, the read-only dictionary reflects those changes.  
            See <see cref="T:System.Collections.Generic.Dictionary`2"/> for a modifiable version of  
            this class. 
            </para> 
            <para> 
            <b>Notes to Implementers</b> This base class is provided to  
            make it easier for implementers to create a generic read-only 
            custom dictionary. Implementers are encouraged to extend this 
            base class instead of creating their own.  
            </para> 
            </remarks>
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>    
            Initializes a new instance of the    
            <see cref="T:ReadOnlyDictionary`2" /> class that wraps    
            the supplied <paramref name="dictionaryToWrap"/>.    
            </summary>    
            <param name="dictionaryToWrap">The <see cref="T:IDictionary`2" />    
            that will be wrapped.</param>    
            <exception cref="T:System.ArgumentNullException">    
            Thrown when the dictionary is null.    
            </exception>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>This method is not supported by the     
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>    
            <param name="key">    
            The object to use as the key of the element to add.</param>    
            <param name="value">    
            The object to use as the value of the element to add.</param>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:ReadOnlyDictionary`2" />    
            contains the specified key.</summary>    
            <returns>    
            True if the <see cref="T:ReadOnlyDictionary`2" /> contains    
            an element with the specified key; otherwise, false.    
            </returns>    
            <param name="key">The key to locate in the    
            <see cref="T:ReadOnlyDictionary`2"></see>.</param>    
            <exception cref="T:System.ArgumentNullException">    
            Thrown when the key is null.    
            </exception>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>    
            This method is not supported by the <see cref="T:ReadOnlyDictionary`2"/>.    
            </summary>    
            <param name="key">The key of the element to remove.</param>    
            <returns>    
            True if the element is successfully removed; otherwise, false.    
            </returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>    
            Gets the value associated with the specified key.    
            </summary>    
            <param name="key">The key of the value to get.</param>    
            <param name="value">When this method returns, contains the value    
            associated with the specified key, if the key is found;    
            otherwise, the default value for the type of the value parameter.    
            This parameter is passed uninitialized.</param>    
            <returns>    
            <b>true</b> if the <see cref="T:ReadOnlyDictionary`2" /> contains    
            an element with the specified key; otherwise, <b>false</b>.    
            </returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the    
            <see cref="T:ReadOnlyDictionary`2"/>.</summary>    
            <param name="item">    
            The object to add to the <see cref="T:ICollection`1"/>.    
            </param>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>This method is not supported by the     
            <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>    
            Determines whether the <see cref="T:ICollection`1"/> contains a    
            specific value.    
            </summary>    
            <param name="item">    
            The object to locate in the <see cref="T:ICollection`1"/>.    
            </param>    
            <returns>    
            <b>true</b> if item is found in the <b>ICollection</b>;     
            otherwise, <b>false</b>.    
            </returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>    
            Copies the elements of the ICollection to an Array, starting at a    
            particular Array index.     
            </summary>    
            <param name="array">The one-dimensional Array that is the    
            destination of the elements copied from ICollection.    
            The Array must have zero-based indexing.    
            </param>    
            <param name="arrayIndex">    
            The zero-based index in array at which copying begins.    
            </param>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>This method is not supported by the    
            <see cref="T:ReadOnlyDictionary`2"/>.
            </summary>    
            <param name="item">    
            The object to remove from the ICollection.    
            </param>    
            <returns>Will never return a value.</returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>    
            Returns an enumerator that iterates through the collection.    
            </summary>    
            <returns>    
            A IEnumerator that can be used to iterate through the collection.    
            </returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>    
            Returns an enumerator that iterates through a collection.    
            </summary>    
            <returns>    
            An IEnumerator that can be used to iterate through the collection.    
            </returns>    
        </member>
        <member name="M:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>    
            For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.     
            </summary>    
            <param name="array">    
            The one-dimensional Array that is the destination of the elements copied from     
            ICollection. The Array must have zero-based indexing.    
            </param>    
            <param name="index">    
            The zero-based index in Array at which copying begins.    
            </param>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.Count">
            <summary>    
            Gets the number of key/value pairs contained in the    
            <see cref="T:ReadOnlyDictionary`2"></see>.    
            </summary>    
            <value>The number of key/value pairs.</value>    
            <returns>The number of key/value pairs contained in the    
            <see cref="T:ReadOnlyDictionary`2"></see>.</returns>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.Keys">
            <summary>Gets a collection containing the keys in the    
            <see cref="T:ReadOnlyDictionary{TKey,TValue}"></see>.</summary>    
            <value>A <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>     
            containing the keys.</value>    
            <returns>A    
            <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>    
            containing the keys in the    
            <see cref="T:System.Collections.Generic.Dictionary`2"></see>.    
            </returns>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.Values">
            <summary>    
            Gets a collection containing the values of the    
            <see cref="T:ReadOnlyDictionary`2"/>.    
            </summary>    
            <value>The collection of values.</value>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>Gets a value indicating whether the dictionary is read-only.    
            This value will always be true.</summary>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>    
            Gets a value indicating whether access to the dictionary    
            is synchronized (thread safe).    
            </summary>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>    
            Gets an object that can be used to synchronize access to dictionary.    
            </summary>    
        </member>
        <member name="P:AiMetrix.BusinessObject.ReadOnlyDictionary`2.Item(`0)">
            <summary>    
            Gets or sets the value associated with the specified key.    
            </summary>    
            <returns>    
            The value associated with the specified key. If the specified key    
            is not found, a get operation throws a     
            <see cref="T:System.Collections.Generic.KeyNotFoundException" />,    
            and a set operation modifies the value of an existing key.    
            </returns>    
            <param name="key">The key of the value to get or set.</param>    
            <exception cref="T:System.ArgumentNullException">    
            Thrown when the key is null.    
            </exception>    
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">    
            The property is retrieved and key does not exist in the collection.    
            </exception>    
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.UserDataDictionary`2.Item(`0)">
            <summary>    
            Gets or sets the value associated with the specified key.    
            </summary>    
            <returns>    
            The value associated with the specified key. If the specified key    
            is not found, a get operation throws a     
            <see cref="T:System.Collections.Generic.KeyNotFoundException" />,    
            and a set operation modifies the value of an existing key.    
            </returns>    
            <param name="key">The key of the value to get or set.</param>    
            <exception cref="T:System.ArgumentNullException">    
            Thrown when the key is null.    
            </exception>    
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">    
            The property is retrieved and key does not exist in the collection.    
            </exception>    
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmStatistics">
            <summary>
            Gets collection of AlarmStatistic objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmStatisticsAsync">
            <summary>
            Gets collection of AlarmStatistic objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Alarms.AlarmSummary.ID">
            <summary>
            This property can contain any one of many 
            different ID values, AlarmSeverity, AlarmType,
            ClassificationType, Subnet, Location, etc.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmSummaries">
            <summary>
            Gets collection of AlarmSummary objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmSummariesAsync">
            <summary>
            Gets collection of AlarmSummary objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmTemplate">
            <summary>
            This class pertains to customizing the values of Alarm properties that are determined at execution time.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplate.Save">
            <summary>
            Create or update the AlarmTemplate object.
            </summary>
            <returns>AlarmTemplate</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplate.Delete">
            <summary>
            Delete this AlarmTemplate object.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplate.Delete(System.Int32)">
            <summary>
            Delete the specified AlarmTemplate object.
            </summary>
            <param name="alarmTemplateId">The TemplateID of the AlarmTemplate object to delete.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmTemplates">
            <summary>
            Gets collection of AlarmTemplate objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplates.Get">
            <summary>
            Get all AlarmTemplates
            </summary>
            <returns>AlarmTemplates</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplates.GetByAlarmTemplate(System.Int32)">
            <summary>
            Get AlarmTemplates by TemplateID
            </summary>
            <param name="alarmTemplateId">The TemplateID of the AlarmTemplate to retrieve</param>
            <returns>AlarmTemplates</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplates.GetByRule(System.Int64)">
            <summary>
            Get AlarmTemplates by RuleGroupID
            </summary>
            <param name="ruleGroupId">The RuleID for which to retrieve associated AlarmTemplate objects</param>
            <returns>AlarmTemplates</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplates.GetByRuleType(System.Int32)">
            <summary>
            Get AlarmTemplates by RuleTypeID
            </summary>
            <param name="ruleTypeId">The RuleTypeID for which to retrieve AlarmTemplate objects</param>
            <returns>AlarmTemplates</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Alarms.AlarmTemplates.GetBySourceType(System.Int64)">
            <summary>
            Get AlarmTemplates by SourceTypeID
            </summary>
            <param name="sourceTypeId">The SourceTypeID for which to retrieve AlarmTemplate objects</param>
            <returns>AlarmTemplates</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Alarms.AlarmTemplatesAsync">
            <summary>
            Gets collection of AlarmTemplate objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrence">
            <summary>
            Has methods to publish execution-time custom occurrences.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.ProcessOccurrence(System.String,System.Guid,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair})">
            <summary>
            Processes the occurrence through the rule pipeline without persisting the occurrence.
            </summary>
            <param name="customOccurrenceTypeName"></param>
            <param name="nsObjectID"></param>
            <param name="customOccurrenceXML"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.ProcessOccurrence(System.String,System.Guid,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Processes the occurrence through the rule pipeline without persisting the occurrence.
            </summary>
            <param name="customOccurrenceTypeName"></param>
            <param name="nsObjectID"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.ProcessOccurrence(System.String,System.Guid)">
            <summary>
            Processes the occurrence through the rule pipeline without persisting the occurrence.
            </summary>
            <param name="customOccurrenceTypeName"></param>
            <param name="nsObjectID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.ProcessOccurrence(System.String,System.Guid,System.String,System.String)">
            <summary>
            Processes the occurrence through the rule pipeline without persisting the occurrence.
            </summary>
            <param name="customOccurrenceTypeName"></param>
            <param name="nsObjectID"></param>
            <param name="customOccurrenceDescription"></param>
            <param name="customOccurrenceTypeDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.ProcessOccurrence(System.String,System.String,System.String)">
            <summary>
            Processes the occurrence through the rule pipeline without persisting the occurrence.
            </summary>
            <param name="customOccurrenceTypeName"></param>
            <param name="customOccurrenceDescription"></param>
            <param name="customOccurrenceTypeDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.PublishOccurrence(System.Guid,System.DateTime,System.Int64,System.String,System.String,System.String)">
            <summary>
            Places the occurrence in the custom occurrence pipeline; the occurrence will be persisted.
            </summary>
            <param name="nsObjectID"></param>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeID"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.PublishOccurrence(System.Guid,System.DateTime,System.Int64,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Places the occurrence in the custom occurrence pipeline; the occurrence will be persisted.
            </summary>
            <param name="nsObjectID"></param>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeID"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.PublishOccurrence(System.DateTime,System.Int64,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Places the occurrence in the custom occurrence pipeline; the occurrence will be persisted.
            </summary>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeID"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.PublishOccurrence(System.Guid,System.DateTime,System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Places the occurrence in the custom occurrence pipeline; the occurrence will be persisted.
            </summary>
            <param name="nsObjectID"></param>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeName"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.PublishOccurrence(System.DateTime,System.String,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Places the occurrence in the custom occurrence pipeline; the occurrence will be persisted.
            </summary>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeName"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrence.GetXMLStringFromNameValueStringPairList(System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair})">
            <summary>
            Retrieves a string in XML format.
            </summary>
            <param name="varbinds">A list of NameValueStringPair instances that will be translated into XML format.</param>
            <returns>A string in XML format.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector">
            <summary>
            Facilitates batch processing of execution-time custom occurrence publishing.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector.AddCustomOccurrence(System.Guid,System.DateTime,System.Int64,System.String,System.String,System.String)">
            <summary>
            Adds a custom occurrence into a bucket that can be batch-saved.
            </summary>
            <param name="nsObjectID"></param>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeID"></param>
            <param name="customOccurrenceXML"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector.AddCustomOccurrence(System.Guid,System.DateTime,System.Int64,System.Collections.Generic.List{AiMetrix.BusinessObject.NameValueStringPair},System.String,System.String)">
            <summary>
            Adds a custom occurrence into a bucket that can be batch-saved.
            </summary>
            <param name="nsObjectID"></param>
            <param name="occurrenceTime"></param>
            <param name="customOccurrenceTypeID"></param>
            <param name="customOccurrenceXMLVarbinds"></param>
            <param name="customOccurrenceCause"></param>
            <param name="customOccurrenceDescription"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector.Save">
            <summary>
            Batch-saves custom occurrences that have been added to the CustomOccurrenceCollector's bucket.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector.NSDataReader.Add(System.Object[])">
            <summary>
            Add row to internal list of rows to be read.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceCollector.NSDataReader.Count">
            <summary>
            Number of rows in internal list of rows.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceType">
            <summary>
            This class represents a type of event that can happen, and it has properties describing the type and methods for updating the type.  
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Delete(System.Int64)">
            <summary>
            Deletes a CustomOccurrenceType.
            </summary>
            <param name="customOccurrenceTypeID">The ID of the CustomOccurrenceType to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Save">
            <summary>
            Saves a CustomOccurrenceType (creates the CustomOccurrenceType if it does not exist; otherwise, the CustomOccurrenceType is updated).
            </summary>
            <returns>The saved CustomOccurrenceType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Save(System.Boolean)">
            <summary>
            Saves a CustomOccurrenceType (creates the CustomOccurrenceType if it does not exist; otherwise, the CustomOccurrenceType is updated).
            </summary>
            <param name="ifCreateThenAddRuleToDefaultRuleGroup">When true, then, if the CustomOccurrenceType is created, a Rule is added for it to the Custom Occurrence Default RuleGroup (if said RuleGroup exists).</param>
            <returns>The saved CustomOccurrenceType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Rename(System.Int64,System.String)">
            <summary>
            Renames a CustomOccurrenceType.  Note that duplicate CustomOccurrenceType names are disallowed.
            </summary>
            <param name="customOccurrenceTypeID">The ID of the CustomOccurrenceType to rename.</param>
            <param name="name">The new name for the CustomOccurrenceType.</param>
            <returns>The saved CustomOccurrenceType.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceType.HasRule">
            <summary>
            Indicates whether there is a Rule for the CustomOccurrenceType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Varbinds">
            <summary>
            Indicates the fields that correspond to execution-time XML published as custom occurrences of the CustomOccurrenceType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceType.Description">
            <summary>
            Descriptive information about the CustomOccurrenceType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceType.CustomOccurrenceTypeName">
            <summary>
            The name of the CustomOccurrenceType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.CustomOccurrenceType.CustomOccurrenceTypeID">
            <summary>
            The ID of the CustomOccurrenceType.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceTypes">
            <summary>
            Has methods to retrieve CustomOccurrenceType instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceTypes.Get">
            <summary>
            Retrieves CustomOccurrenceType instances.
            </summary>
            <returns>The retrieved instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceTypes.Get(System.String)">
            <summary>
            Retrieves CustomOccurrenceType instances.
            </summary>
            <param name="customOccurrenceTypeName">Restricts the set of retrieved instances.</param>
            <returns>The retrieved instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync">
            <summary>
            Has methods to retrieve CustomOccurrenceType instances asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync.BeginGet">
            <summary>
            Retrieves CustomOccurrenceType instances.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync.OnGetResponse">
            <summary>
            Fires when a CustomOccurrenceTypes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="customOccurrenceTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.CustomOccurrenceTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroup">
            <summary>
            Has AssetGroup properties and methods to update AssetGroups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.Save">
            <summary>
            Saves an AssetGroup (creates the AssetGroup if ID is Guid.Empty; otherwise, updates the AssetGroup).
            </summary>
            <returns>The saved AssetGroup.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.SaveWithUniversalAssetGroupIDByName">
            <summary>
            Saves an AssetGroup (creates the AssetGroup if ID is Guid.Empty; otherwise, updates the AssetGroup). If the AssetGroup is created, then its ID is deterministically established by the Name property.
            </summary>
            <returns>The saved AssetGroup.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.PeekUniversalAssetGroupIDByName(System.String)">
            <summary>
            Returns the Guid that would be an AssetGroupID upon a call to SaveWithUniversalAssetGroupIDByName.
            </summary>
            <param name="name">Input for the computation.</param>
            <returns>Guid</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.RemoveIcon">
            <summary>
            Remove custom icon for this AssetGroup
            use default embedded resource
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.RemoveIcon(System.Guid)">
            <summary>
            Remove custom icon for this AssetGroup
            use default embedded resource
            </summary>
            <param name="classificationTypeID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.Delete">
            <summary>
            Deletes an AssetGroup and the AssetGroup's descendant AssetGroups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.Delete(System.Guid)">
            <summary>
            Deletes an AssetGroup and the AssetGroup's descendant AssetGroups.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that will be deleted along with its descendant AssetGroups.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.AddObject(System.Int32,System.Guid)">
            <summary>
            Add object of specified type to assetgroup.
            </summary>
            <param name="containmentTypeId">The ContainmentTypeID of the thing you're adding to the AssetGroup.</param>
            <param name="id">The ID of the thing you're adding to the AssetGroup.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.AddObject(System.Guid,System.Int32,System.Guid)">
            <summary>
            Add object of specified type to specified assetgroup.
            </summary>
            <param name="assetGroupId">assetgroup to contain new object</param>
            <param name="objectContainmentTypeId">object type to be added</param>
            <param name="objectId">object id to be added</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.AddObject(System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Add object of specified type to specified assetgroup.
            </summary>
            <param name="assetGroupId">assetgroup to contain new object</param>
            <param name="objectContainmentTypeId">object type to be added</param>
            <param name="objectId">object id to be added</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.AddNSObjects(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Adds NSObjects to an AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup to which to add the NSObjects.</param>
            <param name="nsObjectIDList">The IDs of the NSObjects to add.</param>
            <returns>Whether the operation was performeed.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.RemoveObject(System.Int32,System.Guid)">
            <summary>
            Remove an object of specified type from asset group
            </summary>
            <param name="containmentTypeId"></param>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.RemoveObject(System.Guid,System.Int32,System.Guid)">
            <summary>
            Remove object of specified type from specified asset group
            </summary>
            <param name="assetGroupId">assetgroup to remove object from</param>
            <param name="objectContainmentTypeId">object type to be removed</param>
            <param name="objectId">object id to be removed</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.RemoveNSObjects(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Removes NSObjects from an AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup from which to remove NSObjects.</param>
            <param name="nsObjectIDList">The NSObjects to remove from the AssetGroup.</param>
            <returns>Whether the operation was performed.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.SaveDualityWithNSObject(System.Guid,System.Guid)">
            <summary>
            Saves AssetGroup/NSObject duality.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group for which duality will be saved.</param>
            <param name="nsObjectID">The ID of the NSObject for which duality will be saved.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroup.ClearDuality(System.Guid)">
            <summary>
            Clears AssetGroup/NSObject duality.
            </summary>
            <param name="assetGroupID">The ID of the Asset Group for which duality will be cleared.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.Groups">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ObjectCount">
            <summary>
            Indicates the number of items in the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ID">
            <summary>
            The ID of the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ApplicationMonitorID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ContainmentTypeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ParentGroupID">
            <summary>
            The parent AssetGroup's ID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ParentContainmentTypeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.Name">
            <summary>
            The name of the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.ScopeType">
            <summary>
            Public, Group, or User.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.IsDynamic">
            <summary>
            True if the AssetGroup has a filter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.FilterID">
            <summary>
            The ID of the AssetGroup's filter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.IconBits">
            <summary>
            Custom icon assigned to this AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.AssetGroupIconID">
            <summary>
            ID corresponding to the AssetGroup's icon.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.CanUserEditAssetGroup">
            <summary>
            Indicates whether the login can edit the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.NSObjectID">
            <summary>
            When the Asset Group has AssetGroup/NSObject duality, this is the corresponding NSObjectID.
            When a thing exhibits both AssetGroup-like and NSObject-like characteristics, it can have AssetGroup/NSObject duality.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.AssetGroupTypeID">
            <summary>
            The ID of the AssetGroupType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroup.AssetGroupTypeDisplayName">
            <summary>
            The name of the AssetGroupType.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroups">
            <summary>
            Has methods to retrieve AssetGroup instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get">
            <summary>
            Get all asset groups, used to populate navigator menu for adding
            items to assetgroup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get(System.Guid)">
            <summary>
            Retrieves an AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup to retrieve.</param>
            <returns>An AssetGroup.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetForAssetGroupIDList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Get assetGroups for a list of assetGroupIds
            </summary>
            <param name="assetGroupIDList"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetEditableOnly(System.Boolean)">
            <summary>
            used in client to populate assetGroupPicker list of 
            asset groups for adding an object to a custom group
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get(System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get(System.Boolean,System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetWithApplicationMonitorData(System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetWithApplicationMonitorData(System.Boolean,System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetTreeAssetGroups(System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>
            <param name="assetGroupID"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get(System.Object)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="sender"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.Get(System.String)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="assetGroupName"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetByNSObjectList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Returns Asset Groups that have one or more NSObject from the parameter list.
            </summary>
            <param name="nsObjectIDList">A list of NSObjectIDs.</param>
            <returns>An AssetGroups instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetChildren(System.Guid)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="assetGroupID"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetChildren(System.Object,System.Guid)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="sender"></param>
            <param name="assetGroupID"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetChildren(System.Guid,System.Int64)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="sender"></param>
            <param name="assetGroupID"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetTreeChildren(System.Guid,System.Int64)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="sender"></param>
            <param name="assetGroupID"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetTopLevelAssetGroups">
            <summary>
            Retrieves AssetGroup instances that do not have parent AssetGroups.
            </summary>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetTopLevelAssetGroups(System.Object)">
            <summary>
            Retrieves AssetGroup instances that do not have parent AssetGroups.
            </summary>
            <param name="sender"></param>
            <returns>A collection of AssetGroup instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetContainerGroups(System.Guid)">
            <summary>
            Retrieves asset groups that contain the asset group with assetGroupID.
            </summary>
            <param name="assetGroupID">The ID of the asset group contained by the retrieved groups.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetByDualityWithNSObject(System.Guid)">
            <summary>
            Retrieves an asset group that has AssetGroup/NSObject duality.
            </summary>
            <param name="nsobjectID">The NSObjectID corresponding to the retrieved Asset Group that has AssetGroup/NSObject duality.</param>
            <returns>AssetGroup</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroups.GetServiceLayoutDetailViewInfo(System.Guid)">
            <summary>
            internal use only
            </summary>
            <param name="assetGroupID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync">
            <summary>
             Has methods to retrieve AssetGroup instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGet(System.Object)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetForAssetGroupIDList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Get assetGroups for a list of assetGroupIds
            </summary>
            <param name="assetGroupIDList"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGet(System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetWithApplicationMonitorData(System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetWithApplicationMonitorData(System.Boolean,System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetTreeAssetGroups(System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>
            <param name="assetGroupID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetTreeAssetGroups(System.Boolean,System.Boolean)">
            <summary>
            Retrieves AssetGroup instances.
            </summary>
            <param name="fillHierarchy">When true, the Groups property of the retrieved AssetGroup instances will be populated with descendant AssetGroups.</param>
            <param name="forceWork">When true, computations are performed during the call to bypass the AssetGroupGet cache.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetTopLevelAssetGroups(System.Object)">
            <summary>
            Retrieves AssetGroup instances that do not have parent AssetGroups.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.BeginGetAssetGroup(System.Guid)">
            <summary>
            Retrieves an AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup to retrieve.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.OnGetResponse">
            <summary>
            Fires when an AssetGroups instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.OnGetAssetGroupResponseDelegate">
            <summary>
            Fires when an AssetGroups instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="sender"></param>
            <param name="assetGroups"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.GetAssetGroupResponseDelegate">
            <summary>
            Delegate for OnGetAssetGroupResponseDelegate.
            </summary>
            <param name="assetGroup"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupContainment">
            <summary>
            Has properties for AssetGroup containment and has a method to save containment.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupContainment.#ctor(System.Guid,System.Nullable{System.Int32},System.Guid)">
            <summary>
            Constructs an AssetGroupContainment instance.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that contains the data.</param>
            <param name="containedTypeID">The ID of type of containment.</param>
            <param name="containedID">The ID of the contained item.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupContainment.Save(System.Guid,System.Int32,System.Guid)">
            <summary>
            Saves an AssetGroupContainment.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that contains the data.</param>
            <param name="containedTypeID">The ID of type of containment.</param>
            <param name="containedID">The ID of the contained item.</param>
            <returns>The AssetGroupContainment instance that was saved.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupContainment.AssetGroupID">
            <summary>
            The ID of the AssetGroup that contains the data.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupContainment.ContainedTypeID">
            <summary>
            The ID of type of containment.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupContainment.ContainedID">
            <summary>
            The ID of the contained item.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupContainments">
            <summary>
            Has methods to retrieve AssetGroupContainment instances and has aggregation information about a retrieved collection of AssetGroupContainment instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupContainments.GetByAssetGroup(System.Guid)">
            <summary>
            Retrieves AssetGroupContainment instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that contains the retrieved data.</param>
            <returns>A collection of AssetGroupContainment instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupContainments.GetByAssetGroup(System.Guid,System.Boolean)">
            <summary>
            Retrieves AssetGroupContainment instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that contains the retrieved data.</param>
            <param name="includeAssetGroupFilter">When true, allows retrieval of containment caused by an AssetGroup filter.</param>
            <returns>A collection of AssetGroupContainment instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupContainments.GetByAssetGroup(System.Guid,System.Byte[])">
            <summary>
            Retrieves AssetGroupContainment instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup that contains the retrieved data.</param>
            <param name="rowVersion">The record-change mark after which data can be retrieved.</param>
            <returns>A collection of AssetGroupContainment instances.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupContainments.MaxRowVersion">
            <summary>
            The largest record-change mark in a retrieved collection of AssetGroupContainment instances.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute">
            <summary>
            Utility for AssetGroup/CustomAttribute values.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.#ctor(System.Guid,System.Int64,System.String)">
            <summary>
            Constructs an AssetGroupCustomAttribute instance.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="customAttributeID">The ID of the CustomAttribute.</param>
            <param name="value">The value for the AssetGroupID/CustomAttributeID pair.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.Save(System.Guid,System.Int64,System.String)">
            <summary>
            Saves an AssetGroupCustomAttribute.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="customAttributeID">The ID of the CustomAttribute.</param>
            <param name="value">The value for the AssetGroupID/CustomAttributeID pair.</param>
            <returns>The AssetGroupCustomAttribute instance that was saved.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.AssetGroupID">
            <summary>
            The ID of the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.CustomAttributeID">
            <summary>
            The ID of the CustomAttribute.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.Value">
            <summary>
            The value for the AssetGroupID/CustomAttributeID pair.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.CustomAttributeName">
            <summary>
            Part of a key to identify the descriptive metadata for the instance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttribute.Category">
            <summary>
            Part of a key to identify the descriptive metadata for the instance.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes">
            <summary>
            Utility for AssetGroup/CustomAttribute values.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes.Get(System.Guid)">
            <summary>
            Retrieves AssetGroupCustomAttribute instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <returns>A collection of AssetGroupCustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes.Get(System.Guid,System.Byte[])">
            <summary>
            Retrieves AssetGroupCustomAttribute instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="rowVersion">The record-change mark after which data can be retrieved.</param>
            <returns>A collection of AssetGroupCustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes.Get(System.Guid,System.Int64)">
            <summary>
            Retrieves an AssetGroupCustomAttribute instance.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="customAttributeID">The ID of the CustomAttribute.</param>
            <returns>An AssetGroupCustomAttribute instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes.Get(System.Guid,System.Int64,System.Byte[])">
            <summary>
            Retrieves an AssetGroupCustomAttribute instance.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="customAttributeID">The ID of the CustomAttribute.</param>
            <param name="rowVersion">The record-change mark after which data can be retrieved.</param>
            <returns>An AssetGroupCustomAttribute instance.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupCustomAttributes.MaxRowVersion">
            <summary>
            The largest record-change mark in a retrieved collection of AssetGroupCustomAttribute instances.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupType">
            <summary>
            Utility for AssetGroupType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupType.AssetGroupTypeID">
            <summary>
            The ID of the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupType.AssetGroupTypeNameKey">
            <summary>
            The string used to generate the unique identifier for this object.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.AssetGroupType.AssetGroupTypeDisplayName">
            <summary>
            The text that is displayed for this asset group type.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.AssetGroupTypes">
            <summary>
            AssetGroupTypes
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupTypes.Get">
            <summary>
            Retrieves AssetGroupType instances.
            </summary>
            <returns>A collection of AssetGroupType instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupTypes.Get(System.Int64)">
            <summary>
            Retrieves a specific AssetGroupType instance.
            </summary>
            <param name="assetGroupTypeID">The ID of the AssetGroupType.</param>
            <returns>An AssetGroupType instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.AssetGroupTypes.Get(System.String)">
            <summary>
            Retrieves a specific AssetGroupType instance.
            </summary>
            <param name="assetGroupTypeNameKey">The string representation of AssetGroupTypeID. NOTE: this value is case sensitive!</param>
            <returns>An AssetGroupType instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ServiceLayoutDetailViewInfo">
            <summary>
            internal use only
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.BandwidthListVueItem._NSObjectID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.BandwidthListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.BandwidthListVueItem,AiMetrix.BusinessObject.Inventory.BandwidthListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.BandwidthListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.BandwidthListVueItem,AiMetrix.BusinessObject.Inventory.BandwidthListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.BandwidthListVueItems">
            <summary>
            Gets collection of BandwidthListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.BandwidthListVueItemsAsync">
            <summary>
            Gets collection of BandwidthListVue objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestor">
            <summary>
            Specialized business object used by Inventory tree and graph for displaying objects
            and the properties that are of specific interest to gui user.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestor.DisplayName">
            <summary>
            The DisplayName field from NSObject table DisplayName
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestor.ObjectType">
            <summary> 
            NSObject, Subnet, Link, Containment, etc.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestor.ClassificationTypeID">
            <summary>
            Used to determine the correct Icon for display
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestors">
            <summary>
            Gets collection of NSObjectAncestorItems objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestors.Get(System.Guid)">
            <summary>
            Get all Ancestors of this object
            </summary>
            <param name="nsObjectID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObjectAncestorsAsync">
            <summary>
            Gets collection of InventoryObjectAncestors asychronously.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.LinkListVueItem._linkID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LinkListVueItems">
            <summary>
            Gets collection of LinkListVueItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LinkListVueItemsAsync">
            <summary>
            Gets collection of InventoryListVue objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LogicalDiskStatistics">
            <summary>
            Gets collection of LogicalDiskStatistics objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LogicalDiskStatisticsAsync">
            <summary>
            Gets collection of LogicalDiskStatistic objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectContainment.AddObject(System.Int32,System.Guid,System.Int32,System.Guid)">
            <summary>
            Add object of specified type to specified container.
            </summary>
            <param name="containerTypeID">container type</param>
            <param name="containerID">container id</param>
            <param name="objectContainmentTypeID">object type to be added</param>
            <param name="objectID">object id to be added</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectContainment.AddObject(System.Int32,System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Add object of specified type to specified container.
            </summary>
            <param name="containerTypeID">container type</param>
            <param name="containerID">container id</param>
            <param name="objectContainmentTypeID">object type to be added</param>
            <param name="objectID">object id to be added</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectContainment.RemoveObject(System.Int32,System.Guid,System.Int32,System.Guid)">
            <summary>
            Remove object of specified type from specified container.
            </summary>
            <param name="containerTypeID">container type</param>
            <param name="containerID">container id</param>
            <param name="objectContainmentTypeID">object type to be removed</param>
            <param name="objectID">object id to be removed</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectCorrelation.Update(System.String)">
            <summary>
            Update the correlationValue for an existing NSObjectCorrelation
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectCorrelation.Save">
            <summary>
            Create new NSObjectCorrelation
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectCorrelations">
            <summary>
            
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectCorrelations.Get">
            <summary>
            Get all NSObjectCorrelations
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectCorrelationsAsync">
            <summary>
            Gets collection of NSObjectCorrelations objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetAncestor">
            <summary>
            Specialized business object used by Inventory tree and graph for displaying objects
            and the properties that are of specific interest to gui user.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SubnetAncestor.Name">
            <summary>
            The DisplayName field from NSObject table DisplayName
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetAncestors">
            <summary>
            Gets collection of NSObjectAncestorItems objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SubnetAncestors.Get(System.Guid)">
            <summary>
            Get all Ancestors of this object
            </summary>
            <param name="nsObjectID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetAncestorsAsync">
            <summary>
            Gets collection of SubnetAncestors asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetListVueItems">
            <summary>
            Gets collection of SubnetListVueItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetListVueItemsAsync">
            <summary>
            Gets collection of InventoryListVue objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.InterDVGateway.GetRemoteProxyObject(System.String,System.String,System.String,System.String)">
            <summary>
            Gets proxy instance of class on the remote machine.  When call methods on remote proxy object, methods executes on remote machine, otherwise methods executes on local machine.
            WindowsDomain, windowsUser and windowsPassword is Windows account used to access IIS virtual directory.  If IIS virtual directory allows Anonymous Access, can leave blank.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.InterDVGateway.GetData(System.String,System.String,AiMetrix.BusinessObject.Misc.InterDVGateway.DataCategory,System.Object[])">
            <summary>
            Gets data for the category specified.  Gets data from remote data store when called on remote proxy object, otherwise gets data from local data store.
            DopplerUser and dopplerPassword is dopplerVue account used to access remote dopplerVue data store.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.InterDVGateway.DataCategory">
            <summary>
            Categories of data that can be retrieved.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification">
            <summary>
            Part of a data storage mechanism for CEP Service plugin information.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.Save(System.Int64,System.String,System.String)">
            <summary>
            Saves a specification.
            </summary>
            <param name="cepServicePluginID">The ID for the CEP Service plugin.</param>
            <param name="pluginSpecificationKey">The key for a specification for the CEP Service plugin.</param>
            <param name="pluginSpecificationValue">The value corresponding to the key for a specification for the CEP Service plugin.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.Delete(System.Int64)">
            <summary>
            Deletes all specifications for the plugin.
            </summary>
            <param name="cepServicePluginID">The ID for the CEP Service plugin.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.Delete(System.Int64,System.String)">
            <summary>
            Deletes a specification for the plugin.
            </summary>
            <param name="cepServicePluginID">The ID for the CEP Service plugin.</param>
            <param name="pluginSpecificationKey">The key for a specification for the CEP Service plugin.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.CEPServicePluginID">
            <summary>
            The ID for the CEP Service plugin.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.PluginSpecificationKey">
            <summary>
            The key for a specification for the CEP Service plugin.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecification.PluginSpecificationValue">
            <summary>
            The value corresponding to the key for a specification for the CEP Service plugin.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecifications">
            <summary>
            Part of a data storage mechanism for CEP Service plugin information.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.CEPServicePluginSpecifications.Get(System.Int64,System.String)">
            <summary>
            Retrieves a particular specification for a plugin.
            </summary>
            <param name="cepServicePluginID">The ID for the CEP Service plugin.</param>
            <param name="pluginSpecificationKey">The key for a specification for the CEP Service plugin.</param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin">
            <summary>
            The class from which to inherit when writing a CEP Service plugin.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin.Launch(System.Object)">
            <summary>
            Called by the CEP Service Engine after it activates the plugin.
            </summary>
            <param name="o">ignore</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin.DequeueMeasurementPayload">
            <summary>
            For an activated instance, this dequeues from the instance's Measurement queue.
            </summary>
            <returns>A MeasurementPayload instance if the instance's Measurement queue has data; otherwise, null.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin.DequeueMeasurementPayloadBatch(System.Int32)">
            <summary>
            For an activated instance, this dequeues from the instance's Measurement queue.
            </summary>
            <param name="maxNumberToDequeue">Limits the number of items that will be dequeued.</param>
            <returns>A List of MeasurementPayload instances. It will be empty if the instance's Measurement queue does not have data.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin.DequeueAlarmTableQueue">
            <summary>
            For an activated instance, this dequeues from the instance's Alarm delta queue.
            </summary>
            <returns>A ConcurrentQueue of AlarmTable instances if the instance's Alarm delta queue has data; otherwise, null.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Analytics.NSCEPServicePlugin.GetPluginTypeAbbreviation(System.String)">
            <summary>
            For use in special cases of status channel message publication.
            </summary>
            <param name="pluginType">This should be the FullyQualifiedTypename field of the corresponding entry in the CEPServicePlugin table.</param>
            <returns>The substring of pluginType that is after the last "."</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType">
            <summary>
            A utility for custom relationships to Classificaiton Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType.Save(System.String,System.String,System.Int32)">
            <summary>
            Maps customMappingCategory/customMappingID to classificationTypeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type identified by customMappingCategory/customMappingID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType.Delete(System.String,System.String)">
            <summary>
            Deletes a custom relationship to a Classification Type.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType.CustomMappingCategory">
            <summary>
            The category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType.CustomMappingID">
            <summary>
            The id within the category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationType.ClassificationTypeID">
            <summary>
            The id of the Classification Type identified by CustomMappingCategory/CustomMappingID.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypes">
            <summary>
            A utility for custom relationships to Classificaiton Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypes.Get">
            <summary>
            Retrieves all mappings from customMappingCategory/customMappingID combos to Classification Types.
            </summary>
            <returns>Mappings from customMappingCategory/customMappingID combos to Classification Types.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypes.Get(System.String,System.String)">
            <summary>
            Retrieves a mapping from customMappingCategory/customMappingID to a Classification Type.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <returns>A mapping from customMappingCategory/customMappingID to a Classification Type.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypes.Get(System.String)">
            <summary>
            Retrieves mappings based on customMappingCategory.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <returns>A CustomMappingClassificationTypes instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute">
            <summary>
            A utility for custom relationships involving Classification Types and Custom Attributes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.Save(System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Maps customMappingCategory/customMappingID/classificationTypeID to customAttributeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <param name="customAttributeID">The id of the Custom Attribute meta-data identified by customMappingCategory/customMappingID/classificationTypeID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the mapping defined by customMappingCategory/customMappingID/classificationTypeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.CustomMappingCategory">
            <summary>
            The category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.CustomMappingID">
            <summary>
            The id within the category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.ClassificationTypeID">
            <summary>
            The id of the Classification Type for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttribute.CustomAttributeID">
            <summary>
            The ID of the Custom Attribute meta-data.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttributes">
            <summary>
            A utility for custom relationships involving Classification Types and Custom Attributes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttributes.Get">
            <summary>
            Retrieves all custom relationships involving Classification Types and Custom Attributes.
            </summary>
            <returns>Custom relationships involving Classification Types and Custom Attributes.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttributes.Get(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a custom relationship involving a Classification Type and a Custom Attribute.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <returns>A custom relationship involving a Classification Type and a Custom Attribute.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeCustomAttributes.Get(System.Int32)">
            <summary>
            Retrieves all the custom relationships with Custom Attributes for a Classification Type.
            </summary>
            <param name="classificationTypeID">The id of the Classification Type on which to filter.</param>
            <returns>All the custom relationships with Custom Attributes for a Classification Type.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric">
            <summary>
            A utility for custom relationships involving Classification Types and Metrics.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.Save(System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Maps customMappingCategory/customMappingID/classificationTypeID to metricID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <param name="metricID">The id of the Custom Attribute meta-data identified by customMappingCategory/customMappingID/classificationTypeID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the mapping defined by customMappingCategory/customMappingID/classificationTypeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.CustomMappingCategory">
            <summary>
            The category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.CustomMappingID">
            <summary>
            The id within the category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.ClassificationTypeID">
            <summary>
            The id of the Classification Type for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetric.MetricID">
            <summary>
            The ID of the metric meta-data.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetrics">
            <summary>
            A utility for custom relationships involving Classification Types and Metrics.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetrics.Get">
            <summary>
            Retrieves all custom relationships involving Classification Types and Metrics.
            </summary>
            <returns>Custom relationships involving Classification Types and Metrics.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetrics.Get(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a custom relationship involving a Classification Type and a Metric.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <returns>A custom relationship involving a Classification Type and a Metric.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeMetrics.Get(System.Int32)">
            <summary>
            Retrieves all the custom relationships with Metrics for a Classification Type.
            </summary>
            <param name="classificationTypeID">The id of the Classification Type on which to filter.</param>
            <returns>All the custom relationships with Metrics for a Classification Type.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType">
            <summary>
            A utility for custom relationships involving Classification Types and StateTypes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.Save(System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Maps customMappingCategory/customMappingID/classificationTypeID to stateTypeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <param name="stateTypeID">The id of the Custom Attribute meta-data identified by customMappingCategory/customMappingID/classificationTypeID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the mapping defined by customMappingCategory/customMappingID/classificationTypeID.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.CustomMappingCategory">
            <summary>
            The category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.CustomMappingID">
            <summary>
            The id within the category for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.ClassificationTypeID">
            <summary>
            The id of the Classification Type for the mapping.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateType.StateTypeID">
            <summary>
            The ID of the StateType meta-data.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateTypes">
            <summary>
            A utility for custom relationships involving Classification Types and StateTypes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateTypes.Get">
            <summary>
            Retrieves all custom relationships involving Classification Types and StateTypes.
            </summary>
            <returns>Custom relationships involving Classification Types and StateTypes.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateTypes.Get(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a custom relationship involving a Classification Type and a StateType.
            </summary>
            <param name="customMappingCategory">The category for the mapping.</param>
            <param name="customMappingID">The id within the category for the mapping.</param>
            <param name="classificationTypeID">The id of the Classification Type for the mapping.</param>
            <returns>A custom relationship involving a Classification Type and a StateType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.CustomMappingClassificationTypeStateTypes.Get(System.Int32)">
            <summary>
            Retrieves all the custom relationships with State Types for a Classification Type.
            </summary>
            <param name="classificationTypeID">The id of the Classification Type on which to filter.</param>
            <returns>All the custom relationships with State Types for a Classification Type.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateType">
            <summary>
            A utility for State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateType.Save(System.String)">
            <summary>
            Saves a State Type.  If one already exists with the given descriptor, then a new one is not created.
            </summary>
            <param name="stateTypeDescriptor">The descriptor of the State Type to be saved.</param>
            <returns>The StateTypeID that was created or the StateTypeID corresponding to the extant State Type having the supplied descriptor.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateType.Save">
            <summary>
            Saves a State Type.  If one already exists with the given descriptor, then a new one is not created.
            </summary>
            <param name="stateTypeDescriptor">The descriptor of the State Type to be saved.</param>
            <returns>The StateTypeID that was created or the StateTypeID corresponding to the extant State Type having the supplied descriptor.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateType.Delete(System.Int64)">
            <summary>
            Deletes a State Type.
            </summary>
            <param name="stateTypeID">The ID of the State Type to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateType.UpdateDescriptor(System.Int64,System.String)">
            <summary>
            Updates the descriptor for a State Type.
            </summary>
            <param name="stateTypeID">The ID of the State Type to update.</param>
            <param name="newStateTypeDescriptor">The new descriptor for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateType.ToString">
            <summary>
            Returns the descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateType.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateType.StateTypeDescriptor">
            <summary>
            The descriptor for the State Type.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypes">
            <summary>
            A utility for State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypes.Get">
            <summary>
            Retrieves all the State Types.
            </summary>
            <returns>State Types.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypes.Get(System.Int64)">
            <summary>
            Retrieves a State Type.
            </summary>
            <param name="stateTypeID">The ID of the State Type to retrieve.</param>
            <returns>A State Type.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypes.Get(System.String)">
            <summary>
            Retrieves all the State Types having the given descriptor; typically, there should be only one match.
            </summary>
            <param name="stateTypeDescriptor">The descriptor on which to filter.</param>
            <returns>State Types.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypes.Get(System.Guid)">
            <summary>
            Retrieves all the State Types having a value for the given NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <returns>State Types.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypes.GetByAssetGroup(System.Guid)">
            <summary>
            Retrieves all the State Types having a value for the given AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <returns>State Types.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypesAsync">
            <summary>
            A utility for State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypesAsync.BeginGet">
            <summary>
            Asynchronously retrieves all the State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypesAsync.BeginGetByStateTypeID(System.Int64)">
            <summary>
            Asynchronously retrieves a State Type.
            </summary>
            <param name="stateTypeID">The ID of the State Type to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypesAsync.BeginGetByStateTypeDescriptor(System.String)">
            <summary>
            Asynchronously retrieves all the State Types having the given descriptor; typically, there should be only one match.
            </summary>
            <param name="stateTypeDescriptor">The descriptor on which to filter.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypesAsync.BeginGetByNSObjectID(System.Guid)">
            <summary>
            Asynchronously retrieves all the State Types having a value for the given NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypesAsync.BeginGetByAssetGroupID(System.Guid)">
            <summary>
            Asynchronously retrieves all the State Types having a value for the given AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypesAsync.OnGetResponse">
            <summary>
            Fires when a StateTypes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeNSObject">
            <summary>
            A utility for associations between State Types and NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.Save(System.Guid,System.Int64,System.String,System.String)">
            <summary>
            Saves information about a State Type NSObject association; if the State Type NSObject association does not already exist, it gets created.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The value for the association.</param>
            <param name="stateTypeValueNSObjectToolTip">The tooltip for the association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.SaveValue(System.Guid,System.Int64,System.String)">
            <summary>
            Saves information about a State Type NSObject association; if the State Type NSObject association does not already exist, it gets created.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The value for the association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.SaveTooltip(System.Guid,System.Int64,System.String)">
            <summary>
            Saves information about a State Type NSObject association; if the State Type NSObject association does not already exist, it gets created.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueNSObjectToolTip">The tooltip for the association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.Delete(System.Guid,System.Int64)">
            <summary>
            Deletes a State Type NSObject association.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.Delete(System.Int64)">
            <summary>
            Deletes all State Type NSObject associations for a State Type.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObject.Delete(System.Guid)">
            <summary>
            Deletes all State Type NSObject associations for a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.NSObjectID">
            <summary>
            The ID for the NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.NSObjectDisplayName">
            <summary>
            The Display for the NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.StateTypeValueID">
            <summary>
            The ID for the value for the State Type for the NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.StateTypeValueNSObjectToolTip">
            <summary>
            Tooltip for the instance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.StateTypeValueDescriptor">
            <summary>
            The descriptor corresponding to StateTypeValueID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.StateTypeDescriptor">
            <summary>
            The descriptor corresponding to StateTypeID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.LastUpdateTime">
            <summary>
            The last time the association was updated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeNSObject.Color">
            <summary>
            A RGB value associated with the State Type NSObject association.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeNSObjects">
            <summary>
            A utility for associations between State Types and NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjects.Get(System.Guid,System.Int64)">
            <summary>
            Retrieves a State Type NSObject association.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeID">The ID of the State Typ.</param>
            <returns>A State Type NSObject association.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjects.Get(System.Guid)">
            <summary>
            Retrieves State Type NSObject associations.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <returns>State Type NSObject associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjects.Get(System.Int64)">
            <summary>
            Retrieves State Type NSObject associations.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <returns>State Type NSObject associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjects.Get(System.Guid,System.Collections.Generic.List{System.Int64})">
            <summary>
            Retrieves State Type NSObject associations.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="stateTypeIDList">Filter for the State Types.</param>
            <returns>State Type NSObject associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjects.Get(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves State Type NSObject associations.
            </summary>
            <param name="stateTypeID">The ID of the StateType.</param>
            <param name="nsObjectIDList">Filter for the Objects.</param>
            <returns>State Type NSObject associations.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync">
            <summary>
            A utility for associations between State Types and NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.BeginGetByNSObjectID(System.Guid)">
            <summary>
            Asynchronously retrieves information about associations among NSObjects and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.BeginGetByNSObjectIDStateTypeID(System.Guid,System.Int64)">
            <summary>
            Asynchronously retrieves a StateTypeNSObject instance.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the retrieved State Type NSObject association.</param>
            <param name="stateTypeID">The ID of the State Type for the retrieved State Type NSObject association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.BeginGetByNSObjectIDStateTypeIDList(System.Guid,System.Collections.Generic.List{System.Int64})">
            <summary>
            Asynchronously retrieves StateTypeNSObject instances.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the retrieved State Type NSObject association.</param>
            <param name="stateTypeIDList">Specifies the filter for the State Types.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.BeginGetByStateTypeIDNSObjectIDList(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Asynchronously retrieves StateTypeNSObject instances.
            </summary>
            <param name="nsObjectID">The ID of the NSObject for the retrieved State Type NSObject association.</param>
            <param name="stateTypeIDList">Specifies the filter for the State Types.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeNSObjects instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeNSObjectsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValue">
            <summary>
            A utility for information about potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.Save(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            Saves information about a potential value of a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="stateTypeValueDescriptor">The descriptor corresponding to stateTypeValueID.</param>
            <param name="color">A RGB value associated with the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.SaveDescriptor(System.Int64,System.String,System.String)">
            <summary>
            Saves descriptor information about a potential value of a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="stateTypeValueDescriptor">The descriptor corresponding to stateTypeValueID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.SaveColor(System.Int64,System.String,System.Int32)">
            <summary>
            Saves color information about a potential value of a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="color">A RGB value associated with the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.SaveColor(System.Int64,System.String,System.Nullable{System.Int32})">
            <summary>
            Saves color information about a potential value of a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="color">A RGB value associated with the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.Delete(System.Int64,System.String)">
            <summary>
            Removes the "known potential value for" status of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValue.Delete(System.Int64)">
            <summary>
            Removes the "known potential value for" status of all State Type Values for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValue.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValue.StateTypeValueID">
            <summary>
            The ID for a potential value for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValue.StateTypeValueDescriptor">
            <summary>
            The descriptor corresponding to StateTypeValueID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValue.Color">
            <summary>
            A RGB value associated with the State Type Value.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValues">
            <summary>
            A utility for information about potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValues.Get(System.Int64,System.String)">
            <summary>
            Retrieves information about a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <returns>A StateTypeValue instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValues.Get(System.Int64)">
            <summary>
            Retrieves information about potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>StateTypeValue instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValuesAsync">
            <summary>
            A utility for information about potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.BeginGetByStateTypeIDStateTypeValueID(System.Int64,System.String)">
            <summary>
            Asynchronously retrieves information about a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.BeginGetByStateTypeID(System.Int64)">
            <summary>
            Asynchronously retrieves information about potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.BeginGet">
            <summary>
            Asynchronously retrieves information about potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeValues instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValuesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType">
            <summary>
            A utility for information about associations among Classification Types and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.Save(System.Int64,System.String,System.Int32)">
            <summary>
            Saves an association of a Classification Type and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="classificationTypeID">The ID of the Classification Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.SaveColor(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            Associates a color with an association between a Classification Type and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="classificationTypeID">The ID of the Classification Type.</param>
            <param name="color">A RGB value associated with the association of the Classification Type and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.SaveColor(System.Int64,System.String,System.Collections.Generic.List{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Associates a color with an association between a Classification Type and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="classificationTypeID">The ID of the ClassificationType.</param>
            <param name="color">A RGB value associated with the association of the ClassificationType and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.Delete(System.Int64,System.String,System.Int32)">
            <summary>
            Removes a Classification Type association of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="classificationTypeID">The ID of the Classification Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.Delete(System.Int64,System.String)">
            <summary>
            Removes all Classification Type associations of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.Delete(System.Int64)">
            <summary>
            Removes all Classification Type associations of all State Type Values for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.StateTypeValueID">
            <summary>
            The ID for a potential value for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.ClassificationTypeID">
            <summary>
            The ID for a Classification Type associated with a potential value of a State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueClassificationType.Color">
            <summary>
            A RGB value associated with the association between the Classification Type and State Type Value.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypes">
            <summary>
            A utility for information about associations among Classification Types and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypes.Get(System.Int64,System.String,System.Int32)">
            <summary>
            Retrieves information about an association between a Classification Type and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="classificationTypeID">The ID for a Classification Type.</param>
            <returns>A StateTypeValueClassificationType instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypes.Get(System.Int64,System.String)">
            <summary>
            Retrieves information about associations among Classification Types and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <returns>A StateTypeValueClassificationTypes instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypes.Get(System.Int64,System.Int32)">
            <summary>
            Retrieves information about associations among a Classification Type and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="classificationTypeID">The ID for a Classification Type.</param>
            <returns>A StateTypeValueClassificationTypes instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypes.Get(System.Int64)">
            <summary>
            Retrieves information about associations among Classification Types and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>A StateTypeValueClassificationTypes instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync">
            <summary>
            A utility for information about associations among Classification Types and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.BeginGetByStateTypeIDStateTypeValueIDClassificationTypeID(System.Int64,System.String,System.Int32)">
            <summary>
            Asynchronously retrieves information about an association between a Classification Type and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
            <param name="classificationTypeID">The ID for a Classification Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.BeginGetByStateTypeID(System.Int64)">
            <summary>
            Asynchronously retrieves information about associations among Classification Types and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.BeginGetByStateTypeIDStateTypeValueID(System.Int64,System.String)">
            <summary>
            Asynchronously retrieves information about associations among Classification Types and a potential value for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.BeginGetByStateTypeIDClassificationTypeID(System.Int64,System.Int32)">
            <summary>
            Asynchronously retrieves information about associations among a Classification Type and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="classificationTypeID">The ID for a Classification Type.</param>        
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeValueClassificationTypes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueClassificationTypesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueNSObject">
            <summary>
            A utility for information about associations among NSObjects and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.Save(System.Int64,System.String,System.Guid)">
            <summary>
            Saves an association of a NSObject and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="nsObjectID">The ID of the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.SaveColor(System.Int64,System.String,System.Guid,System.Int32)">
            <summary>
            Associates a color with an association between a NSObject and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="color">A RGB value associated with the association of the NSObject and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.SaveColor(System.Int64,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32})">
            <summary>
            Associates a color with an association between a NSObject and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="color">A RGB value associated with the association of the NSObject and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.Delete(System.Int64,System.String,System.Guid)">
            <summary>
            Removes a NSObject association of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="nsObjectID">The ID of the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.Delete(System.Int64,System.String)">
            <summary>
            Removes all NSObject associations of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.Delete(System.Int64)">
            <summary>
            Removes all NSObject associations of all State Type Values for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.StateTypeValueID">
            <summary>
            The ID for a potential value for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.NSObjectID">
            <summary>
            The ID for a NSObject associated with a potential value of a State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueNSObject.Color">
            <summary>
            A RGB value associated with the association between the NSObject and State Type Value.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueNSObjects">
            <summary>
            A utility for information about associations among NSObjects and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjects.Get(System.Int64,System.String,System.Guid)">
            <summary>
            Retrieves information about an association between a NSObject and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="nsObjectID">The ID for a NSObject.</param>
            <returns>A StateTypeValueNSObject instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjects.Get(System.Int64,System.String)">
            <summary>
            Retrieves information about associations among NSObjects and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <returns>A StateTypeValueNSObjects instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjects.Get(System.Int64,System.Guid)">
            <summary>
            Retrieves information about associations among a NSObject and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="nsObjectID">The ID for a NSObject.</param>
            <returns>A StateTypeValueNSObjects instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjects.Get(System.Int64)">
            <summary>
            Retrieves information about associations among NSObjects and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>A StateTypeValueNSObjects instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync">
            <summary>
            A utility for information about associations among NSObjects and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.BeginGetByStateTypeIDStateTypeValueIDNSObjectID(System.Int64,System.String,System.Guid)">
            <summary>
            Asynchronously retrieves information about an association between a NSObject and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
            <param name="nsObjectID">The ID for a NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.BeginGetByStateTypeID(System.Int64)">
            <summary>
            Asynchronously retrieves information about associations among NSObjects and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.BeginGetByStateTypeIDStateTypeValueID(System.Int64,System.String)">
            <summary>
            Asynchronously retrieves information about associations among NSObjects and a potential value for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.BeginGetByStateTypeIDNSObjectID(System.Int64,System.Guid)">
            <summary>
            Asynchronously retrieves information about associations among a NSObject and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="nsObjectID">The ID for a NSObject.</param>        
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeValueNSObjects instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueNSObjectsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeAssetGroup">
            <summary>
            A utility for associations between State Types and AssetGroups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.Save(System.Guid,System.Int64,System.String)">
            <summary>
            Saves information about a State Type AssetGroup association; if the State Type AssetGroup association does not already exist, it gets created.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The value for the association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.Save(System.Guid,System.Int64,System.String,System.String)">
            <summary>
            Saves information about a State Type AssetGroup association; if the State Type AssetGroup association does not already exist, it gets created.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The value for the association.</param>
            <param name="stateTypeValueAssetGroupToolTip">The tooltip for the association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.Delete(System.Guid,System.Int64)">
            <summary>
            Deletes a State Type AssetGroup association.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.Delete(System.Guid)">
            <summary>
            Deletes all State Type AssetGroup associations for a AssetGroup.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.AssetGroupID">
            <summary>
            The ID for the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.StateTypeValueID">
            <summary>
            The ID for the value for the State Type for the AssetGroup.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.StateTypeValueDescriptor">
            <summary>
            The descriptor corresponding to StateTypeValueID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.StateTypeValueAssetGroupToolTip">
            <summary>
            Tooltip for the instance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.StateTypeDescriptor">
            <summary>
            The descriptor corresponding to StateTypeID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.LastUpdateTime">
            <summary>
            The last time the association was updated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeAssetGroup.Color">
            <summary>
            A RGB value associated with the State Type AssetGroup association.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeAssetGroups">
            <summary>
            A utility for associations between State Types and AssetGroups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroups.Get(System.Guid,System.Int64)">
            <summary>
            Retrieves a State Type AssetGroup association.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="stateTypeID">The ID of the State Type.</param>
            <returns>A State Type AssetGroup association.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroups.Get(System.Guid)">
            <summary>
            Retrieves State Type AssetGroup associations.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <returns>State Type AssetGroup associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroups.Get(System.Int64)">
            <summary>
            Retrieves State Type AssetGroup associations.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <returns>State Type AssetGroup associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroups.Get(System.Guid,System.Collections.Generic.List{System.Int64})">
            <summary>
            Retrieves State Type AssetGroup associations.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="stateTypeIDList">Filter for the State Types.</param>
            <returns>State Type AssetGroup associations.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroups.Get(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves State Type AssetGroup associations.
            </summary>
            <param name="stateTypeID">The ID of the StateType.</param>
            <param name="assetGroupIDList">Filter for the AssetGroups.</param>
            <returns>State Type AssetGroup associations.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync">
            <summary>
            A utility for associations between State Types and AssetGroups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.BeginGetByAssetGroupID(System.Guid)">
            <summary>
            Asynchronously retrieves information about associations among AssetGroups and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.BeginGetByAssetGroupIDStateTypeID(System.Guid,System.Int64)">
            <summary>
            Asynchronously retrieves a StateTypeAssetGroup instance.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup for the retrieved State Type AssetGroup association.</param>
            <param name="stateTypeID">The ID of the State Type for the retrieved State Type AssetGroup association.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.BeginGetByAssetGroupIDStateTypeIDList(System.Guid,System.Collections.Generic.List{System.Int64})">
            <summary>
            Asynchronously retrieves StateTypeAssetGroup instances.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup for the retrieved State Type AssetGroup association.</param>
            <param name="stateTypeIDList">Specifies the filter for the State Types.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.BeginGetByStateTypeIDAssetGroupIDList(System.Int64,System.Collections.Generic.List{System.Guid})">
            <summary>
            Asynchronously retrieves StateTypeAssetGroup instances.
            </summary>
            <param name="nsObjectID">The ID of the AssetGroup for the retrieved State Type AssetGroup association.</param>
            <param name="stateTypeIDList">Specifies the filter for the State Types.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeAssetGroups instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeAssetGroupsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup">
            <summary>
            A utility for information about associations among AssetGroups and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.Save(System.Int64,System.String,System.Guid)">
            <summary>
            Saves an association of a AssetGroup and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.SaveColor(System.Int64,System.String,System.Guid,System.Int32)">
            <summary>
            Associates a color with an association between a NSObject and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
            <param name="color">A RGB value associated with the association of the AssetGroup and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.SaveColor(System.Int64,System.String,System.Collections.Generic.List{System.Guid},System.Nullable{System.Int32})">
            <summary>
            Associates a color with an association between a AssetGroup and State Type Value.
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="assetGroupIDs">The IDs of the AssetGroups.</param>
            <param name="color">A RGB value associated with the association of the AssetGroup and the State Type Value.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.Delete(System.Int64,System.String,System.Guid)">
            <summary>
            Removes a AssetGroup association of a State Type Value for a State Type. 
            </summary>
            <param name="stateTypeID">The ID of the State Type.</param>
            <param name="stateTypeValueID">The ID of the potential value for the State Type.</param>
            <param name="assetGroupID">The ID of the AssetGroup.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.StateTypeID">
            <summary>
            The ID for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.StateTypeValueID">
            <summary>
            The ID for a potential value for the State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.AssetGroupID">
            <summary>
            The ID for a AssetGroup associated with a potential value of a State Type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroup.Color">
            <summary>
            A RGB value associated with the association between the AssetGroup and State Type Value.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroups">
            <summary>
            A utility for information about associations among AssetGroups and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroups.Get(System.Int64,System.String,System.Guid)">
            <summary>
            Retrieves information about an association between a AssetGroup and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <param name="assetGroupID">The ID for a AssetGroup.</param>
            <returns>A StateTypeValueAssetGroup instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroups.Get(System.Int64,System.String)">
            <summary>
            Retrieves information about associations among AssetGroups and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>
            <returns>A StateTypeValueAssetGroups instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroups.Get(System.Int64,System.Guid)">
            <summary>
            Retrieves information about associations among a AssetGroup and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="assetGroupID">The ID for a AssetGroup.</param>
            <returns>A StateTypeValueAssetGroups instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroups.Get(System.Int64)">
            <summary>
            Retrieves information about associations among AssetGroups and potential values for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <returns>A StateTypeValueAssetGroups instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync">
            <summary>
            A utility for information about associations among AssetGroups and potential values of State Types.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.BeginGetByStateTypeIDStateTypeValueIDAssetGroupID(System.Int64,System.String,System.Guid)">
            <summary>
            Asynchronously retrieves information about an association between a AssetGroup and a potential value for a State Type.
            </summary>
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
            <param name="assetGroupID">The ID for a AssetGroup.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.BeginGetByStateTypeID(System.Int64)">
            <summary>
            Asynchronously retrieves information about associations among AssetGroups and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.BeginGetByStateTypeIDStateTypeValueID(System.Int64,System.String)">
            <summary>
            Asynchronously retrieves information about associations among AssetGroups and a potential value for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="stateTypeValueID">The ID for a potential value for the State Type.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.BeginGetByStateTypeIDAssetGroupID(System.Int64,System.Guid)">
            <summary>
            Asynchronously retrieves information about associations among a AssetGroup and potential values for a State Type.
            </summary>        
            <param name="stateTypeID">The ID for the State Type.</param>
            <param name="assetGroupID">The ID for a AssetGroup.</param>        
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.OnGetResponse">
            <summary>
            Fires when a StateTypeValueAssetGroups instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="stateTypes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.StateTypeValueAssetGroupsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Customer">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customer.Create(System.String,System.String,AiMetrix.BusinessObject.Enums.CustomerPriority)">
            <summary>
            Creates a Customer.
            </summary>
            <param name="customerDisplayName">The display name of the Customer.</param>
            <param name="customerPhone">Customer phone number.</param>
            <param name="customerPriorityID">Specifies priority for the Customer.</param>
            <returns>CustomerID for the created Customer.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customer.Update(System.Guid,System.String,System.String,AiMetrix.BusinessObject.Enums.CustomerPriority)">
            <summary>
            Updates a Customer.
            </summary>
            <param name="customerID">The ID of the Customer.</param>
            <param name="customerDisplayName">The display name of the Customer.</param>
            <param name="customerPhone">Customer phone number.</param>
            <param name="customerPriorityID">Specifies priority for the Customer.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customer.Delete(System.Guid)">
            <summary>
            Deletes a Customer.
            </summary>
            <param name="customerID">The ID of the Customer.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customer.ToString">
            <summary>
            CustomerDisplayName
            </summary>
            <returns>CustomerDisplayName</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Customer.CustomerID">
            <summary>
            The ID of the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Customer.CustomerDisplayName">
            <summary>
            The display name of the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Customer.CustomerPhone">
            <summary>
            Customer phone number.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Customer.CustomerPriorityID">
            <summary>
            Specifies priority for the Customer.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Misc.Customer.CanUserEdit">
            <summary>
            Indicates whether the login can edit the AssetGroup.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Misc.Customers">
            <summary>
            Utility for specific entity.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customers.Get(System.Guid)">
            <summary>
            Retrieves a Customer.
            </summary>
            <param name="customerID">The ID of the Customer.</param>
            <returns>A Customer.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customers.GetByCircuit(System.Guid)">
            <summary>
            Retrieves customers.
            </summary>
            <param name="circuitID">Restricts the return set to customers associated with circuitID.</param>
            <returns>Customers</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customers.GetByNSObject(System.Guid)">
            <summary>
            Retrieves customers.
            </summary>
            <param name="nsObjectID">Restricts the return set to customers associated with nsObjectID.</param>
            <returns>Customers</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Misc.Customers.Get">
            <summary>
            Retrieves Customers.
            </summary>
            <returns>Customers</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerfJobTemplateSNMPs">
            <summary>
            Gets collection of PerfJobTemplateSNMP objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerfJobTemplateSNMPsAsync">
            <summary>
            Gets collection of PerfJobTemplateSNMP objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.MetricGroupsAsync">
            <summary>
            Gets collection of Metric groups asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SecureSocketMappings">
            <summary>
            Gets collection of SecureSocketMapping objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SecureSocketMappingsAsync">
            <summary>
            Gets collection of SecureSocketMapping objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SecureSocketTokenLookups">
            <summary>
            Gets collection of SecureSocketTokenLookup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SecureSocketTokenLookupsAsync">
            <summary>
            Gets collection of SecureSocketTokenLookup objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SysLogFacilitys">
            <summary>
            Gets collection of SysLogFacility objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SysLogFacilitysAsync">
            <summary>
            Gets collection of SysLogFacility objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SysLogSeveritys">
            <summary>
            Gets collection of SysLogSeverity objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SysLogSeveritysAsync">
            <summary>
            Gets collection of SysLogSeverity objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.NSObjectUserCredentials">
            <summary>
            Gets collection of NSObjectUserCredential objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.NSObjectUserCredentialsAsync">
            <summary>
            Gets collection of NSObjectUserCredential objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitors">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorsAsync">
            <summary>
            Gets collection of ApplicationMonitor objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorTypes">
            <summary>
            Gets collection of ApplicationMonitorType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorTypesAsync">
            <summary>
            Gets collection of ApplicationMonitorType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorVersions">
            <summary>
            Gets collection of ApplicationMonitorVersion objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ApplicationMonitoring.ApplicationMonitorVersionsAsync">
            <summary>
            Gets collection of ApplicationMonitorVersion objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAuditItem">
            <summary>
            This class is accessible only from the SecurityAudit Collection
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.Id">
            <summary>
            SecurityAuditLog id
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.Username">
            <summary>
            Username that was entered during attempted login or administrative action
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.SecurityGroup">
            <summary>
            SecurityGroup for user, can be null for invalid user
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.MacAddress">
            <summary>
            MACAddress of originating server, can be null for administrative action
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.AuditStatus">
            <summary>
            one or two word description of audit action
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.AccessTime">
            <summary>
            Date and time incident occurred, returned as local time
            persisted at UTC
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditItem.SessionType">
            <summary>
            SessionType of attempted action
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAuditItem.SecurityAuditItemComparer">
            <summary>
            Used for distributed reports
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAuditList">
            <summary>
            Get read-only collection of security groups, for display purposes only
            it is currently used in the client tree by administrators only
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAuditList.Get(System.Guid,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get read-only list of SecurityAudit data
            </summary>
            <param name="NSNodeID">NodeID of the NeuralStar node you wish to retrieve data from</param>
            <param name="pageNumber">page number to retrieve</param>
            <param name="pageSize">number of records in one page</param>
            <param name="filter">filter used to retrieve data</param>
            <param name="filterAttribute">column/field filter applies to</param>
            <param name="orderBy">column/field used to sort</param>
            <param name="isAscending">asc or desc</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAuditList.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.TotalCount">
            <summary>
            Total number of records available that meet the selection criteria.
            data will be returned in page size chunks
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.DistributedExceptions">
            <summary>
            Any exceptions that occured when attempting to retrieve data from another
            server in the system.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAuditList.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.Request.CommandText">
            <summary>
            stored procedure name
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.Request.SqlParams">
            <summary>
            SQL parameters required to get data
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.Request.NSNodeID">
            <summary>
            NSNodeID for server to retrieve data from
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityAuditList.Request.Args">
            <summary>
            collection of Args to use for remote event
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAuditListAsync">
            <summary>
            SecurityAuditList asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAuditListAsync.BeginGet(System.Guid,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get read-only list of SecurityAudit data
            </summary>
            <param name="NSNodeID">NodeID of the NeuralStar node you wish to retrieve data from</param>
            <param name="pageNumber">page number to retrieve</param>
            <param name="pageSize">number of records in one page</param>
            <param name="filter">filter used to retrieve data</param>
            <param name="filterAttribute">column/field filter applies to</param>
            <param name="orderBy">column/field used to sort</param>
            <param name="isAscending">asc or desc</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroup">
            <summary>
            Used to create and manage SecurityGroups, use can read info from his group.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.#ctor">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Get(System.Int32)">
            <summary>
            User can get his group, Administrator can get any group. 
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Get(System.Object,System.Int32)">
            <summary>
            User can get his group, Administrator can get any group. 
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Get(System.Object,System.String)">
            <summary>
            User can get his group, Administrator can get any group. 
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.GetServiceGroup">
            <summary>
            INTERNAL USE ONLY: When NeuralStar service logs in get his group. 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Get(Nsda2.Data.SafeDataReader)">
            <summary>
            INTERNAL USE ONLY: When NeuralStar user logs in get his group. 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Create">
            <summary>
            Administrator can create new group
            with all default values set
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.New(System.String)">
            <summary>
            Administrator can create new group.
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Rename(System.Int32,System.String)">
            <summary>
            Administrator can rename group.
            </summary>
            <param name="groupId"></param>
            <param name="newName"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DeleteGroup(System.Int32)">
            <summary>
             Administrator can delete existing group.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DeActivateGroup(System.Int32)">
            <summary>
             Administrator can de-activate existing group.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ActivateGroup(System.Int32)">
            <summary>
            Administrator can re-activate existing group
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityObjectPermissions">
            <summary>
            Use the SecurityObject filter to update permissions
            for all groups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityObjectPermissions(System.Int32)">
            <summary>
            Use the SecurityObject filter to update permissions
            for the specified group.
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityMapPermissionsFilter">
            <summary>
            Use the SecurityMapView filter to update permissions
            for all groups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityMapPermissionsFilter(System.Int32)">
            <summary>
            Use the SecurityObject filter to update permissions
            for the specified group.
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityMapDisplayInTreeFilter">
            <summary>
            Use the SecurityMapDisplayInTree filter to update displayInTree settings
            for all groups.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.ApplySecurityMapDisplayInTreeFilter(System.Int32)">
            <summary>
            Use the SecurityMapDisplayInTree filter to update displayInTree settings
            for the specified group.
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.Save">
            <summary>
            extra level of security check for unauthorized attempt to save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DataPortal_Fetch(System.Object)">
            <summary>
            called by DataPortal to get a SecurityGroup.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DataPortal_Insert">
            <summary>
            called by DataPortal to delete/add/update data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DataPortal_Update">
            <summary>
            called by DataPortal to delete/add/update data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.DataPortal_Delete(System.Object)">
            <summary>
            No user interface to currently support delete/mark inactive for group.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroup.FillGroupData(Nsda2.Data.SafeDataReader,AiMetrix.BusinessObject.Security.SecurityGroup)">
            <summary>
            I made this method static so that I could call it in the data portal 
            and call it from the Internal Get(SafeDataReader dr) that is used 
            during login. The user hasn't been authenticated yet so I can't 
            just call the securityGroup Get, I wanted to reuse the validation
            code.
            </summary>
            <param name="dr"></param>
            <param name="group"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityGroup.CanEditMetricItems">
            <summary>
            this role encompasses all items under the metric header in the NeuralStar client
            --PollingJobs
            --Calculated Metrics
            --Calculated StateTypes
            --StateTypes
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.SecurityGroup.CanEditPollingJobs">
             <summary>
             This role has been deprecated. Use CanEditMetricItems instead
             CanEditMetricItems includes all of the items located under the
             Metric header in the NeuralStar client.
             </summary>
            This is to be depricated.
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroupAsync">
            <summary>
            SecurityGroup asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupAsync.BeginGet(System.Object,System.Int32)">
            <summary>
            Asynchronous get read-only list of Users in group
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupAsync.BeginGet(System.Object,System.String)">
            <summary>
            Asynchronous get read-only list of Users in group
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.PasswordPolicy.GetIdValue">
            <summary>
            This is what is returned when you call ToString() 
            </summary>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.EnforcePolicy">
            <summary>
            Enforce this password policy, applies to NSDA groups and users only.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MaxPasswordAge">
            <summary>
            This setting determines the period of time (in days) that a 
            password can be used before the system requires the user to change it. 
            You can set passwords to expire after a number of days between 1 and 999, 
            or you can specify that passwords never expire by setting the number of days to 0.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MinPasswordLength">
            <summary>
            This setting determines the least number of 
            characters that a password for a user account may contain. 
            The value must be between 1 and 30 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.EnforcePasswordHistory">
            <summary>
            This setting determines the number of unique new passwords that have to
            be associated with a user account before an old password can be reused. 
            The value must be between 0 and 24 passwords.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MinAlphaUpperCharacters">
            <summary>
            This setting determines the least number of alphabetic 
            characters that a password for a user account may contain. 
            The value must be between 0 and 9 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MinAlphaLowerCharacters">
            <summary>
            This setting determines the least number of alphabetic 
            characters that a password for a user account may contain. 
            The value must be between 0 and 9 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MinNumericCharacters">
            <summary>
            This setting determines the least number of numeric characters
            (0 through 9) that a password for a user account may contain. 
            The value must be between 0 and 9 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.MinSpecialCharacters">
            <summary>
            This setting determines the least number of non-alphabetic characters
            (for example, !, $, #, %) that a password for a user account may contain. 
            The value must be between 0 and 9 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.PasswordPolicy.AccountLockoutThreshold">
            <summary>
            This setting determines the number of failed logon attempts that causes
            a user account to be locked out. A locked out account cannot be used until 
            it is reset by an administrator. You can set a value between 0 and 99 
            failed logon attempts. If you set the value to 0, the account will never 
            be locked out. 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLAType">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLAType.Delete(System.Int64)">
            <summary>
            Deletes a SLAType.
            </summary>
            <param name="slaTypeID">Identifies the SLAType.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLAType.Save(System.Int64,System.String,AiMetrix.BusinessObject.SLA.SLAType.PeriodicityType,AiMetrix.BusinessObject.SLA.SLAType.PeriodicityInitializationType,System.String,System.Int32,System.Double)">
            <summary>
            Updates an existing SLAType.
            </summary>
            <param name="slaTypeID">Identifies the instance.</param>
            <param name="slaTypeName">Names the instance.</param>
            <param name="periodicityID">Specifies the periodicity pattern.</param>
            <param name="periodicityInitialization">Initializes the periodicity pattern.</param>
            <param name="periodicityTimeZoneInfoStandardName"></param>
            <param name="periodicityHourAdjustmentToAddToUTCForDayCheck"></param>
            <param name="expectedPercent">A service with this SLAType is expected to be compliant for at least ExpectedPercent of the covered time.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLAType.Save(System.String,AiMetrix.BusinessObject.SLA.SLAType.PeriodicityType,AiMetrix.BusinessObject.SLA.SLAType.PeriodicityInitializationType,System.String,System.Int32,System.Double)">
            <summary>
            Creates a SLAType.
            </summary>
            <param name="slaTypeID">Identifies the instance.</param>
            <param name="slaTypeName">Names the instance.</param>
            <param name="periodicityID">Specifies the periodicity pattern.</param>
            <param name="periodicityInitialization">Initializes the periodicity pattern.</param>
            <param name="periodicityTimeZoneInfoStandardName"></param>
            <param name="periodicityHourAdjustmentToAddToUTCForDayCheck"></param>
            <param name="expectedPercent">A service with this SLAType is expected to be compliant for at least ExpectedPercent of the covered time.</param>
            <returns>A representation of the created SLAType.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLAType.ToString">
            <summary>
            Returns the SLATypeName.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.SLATypeID">
            <summary>
            Identifies the SLAType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.SLATypeName">
            <summary>
            Name of the SLAType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityID">
            <summary>
            Specifies the periodicity pattern.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityInitialization">
            <summary>
            Initializes the periodicity pattern.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityTimeZoneInfoStandardName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityHourAdjustmentToAddToUTCForDayCheck">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLAType.ExpectedPercent">
            <summary>
            A service with this SLAType is expected to be compliant for at least ExpectedPercent of the covered time.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityType">
            <summary>
            Periodicity types for SLATypes.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLAType.PeriodicityInitializationType">
            <summary>
            Periodicity initializations for types for PeriodicityTypes.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypes">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypes.Get">
            <summary>
            Retrieves SLA types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypes.Get(System.Int64)">
            <summary>
            Retrieves SLA types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeObjective">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeObjective.#ctor(System.Int64,System.Int64,System.String,AiMetrix.BusinessObject.SLA.SLATypeObjective.OperatorType,System.Double,System.Int64)">
            <summary>
            
            </summary>
            <param name="MetricID">Identifies the metric of the objective.  Zero implies no metric.</param>
            <param name="stateTypeID">Identifies the state type of the objective.  Zero implies no state type.</param>
            <param name="stateTypeValueID">Identifies the state type value of the objective.</param>
            <param name="operatorType">Operator for the objective.</param>
            <param name="objectivePercent">The metric or state type value compares to this over the time of interest.</param>
            <param name="timeParadigmID">Identifies an inclusion time paradigm.  Zero implies no time paradigm.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeObjective.Delete(System.Int64)">
            <summary>
            Deletes a SLATypeObjective.
            </summary>
            <param name="slaTypeID">Identifies the SLAType corresponding to the objectives that will be deleted.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeObjective.Save(System.Int64,System.String,System.Int64,System.Int64,System.String,AiMetrix.BusinessObject.SLA.SLATypeObjective.OperatorType,System.Double,System.Int64)">
            <summary>
            Saves a SLATypeObjective.
            </summary>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="slaTypeObjectiveName">Name of the SLATypeObjective.</param>
            <param name="metricID">Identifies the metric of the objective.  Zero implies no metric.</param>
            <param name="stateTypeID">Identifies the state type of the objective.  Zero implies no state type.</param>
            <param name="stateTypeValueID">Identifies the state type value of the objective.</param>
            <param name="operatorType">Operator for the objective.</param>
            <param name="objectivePercent">The metric or state type value compares to this over the time of interest.</param>
            <param name="timeParadigmID">Identifies an inclusion time paradigm.  Zero implies no time paradigm.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.SLATypeID">
            <summary>
            Identifies the SLAType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.SLATypeObjectiveName">
            <summary>
            Name of the SLATypeObjective.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.MetricID">
            <summary>
            Identifies the metric of the objective.  Zero implies no metric.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.StateTypeID">
            <summary>
            Identifies the state type of the objective.  Zero implies no state type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.StateTypeValueID">
            <summary>
            Identifies the state type value of the objective.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.Operator">
            <summary>
            Operator for the objective.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.ObjectivePercent">
            <summary>
            The metric or state type value compares to this over the time of interest.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeObjective.TimeParadigmID">
            <summary>
            Identifies an inclusion time paradigm.  Zero implies no time paradigm.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeObjective.OperatorType">
            <summary>
            Operator types for SLATypeObjectives.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeObjectives">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeObjectives.Get">
            <summary>
            Retrieves SLATypeObjectives.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.Delete(System.Guid)">
            <summary>
            Deletes a SLATypeServiceLayout.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the service layout for which the deletion will occur.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.Save(System.Guid,System.Int64,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Specifies a SLA for a service layout.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="slaBeginDate">Specifies the beginning for the SLA.</param>
            <param name="slaEndDate">Specifies the end for the SLA.  null implies no end.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.Save(System.Guid,System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.List{AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatA})">
            <summary>
            Specifies a SLA and scheduled inactive times for a service layout.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="slaBeginDate">Specifies the beginning for the SLA.</param>
            <param name="slaEndDate">Specifies the end for the SLA.  null implies no end.</param>
            <param name="inactiveTimes">Scheduled inactive times.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.Save(System.Guid,System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.List{AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatB})">
            <summary>
            Specifies a SLA and scheduled inactive times for a service layout.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="slaBeginDate">Specifies the beginning for the SLA.</param>
            <param name="slaEndDate">Specifies the end for the SLA.  null implies no end.</param>
            <param name="inactiveTimes">Scheduled inactive times.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.Save(System.Guid,System.Int64,System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.List{AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatA},System.Collections.Generic.List{AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatB})">
            <summary>
            Specifies a SLA and scheduled inactive times for a service layout.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="slaBeginDate">Specifies the beginning for the SLA.</param>
            <param name="slaEndDate">Specifies the end for the SLA.  null implies no end.</param>
            <param name="inactiveTimesA">Scheduled inactive times (format A).</param>
            <param name="inactiveTimesB">Scheduled inactive times (format B).</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ServiceLayoutAssetGroupID">
            <summary>
            Identifies the Service Layout.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.SLATypeID">
            <summary>
            Identifies the SLAType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.SLABeginDate">
            <summary>
            Specifies the beginning for the SLA.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.SLAEndDate">
            <summary>
            Specifies the end for the SLA.  null implies no end.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ValuePerCycle">
            <summary>
            Specifies the value per cycle for the SLA.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ValuePerCycleOutageCreditMultiplierPerSecond">
            <summary>
            Specifies the multiplier against ValuePerCycle when outage credit logic applies for the SLA.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatA">
            <summary>
            A format for specifying scheduled inactive times during SLATypeServiceLayout save operations.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayout.ScheduledInactiveTimeFormatB">
            <summary>
            A format for specifying scheduled inactive times during SLATypeServiceLayout save operations.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayouts">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayouts.Get">
            <summary>
            Retrieves SLATypeServiceLayouts.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.Save(System.Guid,System.Int64,System.String,System.Collections.Generic.List{System.DayOfWeek},AiMetrix.BusinessObject.Events.NSTime,AiMetrix.BusinessObject.Events.NSTime)">
            <summary>
            Use this method when you want to specify certain days of the week and start and end times within those days.  Null start and end times means all day.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="scheduledInactiveTimeName">Names the scheduled inactive time.</param>
            <param name="inactiveDays">The inactive days for the schedule.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.Save(System.Guid,System.Int64,System.String,AiMetrix.BusinessObject.NSDateTime,AiMetrix.BusinessObject.NSDateTime)">
            <summary>
            Use this method when you want to specify a starting date/time and an ending date/time.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="scheduledInactiveTimeName">Names the scheduled inactive time.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.Delete(System.Guid,System.Int64,System.String)">
            <summary>
            Deletes a SLATypeServiceLayoutScheduledInactiveTime.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
            <param name="scheduledInactiveTimeName">Names the scheduled inactive time.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.Delete(System.Guid,System.Int64)">
            <summary>
            Deletes SLATypeServiceLayoutScheduledInactiveTimes.
            </summary>
            <param name="serviceLayoutAssetGroupID">Identifies the Service Layout.</param>
            <param name="slaTypeID">Identifies the SLAType.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.ServiceLayoutAssetGroupID">
            <summary>
            Identifies the Service Layout.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.SLATypeID">
            <summary>
            Identifies the SLAType.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.ScheduledInactiveTimeName">
            <summary>
            Names the scheduled inactive time.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTime.Schedule">
            <summary>
            Defines the scheduled inactive time.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTimes">
            <summary>
            A utility for SLAs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeServiceLayoutScheduledInactiveTimes.Get">
            <summary>
            Retrieves SLATypeServiceLayoutScheduledInactiveTimes.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AiMetrix.BusinessObject.SLA.SLATypeListVueItem._slaTypeID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeListVueItem.op_Equality(AiMetrix.BusinessObject.SLA.SLATypeListVueItem,AiMetrix.BusinessObject.SLA.SLATypeListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.SLA.SLATypeListVueItem.op_Inequality(AiMetrix.BusinessObject.SLA.SLATypeListVueItem,AiMetrix.BusinessObject.SLA.SLATypeListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SLA.SLATypeListVueItems">
            <summary>
            Gets collection of DeviceListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.ConfigurationManagerStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.ConfigurationManagerStatusMessagesAsync">
            <summary>
            Gets collection of ConfigurationManagerStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.CEPServiceStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.CEPServiceStatusMessagesAsync">
            <summary>
            Gets collection of CEPServiceStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.CustomViewBase.CanUserEditCustomView">
            <summary>
            Indicates whether the logged in user can edit the CustomView.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomAlarmsGroupsGaugesViews">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomAlarmsGroupsGaugesViewsAsync">
            <summary>
            Gets collection of CustomAlarmsGroupsGaugesViewsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomThreeChartViews">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomThreeChartViewsAsync">
            <summary>
            Gets collection of CustomThreeChartViewsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomCanvasViews">
            <summary>
            Gets collection of CustomCanvasView objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomCanvasViewsAsync">
            <summary>
            Gets collection of CustomCanvasViewsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomMapVitalsGroupsGaugesViews">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomMapVitalsGroupsGaugesViewsAsync">
            <summary>
            Gets collection of CustomMapVitalsGroupsGaugesViewsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomTemplates">
            <summary>
            Gets collection of CustomTemplate objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomTemplatesAsync">
            <summary>
            Gets collection of CustomTemplate objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.EmailTemplate">
            <summary>
            Serializable EmailTemplate object
            - is saved as a CustomTemplate object
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.UseDefaults">
            <summary>
            Gets and sets whether the template should be 
            configured with default SMTP Settings
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.From">
            <summary>
            Gets and sets the "From" field for the email message.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.To">
            <summary>
            Gets and sets the "to" field for the email message.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.Cc">
            <summary>
            Gets and sets the "cc" field for the email message.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.MessagePriority">
            <summary>
            Gets and sets the priority of the email message.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.Subject">
            <summary>
            Gets and sets the email subject text.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.EmailTemplate.Body">
            <summary>
            Gets and sets the email body text.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomTemplateTypes">
            <summary>
            Gets collection of CustomTemplateType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomTemplateTypesAsync">
            <summary>
            Gets collection of CustomTemplateType objects asychronously.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.LocatorListVueItem._NSObjectID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.LocatorListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.LocatorListVueItem,AiMetrix.BusinessObject.Inventory.LocatorListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.LocatorListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.LocatorListVueItem,AiMetrix.BusinessObject.Inventory.LocatorListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LocatorListVueItems">
            <summary>
            Gets collection of LocatorListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LocatorListVueItemsAsync">
            <summary>
            Gets collection of LocatorListVue objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectSoftwareServicesData">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectSoftwareServicesDataAsync">
            <summary>
            Gets collection of NSObjectSoftwareServiceData objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityItem.New">
            <summary>
            Create new editable SecurityItem (Graph,Location,Class), child of SecurityItems collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityItem.Get(AiMetrix.BusinessObject.Security.AuthorizationItemType,System.Int32,Nsda2.Data.SafeDataReader)">
            <summary>
            get SecurityItem (Graph,Location,Class), child of SecurityItems collection
            </summary>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityItem.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAssetGroup.Get(System.Int32,Nsda2.Data.SafeDataReader)">
            <summary>
            get SecurityMap child of SecurityItems collection
            </summary>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAssetGroups">
            <summary>
            Collection of SecurityAssetGroups.
            Used to manage group authorizations.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAssetGroups.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAssetGroups.Request">
            <summary>
            Request 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityAssetGroupsAsync">
            <summary>
            SecurityAssetGroups asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityAssetGroupsAsync.BeginGet(System.Object,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asynchrous method to get collection of SecurityItems.
            </summary>
            <param name="sender"></param>
            <param name="groupId"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityMap.Get(System.Int32,Nsda2.Data.SafeDataReader)">
            <summary>
            get SecurityMap child of SecurityItems collection
            </summary>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityMaps">
            <summary>
            Collection of SecurityMaps.
            Used to manage group authorizations.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityMaps.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityMaps.Request">
            <summary>
            Request 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityMapsAsync">
            <summary>
            SecurityMaps asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityMapsAsync.BeginGet(System.Object,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asynchrous method to get collection of SecurityItems.
            </summary>
            <param name="sender"></param>
            <param name="groupId"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityItems">
            <summary>
            Collection of SecurityItem of specified type, Class, Location, Graph.
            Used to manage group authorizations.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityItems.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityItems.Request">
            <summary>
            Request 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityItemsAsync">
            <summary>
            GenericList asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityItemsAsync.BeginGet(System.Object,AiMetrix.BusinessObject.Security.AuthorizationItemType,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Asynchrous method to get collection of SecurityItems.
            </summary>
            <param name="sender"></param>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityUser">
            <summary>
            Get read-only SecurityUser this object is always a child of the Read-only SecurityUserList
            for use by administrator to get information required to update specific user record
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityUserList">
            <summary>
            Get read-only collection of Users in group, for use by
            administrator to get information required to update specific user record
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityUserList.Get(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Get read-only list of Users in group
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityUserList.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityUserList.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityUserListAsync">
            <summary>
            GenericList asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityUserListAsync.BeginGet(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Asynchronous get read-only list of Users in group
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroupListItem">
            <summary>
            This class is accessible only from the SecurityGroupList Collection
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroupList">
            <summary>
            Get read-only collection of security groups, for display purposes only
            it is currently used in the client tree by administrators only
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupList.Get(System.Object)">
            <summary>
            Get read-only list of active groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupList.Get(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Get read-only list of groups
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupList.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroupList.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityGroupListAsync">
            <summary>
            GenericList asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityGroupListAsync.BeginGet(System.Object)">
            <summary>
            Asynchronous get read-only list of Users in group
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityCustomView.New">
            <summary>
            Create new editable SecurityCustomView, child of SecurityCustomViews collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityCustomView.Get(System.Int32,Nsda2.Data.SafeDataReader)">
            <summary>
            get SecurityCustomView, child of SecurityCustomViews collection
            </summary>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityCustomView.Request">
            <summary>
            Request
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityCustomViews">
            <summary>
            Collection of SecurityCustomViewItems.
            Used to manage group authorizations.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityCustomViews.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Request"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityCustomViewsAsync">
            <summary>
            asychronous methods.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SecurityCustomViewsAsync.BeginGet(System.Object,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Asynchrous method to get collection of SecurityCustomView Items.
            </summary>
            <param name="sender"></param>
            <param name="itemType"></param>
            <param name="groupId"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SecurityObjectDeleteds">
            <summary>
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.AvgBandwidthMeasurements">
            <summary>
            Gets collection of Metric objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.AvgBandwidthMeasurementsAsync">
            <summary>
            Gets collection of Metric objects asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.ClassificationType.ToString">
            <summary>
            Tool used internally to convert icon to byte[]
            for storage and retrieval.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.ClassificationType.SaveServiceProtocol">
            <summary>
            ServiceProtocol classifcationTypes use a different default template.
            this method was created to address their unique qualities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.ClassificationType.RemoveIcon">
            <summary>
            Remove custom icon for this classification
            use default embedded resource
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.ClassificationType.RemoveIcon(System.Int32)">
            <summary>
            Remove custom icon for this classification
            use default embedded resource
            </summary>
            <param name="classificationTypeID"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.ClassificationType.HasChildren">
            <summary>
            Are there any NSObject of this classificationType
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ClassificationTypes">
            <summary>
            Gets collection of ClassificationTypes objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ClassificationTypesAsync">
            <summary>
            Gets collection of ClassificationType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CollectorTypes">
            <summary>
            Gets collection of CollectorType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CollectorTypesAsync">
            <summary>
            Gets collection of CollectorType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.NSConfiguration">
            <summary>
            To retrieve the common application settings use: 
            AiMetrix.BusinessObject.NSConfiguration config = AiMetrix.BusinessObject.NSConfiguration.Get();
            To retrive specific value: 
            config.AppSettings["test"].Value
            Will return empty string if non existent setting is requested
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.NSConfiguration.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.NSConfiguration.DataPortal_Update">
            <summary>
            Called by DataPortal when Save is called on NSConfiguration
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.NSConfiguration.Id">
            <summary>
            Must not return null or exception is thrown by base class.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.NSConfigurationAsync">
            <summary>
            Gets NSConfiguration asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.ApplicationSettings.DataPortal_Fetch(System.Object)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.ApplicationSettings.DataPortal_Update">
            <summary>
            This method is invoked when save is called on independent collection of appSettings
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.ApplicationSettings.Update(System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="tr"></param>
            <param name="inventoryObject"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.ApplicationSetting.GetIdValue">
            <summary>
            This is what is returned when you call ToString() 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.ApplicationSetting.Update(System.Data.SqlClient.SqlTransaction)">
            <summary>
            
            </summary>
            <param name="tr"></param>
            <param name="inventoryObject"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Database">
            <summary>
            Returns the database connection string used by all NeuralStar applications
            Default value uses database name NeuralStar, local sqlExpress instance and Windows Integrated Security.
            To overrride this value include an app.config in your application and add a Key named 'Database'
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Database.ResetConnectionStringToDefault">
            <summary>
            Force the next ConnectionString get to refresh it's value from the config file.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Database.IsValidConnectionString(System.String)">
            <summary>
            Returns true if it is successful in opening and closing a SQL connection using the provided connection string.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Database.ConnectionString">
            <summary>
            Connection string used for all data portal calls, when in remoting mode the value will always
            be the value from the config file, when in direct database mode you may override this value
            to any valid NeuralStar connection string
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Database.CommandTimeout">
            <summary>
            Gets the wait time before terminating the attempt to execute 
            a  sql command and generating an error. 
            The default value is 30 seconds.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.RemotePortal">
            <summary>
            Sets or returns the curent dataPortal Url
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.RemotePortal.ResetPortalToDefault">
            <summary>
            Force the DataPortal to reset to the default value in the config file
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.RemotePortal.DataPortalUrl">
            <summary>
            Get/Set the value of the current DataPortalUrl
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Configuration">
            <summary>
            Easy to use static helper class that returns the same application settings 
            that can be obtained by calling NSConfiguration.Get()
            If unable to connect to the database you will always get
            empty strings as values. Sample use below:
            AiMetrix.BusinessObject.Configuration.AppSettings["HelpURL.HelpURL"].Value;
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Configuration.Refresh">
            <summary>
            Clear existing configuration settings.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Configuration.Save">
            <summary>
            Save current configuration settings.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.CustomInformation">
            <summary>
            Part of a Custom Information persistence and retrieval mechanism.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.Save(System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
            Saves the CustomInformation record that matches the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
            <param name="tag1">information</param>
            <param name="tag2">information</param>
            <param name="tagRowVersion">byte[8]</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.SaveTag1(System.String,System.String,System.String)">
            <summary>
            Saves the CustomInformation record that matches the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
            <param name="tag1">information</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.SaveTag2(System.String,System.String,System.String)">
            <summary>
            Saves the CustomInformation record that matches the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
            <param name="tag2">information</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.SaveTagRowVersion(System.String,System.String,System.Byte[])">
            <summary>
            Saves the CustomInformation record that matches the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
            <param name="tagRowVersion">byte[8]</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.Delete(System.String,System.String)">
            <summary>
            Deletes the CustomInformation record that matches the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformation.Delete(System.String)">
            <summary>
            Deletes all the CustomInformation records for the category.
            </summary>
            <param name="category">The category in which the information resides.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.CustomInformation.Category">
            <summary>
            The category in which the information resides.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.CustomInformation.ID">
            <summary>
            The ID of the information within the category.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.CustomInformation.Tag1">
            <summary>
            Up to 255 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.CustomInformation.Tag2">
            <summary>
            Up to 255 characters.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.CustomInformation.TagRowVersion">
            <summary>
            byte[8] (corresponding to varbinary(8) in TSQL)
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.CustomInformations">
            <summary>
            Part of a Custom Information persistence and retrieval mechanism.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformations.Get(System.String)">
            <summary>
            Returns all the CustomInformation records for the category.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <returns>Returns all the CustomInformation records for the category.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.CustomInformations.Get(System.String,System.String)">
            <summary>
            Returns the CustomInformation record for the category/id pair.
            </summary>
            <param name="category">The category in which the information resides.</param>
            <param name="id">The ID of the information within the category.</param>
            <returns>Returns the CustomInformation record for the category/id pair.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.AuditLog">
            <summary>
            Each instance of this class corresponds to a row in the AuditLog table.  This class has methods to create and delete AuditLog entries.  Various stored procedures can have audit logging enabled.  WARNING: there is no automated cleanup of AuditLog records, so the table can grow without bounds unless there is intentional intervention!  Only an administrator can use the AuditLog feature.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.AuditLog.Delete(System.Int32)">
            <summary>
            Deletes an AuditLog entry.
            </summary>
            <param name="auditLogID">The ID of the entry to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.AuditLog.Delete(System.String)">
            <summary>
            Deletes AuditLog entries.
            </summary>
            <param name="auditLogKey">The AuditLogKey of the entries to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.AuditLog.Create(System.String,System.String)">
            <summary>
            Creates an AuditLog entry.
            </summary>
            <param name="auditLogKey">Typically a value demarcating a group of entries.</param>
            <param name="auditLogInfo">Information about a particular entry.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.AuditLog.AuditLogID">
            <summary>
            Uniquely identifies an AuditLog entry.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.AuditLog.AuditLogKey">
            <summary>
            Typically a value demarcating a group of AuditLog entries.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.AuditLog.AuditLogInfo">
            <summary>
            Information about an AuditLog entry.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.AuditLog.LastUpdateTime">
            <summary>
            The time an AuditLog entry was made.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.AuditLogs">
            <summary>
            Has methods to retrieve AuditLog information.  Only an administrator can use the AuditLog feature.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.AuditLogs.Get(System.String)">
            <summary>
            Retrieves AuditLog instances.
            </summary>
            <param name="auditLogKey">Restricts the retrieved entries to those with AuditLogKey == auditLogKey.</param>
            <returns>A collection of AuditLog instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.AuditLogs.GetCount(System.String)">
            <summary>
            Provides the number of AuditLog entries where AuditLogKey == auditLogKey.
            </summary>
            <param name="auditLogKey">Restricts the count to entries where AuditLogKey == auditLogKey.</param>
            <returns>A count.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.AuditLogs.AuditLogKeyRecordCount">
            <summary>
            Only used internally.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ClassificationTypeSysObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.STPLinkUtils">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomURLTabs">
            <summary>
            Gets collection of CustomURLTab objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomURLTabsAsync">
            <summary>
            Gets collection of CustomURLTab objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.InterfaceVUEStatistics">
            <summary>
            Gets collection of InterfaceVUEStatistics objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.InterfaceVUEStatistics.GetByInterfaceNSObjectID(System.Guid,System.Int32)">
            <summary>
            Returns statistics for specified interfaceNSObject
            </summary>
            <param name="interfaceNSObjectID"></param>
            <param name="summaryIntervalMinutes"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.InterfaceVUEStatisticsAsync">
            <summary>
            Gets collection of SNMPInterfaceStatistics objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.InventoryExportImport">
            <summary>
            An instance of this class contains information 
            pertaining to an nsobject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.nsObject">
            <summary>
            not SNMPNode and not SNMPInterface
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.snmpNode">
            <summary>
            If the nsobject is an snmp node, 
            then this should be populated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.snmpInterfaces">
            <summary>
            If the nsobject is an snmp node, 
            then this should be populated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.nsIPAddresses">
            <summary>
            These are all the ipaddress records for 
            nsObject/snmpNode.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.customObjects">
            <summary>
            These are all the CustomObjects records for 
            nsObject/snmpNode.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImport.SNMPInterfaceCustomObjects">
            <summary>
            The key is the nsobjectid for the snmpinterface.  
            The value is a CustomObjects instance (which is all the
            CustomObjects records for the interface).
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.InventoryExportImports.Export(System.Collections.Generic.List{AiMetrix.BusinessObject.InventoryExportImports.IPv4AddressRange})">
            <summary>
            
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.InventoryExportImports.Export">
            <summary>
            
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.InventoryExportImports.Import(AiMetrix.BusinessObject.InventoryExportImports)">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImports.links">
            <summary>
            All links in the exporter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.InventoryExportImports.nsNode">
            <summary>
            The NSNode of the exporter.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObject">
            <summary>
            Has properties for a CustomObject and methods to update CustomObjects.    
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObject.Save">
            <summary>
            Saves a CustomObject.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObject.Delete">
            <summary>
            Deletes a CustomObject.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObject.ToStringDebug">
            <summary>
            Returns a display for the CustomObject.
            </summary>
            <returns>A display for the CustomObject.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.ClassName">
            <summary>
            Essentially corresponds to a keying category for the data.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.ObjectName">
            <summary>
            Essentially corresponds to a value within ClassName.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.NetworkDomainID">
            <summary>
            The ID of the network domain for the CustomObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.NSObjectID">
            <summary>
            The ID of the NSObject that has the CustomObject information.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.XMLDoc">
            <summary>
            Data associated with the CustomObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.IsManaged">
            <summary>
            Read Only attribute from the NSObject associated with this CustomObject
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObject.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjects">
            <summary>
            Has methods to retrieve CustomObject instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(System.String)">
            <summary>
            Returns a set of all CustomObject instances that have className.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(System.String,System.Boolean)">
            <summary>
            Returns a set of all CustomObject instances that have className and that do not have an NSObjectNSNode record.
            </summary>
            <param name="className"></param>
            <param name="localNodeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(System.String,System.String,System.Int32)">
            <summary>
            Returns a set of all CustomObject instances that have className/objectName/networkDomainID.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(System.String,System.Int32)">
            <summary>
            Retrieves CustomObject instances.
            </summary>
            <param name="className">filter</param>
            <param name="networkDomainID">filter</param>
            <returns>CustomObjects</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(System.String,System.Guid)">
            <summary>
            Returns a set of all CustomObject instances that have className/nsParentObjectID.
            </summary>
            <param name="className"></param>
            <param name="nsParentObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.Get">
            <summary>
            Retrieves all CustomObject instances.
            </summary>
            <returns>A collection of CustomObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.Get(System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects.GetByClassName(string, string, int) instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByNSObject(System.Guid)">
            <summary>
            Returns a set of all CustomObject instances for nsObjectID.
            </summary>
            <param name="nsObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByNSObject(System.Guid,System.String)">
            <summary>
            Returns a set of all CustomObject instances that have className for nsObjectID.
            </summary>
            <param name="nsObjectID"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByNSObject(System.Collections.Generic.List{System.Guid})">
            <summary>
            Returns a set of all CustomObject instances that have nsObjectID in nsObjectIDList.
            </summary>
            <param name="nsObjectIDList"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Guid)">
            <summary>
            Returns a set of all CustomObject instances are descendants of ancestorNSObjectID.
            </summary>
            <param name="ancestorNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Guid,System.String)">
            <summary>
            Returns a set of all CustomObject instances that (1) have className and (2) are descendants of ancestorNSObjectID.
            </summary>
            <param name="ancestorNSObjectID"></param>
            <param name="className"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Guid,System.String,System.String)">
            <summary>
            Returns a set of all CustomObject instances that (1) have className/objectName and (2) are descendants of ancestorNSObjectID.
            </summary>
            <param name="ancestorNSObjectID"></param>
            <param name="className"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Returns a set of all CustomObject instances that (1) have className/objectName/networkDomainID and (2) are descendants of ancestorNSObjectID.
            </summary>
            <param name="ancestorNSObjectID"></param>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Guid,System.Boolean)">
            <summary>
            Retrieves CustomObject instances.
            </summary>
            <param name="ancestorNSObjectID">The ID of the NSObject that is an ancestor of the NSObjects that have the retrieved CustomObject information.</param>
            <param name="ignoreNetworkDomain">When true, the NetworkDomainID is not part of the filter condition; otherwise, a default NetworkDomainID is part of the filter.</param>
            <returns>A collection of CustomObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByAncestorNSObject(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Retrieves CustomObject instances.
            </summary>
            <param name="ancestorNSObjectIDList">The list of IDs of NSObjects that are ancestors of NSObjects that have the retrieved CustomObject information.</param>
            <param name="ignoreNetworkDomain">When true, the NetworkDomainID is not part of the filter condition; otherwise, a default NetworkDomainID is part of the filter.</param>
            <returns>A collection of CustomObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Guid,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Guid,System.String,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Guid,System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Guid,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByTopLevelNSObject(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.CustomObjects::GetByAncestorNSObject instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByParentNSObject(System.Guid)">
            <summary>
            Returns a set of all CustomObject instances that are direct children of nsParentObjectID.
            </summary>
            <param name="nsParentObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjects.GetByParentNSObject(System.Guid,System.String)">
            <summary>
            Returns a set of all CustomObject instances that (1) are direct children of nsParentObjectID and (2) have className.
            </summary>
            <param name="nsParentObjectID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync">
            <summary>
            Has methods to retrieve CustomObject instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.BeginGet">
            <summary>
            Asynchronously retrieves all CustomObject instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Asynchronously retrieves CustomObject instances.
            </summary>
            <param name="nsObjectID">The ID of the NSObject that has the retrieved CustomObject information.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.BeginGetByParentNSObject(System.Guid)">
            <summary>
            Asynchronously retrieves CustomObject instances.
            </summary>
            <param name="nsParentObjectID">The ID of the NSObject that is the parent of the NSObjects that have the retrieved CustomObject information.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.BeginGetByClassName(System.String,System.Guid)">
            <summary>
            Asynchronously retrieves CustomObject instances.
            </summary>
            <param name="className">The ClassName property of the retrieved CustomObject instances.</param>
            <param name="nsParentObjectID">The ID of the NSObject that is the parent of the NSObjects that have the retrieved CustomObject information.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.OnGetResponse">
            <summary>
            Fires when a CustomObjects instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="customObjects"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectClassName">
            <summary>
            Structure for certain CustomObject-related scenarios.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObjectClassName.AncestorNSObjectID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomObjectClassName.ClassName">
            <summary>
            Essentially corresponds to a keying category for CustomObject data.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectClassNames">
            <summary>
            Has a method to retrieve CustomObjectClassName instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectClassNames.Get(System.Guid)">
            <summary>
            Retrieves CustomObjectClassName instances.
            </summary>
            <param name="ancestorNSObjectID">The ID of the parent NSObject associated with the retrieved data.</param>
            <returns>A collection of CustomObjectClassName instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync">
            <summary>
            Has a method to retrieve CustomObjectClassName instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync.BeginGet(System.Guid)">
            <summary>
            Asynchronously retrieves CustomObjectClassName instances.
            </summary>
            <param name="ancestorNSObjectID">The ID of the parent NSObject associated with the retrieved data.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync.OnGetResponse">
            <summary>
            Fires when a CustomObjectClassNames instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="customObjectClassNames"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomObjectClassNamesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Protocols.ManagementObjectMOF.EventCode">
            <summary>
            This property has the value of the lower 16-bits of the EventIdentifier property. 
            It is present to match the value displayed in the NT Event Viewer. 
            NOTE: Two events from the same source may have the same value for this property 
            but may have different severity and EventIdentifier values
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.GetByMessageID(System.Int32)">
            <summary>
                Get windows event log message from database.
            </summary>
            <param name="messageID">The target windows event log message ID.</param>
            <returns>
                If the target windows event log message exist, then it returns the message in a list; otherwise; it returns an empty list.
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.GetByJobID(System.Int32)">
            <summary>
                Get windows event log messages from database for specific jobID.
            </summary>
            <param name="jobID">The target job ID.</param>
            <returns>
                It returns all the windows event log messages that matches the specified jobID.
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.GetByFilterID(System.Int32,System.Int32)">
            <summary>
                Get windows event log messages from database for specific jobID and filterID.
            </summary>
            <param name="jobID">The target job ID.</param>
            <param name="filterID">The target filter ID.</param>
            <returns>
                It returns all the windows event log messages that matches the specified jobID and filterID.
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.GetByAlarmGUID(System.Guid,System.Guid,System.Int32)">
            <summary>
                Get windows event log messages that correspond to specified AlarmGUID
            </summary>
            <param name="messageID">The target windows event log message ID.</param>
            <returns>
                If the target windows event log messages exist, then it returns the messages in a list; otherwise; it returns an empty list.
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.ExecuteFilter(System.Int32,System.String,System.String)">
            <summary>
                Execute WMI query using supplied credentialID, nsObjectID, and query string
            </summary>
            <param name="credentialID">The target credential ID.</param>
            <param name="nsObjectID">The target NSObject ID.</param>
            <param name="wmiQuery">The WMI query statement.</param>
            <returns>
                Returns a list of windows event log messages. 
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.ManagementObjectMOFs.ExecuteFilter(AiMetrix.BusinessObject.Security.SystemCredential,System.String,System.String)">
            <summary>
                Execute WMI query using supplied credential, serverName, and query string
            </summary>
            <param name="credential">The target credential info.</param>
            <param name="serverName">The target server name.</param>
            <param name="wmiQuery">The WMI query statement.</param>
            <returns>
                Returns a list of windows event log messages.
            </returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.MonitorFilterLogName">
            <summary>
            A utility for Monitor Filter Log Name.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.MonitorFilterLogName.Save(System.String)">
            <summary>
            Saves a Monitor Filter Log Name.
            </summary>
            <param name="logName">The Log Name to save.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.MonitorFilterLogName.Delete(System.String)">
            <summary>
            Deletes a Monitor Filter Log Name.
            </summary>
            <param name="logName">The Log Name to delete.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Protocols.MonitorFilterLogName.LogName">
            <summary>
            Log Name (e.g., "Application," "Security," "System," "Active Directory Web Services," etc.).
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.MonitorFilterLogNames">
            <summary>
            A utility for Monitor Filter Log Name.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.MonitorFilterLogNames.Get">
            <summary>
            Retrieves all the Monitor Filter Log Names.
            </summary>
            <returns>Monitor Filter Log Names.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Protocols.MonitorFilterLogNames.GetAsStringArray">
            <summary>
            Retrieves all the Monitor Filter Log Names.
            </summary>
            <returns>Monitor Filter Log Names.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.WELogRequest">
            <summary>
            Class defines the content of the xmlDoc column for MonitorJobs of type WindowsEventLog
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlows">
            <summary>
            Gets collection of NetFlow objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlowsAsync">
            <summary>
            Gets collection of NetFlow objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlowTotals">
            <summary>
            Gets collection of NetFlow objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlowTotalsAsync">
            <summary>
            Gets collection of NetFlow objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlowTypes">
            <summary>
            Gets collection of NetFlowType objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.NetFlowTypesAsync">
            <summary>
            Gets collection of NetFlowType objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectAncestorItems">
            <summary>
            Gets collection of NSObjectAncestorItems objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectAncestorItems.Get(System.Guid)">
            <summary>
            Get all Ancestors of this object, including NSObjects and Subnets only
            </summary>
            <param name="nsObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectAncestorItems.Get(System.Guid,System.Boolean)">
            <summary>
            Get all Ancestors of this object, including NSObjects, Subnets and AssetGroups
            </summary>
            <param name="nsObjectID"></param>
            <param name="includeGroups"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectAncestorItemsAsync">
            <summary>
            Gets collection of NSObjectAncestorItems asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.PerfJobTemplate.CreateXmlStream">
            <summary>
            Create Xml stream without NodeParamsElement to save to database
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.PerfJobTemplate.WritePerformanceCounterElement(System.Xml.XmlTextWriter@,AiMetrix.BusinessObject.Performance.WMIPerformanceCounter)">
            <summary>
            Write one instance of a PerformanceCounter to the xmlTextWriter
            </summary>
            <param name="xWriter"></param>
            <param name="pc"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerfJobTemplates">
            <summary>
            Gets collection of PerfJobTemplate objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.PerfJobTemplates.ReadPerformanceCounterElement(System.Xml.XmlTextReader@)">
            <summary>
            Parse one performance counter xml element to a instance of a WMIPerformance counter
            </summary>
            <param name="xRead"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerfJobTemplatesAsync">
            <summary>
            Gets collection of PerfJobTemplate objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterfaceStatistic.ConnectedTo">
            <summary>
            List of NameValue pairs this interface is connectedTo
            Name is DisplayName, Value is NSObjectID
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfaceStatistics">
            <summary>
            Gets collection of SNMPInterfaceStatistics objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfaceStatisticsAsync">
            <summary>
            Gets collection of SNMPInterfaceStatistic objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPNodeStatistics">
            <summary>
            Gets collection of SNMPNodeStatistics objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPNodeStatisticsAsync">
            <summary>
            Gets collection of SNMPNodeStatistic objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NetFlowStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NetFlowStatusMessagesAsync">
            <summary>
            Gets collection of NetFlowStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.TripleDESKeys">
            <summary>
            
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.TripleDESUtil.Encrypt(System.Object,System.Byte[])">
            <summary>
            Encrypts a serializable object.
            </summary>
            <param name="objectToEncrypt">Must be a serializable object.</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.InventoryListVueItem._NSObjectID">
            <summary>
            Order of properties listed that have the
            [DisplayInGrid(true)] attribute is important
            the web client uses reflection to generate the
            columns displayed, they are generated in order.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryListVueItem.op_Equality(AiMetrix.BusinessObject.Inventory.InventoryListVueItem,AiMetrix.BusinessObject.Inventory.InventoryListVueItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryListVueItem.op_Inequality(AiMetrix.BusinessObject.Inventory.InventoryListVueItem,AiMetrix.BusinessObject.Inventory.InventoryListVueItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryListVueItems">
            <summary>
            Gets collection of InventoryListVue objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryListVueItemsAsync">
            <summary>
            Gets collection of InventoryListVue objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectSoftwareServiceStates">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SoftwareServiceStates">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectSoftwareServices">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectSoftwareServicesAsync">
            <summary>
            Gets collection of InventoryObject objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SoftwareServices">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectNSNodes">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomain">
            <summary>
            This class can be associated with one or more system installations (NSNodes).  Furthermore, this class facilitates disambiguation of IP addresses and disambiguation of custom object information.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomain.Save">
            <summary>
            Saves a network domain.  The network domain is updated if it already exists; otherwise, it is created.
            </summary>
            <returns>A representation of the saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomain.Delete">
            <summary>
            Deletes a network domain.  WARNING: Never attempt to delete a network domain whose ID is the NetworkDomainID property of the NSNode corresponding to IsMe == true!
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomain.Delete(System.Int32)">
            <summary>
            Deletes a network domain.  WARNING: Never attempt to delete a network domain whose ID is the NetworkDomainID property of the NSNode corresponding to IsMe == true!
            </summary>
            <param name="networkDomainID">The ID of the network domain to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomain.UpdateDiscoveryNSNode(System.Int32,System.Nullable{System.Guid})">
            <summary>
            Updates the DiscoveryNSNodeID for a Network Domain.
            </summary>
            <param name="networkDomainID">specifies the Network Domain in question</param>
            <param name="discoveryNSNodeID">the DiscoveryNSNodeID to be associated with the Network Domain in question</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomain.ToString">
            <summary>
            Overrides ToString().
            </summary>
            <returns>The NetworkDomainName property.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NetworkDomain.NetworkDomainID">
            <summary>
            The ID of the network domain.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NetworkDomain.NetworkDomainName">
            <summary>
            The name of the network domain.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NetworkDomain.DiscoveryNSNodeID">
            <summary>
            The ID of the NSNode that is the Discovery NSNode for the network domain.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomains">
            <summary>
            Can have a collection of NetworkDomain instances and has methods to retrieve NetworkDomain instances. 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.AddToCollection(AiMetrix.BusinessObject.Inventory.NetworkDomain)">
            <summary>
            Adds a NetworkDomain instance to the collection.
            </summary>
            <param name="networkDomain">The NetworkDomain instance to add to the collection.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.RemoveItem(AiMetrix.BusinessObject.Inventory.NetworkDomain)">
            <summary>
            Removes a NetworkDomain instance from the collection.
            </summary>
            <param name="networkDomain">The NetworkDomain instance to remove from the collection.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.Get">
            <summary>
            Retrieves all NetworkDomain instances.
            </summary>
            <returns>A collection of NetworkDomain instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.Get(System.String)">
            <summary>
            Retrieves a NetworkDomain instance.
            </summary>
            <param name="networkdomain">The NetworkDomainName property of the NetworkDomain to retrieve.</param>
            <returns>A NetworkDomain instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.Get(System.Int32)">
            <summary>
            Retrieves a NetworkDomain instance.
            </summary>
            <param name="networkDomainID">The NetworkDomainID property of the NetworkDomain to retrieve.</param>
            <returns>A NetworkDomain instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomains.GetByNSObjectID(System.Guid)">
            <summary>
            Retrieves NetworkDomain instances.
            </summary>
            <param name="nsObjectID">The ID of a NSObject that has IP address and/or custom object information associated with the retrieved NetworkDomain instances.</param>
            <returns>A collection of NetworkDomain instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync">
            <summary>
            Has methods to retrieve NetworkDomain instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.BeginGet">
            <summary>
            Asynchronously retrieves all NetworkDomain instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.BeginGetByNSObjectID(System.Guid)">
            <summary>
            Asynchronously retrieves NetworkDomain instances.
            </summary>
            <param name="nsObjectID">The ID of a NSObject that has IP address and/or custom object information associated with the retrieved NetworkDomain instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.BeginGetByNSObjectID(System.Object,System.Guid)">
            <summary>
            Asynchronously retrieves NetworkDomain instances.
            </summary>
            <param name="nsObjectID">The ID of a NSObject that has IP address and/or custom object information associated with the retrieved NetworkDomain instances.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.OnGetResponse">
            <summary>
            Fires when a NetworkDomains instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.OnGetSenderResponse">
            <summary>
            Fires when a NetworkDomains instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="networkDomains"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.GetSenderResponseDelegate">
            <summary>
            Delegate for OnGetSenderResponse.
            </summary>
            <param name="sender"></param>
            <param name="networkDomains"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NetworkDomainsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttribute">
            <summary>
            Has properties and methods related to descriptive metadata and data specific to a NSObject.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttribute.EstablishState(System.Collections.Generic.List{AiMetrix.BusinessObject.Inventory.CustomAttribute})">
            <summary>
            For each NSObject in nsObjectCustomAttributes, custom attribute state is established.  Inserts, updates, and deletes occur such that, for each NSObject in nsObjectCustomAttributes, the post-call state matches what is specified by nsObjectCustomAttributes.
            </summary>
            <param name="nsObjectCustomAttributes">Specifies the post-call state for each NSObject in nsObjectCustomAttributes.  The following properties are used from the CustomAttribute instances: NSObjectID, Category, Name, Value, and DisplayAsFilterAttribute.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttribute.Save">
            <summary>
            Saves descriptive metadata and data specific to a NSObject.
            </summary>
            <returns>An instance representing the save.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttribute.Delete">
            <summary>
            Deletes a NSObjectCustomAttribute record.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttribute.Delete(System.Guid,System.String,System.String)">
            <summary>
            Deletes a NSObjectCustomAttribute record.
            </summary>
            <param name="NSObjectID">The ID of the NSObject having its NSObjectCustomAttribute record deleted.</param>
            <param name="Category">Part of a key to identify the descriptive metadata corresponding to the NSObjectCustomAttribute record to delete.</param>
            <param name="Name">Part of a key to identify the descriptive metadata corresponding to the NSObjectCustomAttribute record to delete.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.Value">
            <summary>
            The value corresponding to the CustomAttributeID for NSObjectID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.Hidden">
            <summary>
            Indicates whether information is hidden within certain contexts.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.Name">
            <summary>
            Part of a key to identify the descriptive metadata for the instance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.Category">
            <summary>
            Part of a key to identify the descriptive metadata for the instance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.NSObjectID">
            <summary>
            The ID of the NSObject associated with the custom attribute data.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.CustomAttributeID">
            <summary>
            The ID of the CustomAttribute descriptive metadata identified by the Category/Name combination.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.DisplayAsFilterAttribute">
            <summary>
            Indicates whether the descriptive metadata specified by CustomAttributeID is selectable within certain filter contexts.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttribute.Tag">
            <summary>
            General purpose property for application/service use.
            NOT stored in the database.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttribute.AttributeCategory">
            <summary>
            This has been deprecated.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributes">
            <summary>
            Has methods to retrieve CustomAttribute instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get(System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="Category">Matches the Category property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get(System.String,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="category">Matches the Category property of the retrieved instances.</param>
            <param name="name">Matches the Name property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get(System.String,System.String,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="category">Matches the Category property of the retrieved instances.</param>
            <param name="name">Matches the Name property of the retrieved instances.</param>
            <param name="value">Matches the Value property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="customAttributeID">Matches the CustomAttributeID property of the retrieved instances.</param>
            <param name="valueList">The Value property of a retrieved instance will be in this list.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="customAttributeID">Matches the CustomAttributeID property of the retrieved instances.</param>
            <param name="valueList">The Value property of a retrieved instance will be in this list.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.Get(System.Guid,System.String,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <param name="Category">Matches the Category property of the retrieved instances.</param>
            <param name="Name">Matches the Name property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.GetByCategory(System.Guid,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <param name="Category">Matches the Category property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.GetByNSObjectID(System.Guid)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.GetByNSObjectID(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="nsObjectIDList">Matches the NSObjectID properties of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributes.GetByNSObjectID(System.Guid,System.String,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <param name="name">Matches the Name property of the retrieved instances.</param>
            <param name="category">Matches the Category property of the retrieved instances.</param>
            <returns>A collection of CustomAttribute instances.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributes.Name">
            <summary>
            This has been deprecated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributes.Category">
            <summary>
            This has been deprecated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributes.NSObjectID">
            <summary>
            This has been deprecated.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync">
            <summary>
            Has methods to retrieve CustomAttribute instances asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.BeginGet(System.Guid,System.String,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <param name="Category">Matches the Category property of the retrieved instances.</param>
            <param name="Name">Matches the Name property of the retrieved instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.BeginGetByCategory(System.Guid,System.String)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
            <param name="Category">Matches the Category property of the retrieved instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.BeginGetByNSObjectID(System.Guid)">
            <summary>
            Retrieves CustomAttribute instances.
            </summary>
            <param name="NSObjectID">Matches the NSObjectID property of the retrieved instances.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.OnGetResponse">
            <summary>
            Fires when a CustomAttributes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="CustomAttributes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory">
            <summary>
            This class represents the descriptive metadata associated with the CustomAttribute class.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.Save">
            <summary>
            Saves a CustomAttributeCategory instance.
            </summary>
            <returns>The CustomAttributeCategoryID that was created or the CustomAttributeCategoryID corresponding to the extant CustomAttributeCategory.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.SequenceID">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.Hidden">
            <summary>
            Indicates whether information is hidden within certain contexts.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.DisplayAsFilterAttribute">
            <summary>
            Indicates whether the descriptive metadata is selectable within certain filter contexts.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.Name">
            <summary>
            Part of a key to identify the descriptive metadata.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.Category">
            <summary>
            Part of a key to identify the descriptive metadata.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.CustomAttributeCategory.CustomAttributeCategoryID">
            <summary>
            The ID of the descriptive metadata uniquely identified by the Category/Name combination.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributeCategories">
            <summary>
            Has methods to retrieve CustomAttributeCategory instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategories.Get">
            <summary>
            Retrieves CustomAttributeCategory instances.
            </summary>
            <returns>A collection of CustomAttributeCategory instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategories.Get(System.String)">
            <summary>
            Retrieves all CustomAttributeCategory instances for specified category.
            </summary>
            <param name="category">The retrieved instance will have this value for the Category property.</param>
            <returns>CustomAttributeCategory instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategories.Get(System.String,System.String)">
            <summary>
            Retrieves a CustomAttributeCategory instance.
            </summary>
            <param name="category">The retrieved instance will have this value for the Category property.</param>
            <param name="name">The retrieved instance will have this value for the Name property.</param>
            <returns>A CustomAttributeCategory instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategories.Get(System.Boolean)">
            <summary>
            Retrieves CustomAttributeCategory instances.
            </summary>
            <param name="displayAsFilterAttribute">Matches the DisplayAsFilterAttribute property of the retrieved instances.</param>
            <returns>A collection of CustomAttributeCategory instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync">
            <summary>
            Has methods to retrieve CustomAttributeCategory instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.BeginGet">
            <summary>
            Retrieves CustomAttributeCategory instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.BeginGetFilterableAttributes">
            <summary>
            Retrieves CustomAttributeCategory instances where DisplayAsFilterAttribute == true.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.OnGetResponse">
            <summary>
            Fires when a CustomAttributeCategories instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="customAttributeCategories"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.CustomAttributeCategoriesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.QuickLaunchMenuItem.Icon">
            <summary>
            Gets and sets the Image to be displayed.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomItems">
            <summary>
            Gets collection of CustomItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomItemsAsync">
            <summary>
            Gets collection of CustomItem objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomLogos">
            <summary>
            Gets collection of CustomLogo objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomLogosAsync">
            <summary>
            Gets collection of CustomLogo objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomViews">
            <summary>
            Gets collection of CustomView objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomViewsAsync">
            <summary>
            Gets collection of CustomView objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.IPCentricDevice">
            <summary>
            This class has been deprecated.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.SaveByIPAddress(System.String,System.String)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="defaultClassificationType"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.Save(System.String,System.String,System.String,System.String)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="pollingNode"></param>
            <param name="ipAddress"></param>
            <param name="dnsName"></param>
            <param name="physicalAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.Save(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="pollingNode"></param>
            <param name="ipAddress"></param>
            <param name="dnsName"></param>
            <param name="physicalAddress"></param>
            <param name="doNotRemoveDHCPLeaseExpiredIPAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.Save(System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Boolean}@)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="pollingNode"></param>
            <param name="ipAddress"></param>
            <param name="dnsName"></param>
            <param name="physicalAddress"></param>
            <param name="doNotRemoveDHCPLeaseExpiredIPAddress"></param>
            <param name="isNewNode"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.Save(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="pollingNode"></param>
            <param name="ipAddress"></param>
            <param name="dnsName"></param>
            <param name="physicalAddress"></param>
            <param name="doNotRemoveDHCPLeaseExpiredIPAddress"></param>
            <param name="defaultClassificationType"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.IPCentricDevice.Save(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Nullable{System.Boolean}@)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="pollingNode"></param>
            <param name="ipAddress"></param>
            <param name="dnsName"></param>
            <param name="physicalAddress"></param>
            <param name="doNotRemoveDHCPLeaseExpiredIPAddress"></param>
            <param name="defaultClassificationType"></param>
            <param name="isNewNode"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.SNMPDevice">
            <summary>
            This class has been deprecated.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Discovery.SNMPDevice._portToifIndex">
            This will store the mappings from dot1dBasePort (Key)
            to dot1dBasePortIfIndex (Value).
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SNMPDevice.Save(AiMetrix.BusinessObject.Discovery.NSSNMPManager,System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifTableifXTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipAddrTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipRouteTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifStackTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dTpFdbTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dBaseTableEntry})">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="snmpManager"></param>
            <param name="ifTableifXTable"></param>
            <param name="ipAddrTable"></param>
            <param name="ipRouteTable"></param>
            <param name="ifStackTable"></param>
            <param name="dot1dTpFdbTable"></param>
            <param name="dot1dBaseTable"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SNMPDevice.Save(AiMetrix.BusinessObject.Discovery.NSSNMPManager,System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifTableifXTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipAddrTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipRouteTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifStackTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipNetToMediaTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dTpFdbTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dBaseTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipv6ifTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipv6AddrTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipv6RouteTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipNetToMediaTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dStpPortTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dScalarGenInfoTableEntry},AiMetrix.BusinessObject.Discovery.NShsrpGroupTable,System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSipToDNSMap})">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="snmpManager"></param>
            <param name="ifTableifXTable"></param>
            <param name="ipAddrTable"></param>
            <param name="ipRouteTable"></param>
            <param name="ifStackTable"></param>
            <param name="ipNetToMediaTable"></param>
            <param name="dot1dTpFdbTable"></param>
            <param name="dot1dBaseTable"></param>
            <param name="ipv6ifTable"></param>
            <param name="ipv6AddrTable"></param>
            <param name="ipv6RouteTable"></param>
            <param name="ipv6NetToMediaTable"></param>
            <param name="dot1dStpPortTable"></param>
            <param name="dot1dScalarGenInfoTable"></param>
            <param name="hsrpGroupInfoTable"></param>
            <param name="ipToDNSMapList"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SNMPDevice.GetSortedPhysicalAddressList(System.Int32)">
            <summary>
            Returns a SortedList of the first (count) sorted Physical Addresses from the ifTable and ipv6ifTable.
            
            This method 
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SNMPDevice.GetifIndexParentMapping(System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifStackTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSifTableifXTableEntry})">
            <summary>
            Populates and returns a hashtable containing parent/child interface relationships.
            </summary>
            <param name="ifStackTable">Provides the information to determine parent/child relationships.</param>
            <returns>
                A hashtable with child ifIndex as Key and parent ifIndex as Value (where null Value indicates the interface specified 
                by Key does not have another interface as a parent).
            </returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SNMPDevice.Getdot1dTpFdbTableMapping(System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dTpFdbTableEntry},System.Collections.Generic.List{AiMetrix.BusinessObject.Discovery.NSdot1dBaseTableEntry})">
            <summary>
            
            </summary>
            <param name="dot1dTpFdbTable"></param>
            <param name="dot1dBaseTable"></param>
            <returns>An ArrayList of AifIndex_ZPhysAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.SnmpSysBranch.ToOidString(System.Byte[])">
            <summary>
            Returns a string in the form "1.3.6.1" representing
            the bytes passed in, decoded according to X.690 rules.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Discovery.NSipv6ifTableEntry.ipv6IfLowerLayer">
            <summary>
            RFC 2465: "This object identifies the protocol layer over
            which this network interface operates.  If this
            network interface operates over the data-link
            layer, then the value of this object refers to an
            instance of ifIndex [6]. If this network interface
            operates over an IPv4 interface, the value of this
            object refers to an instance of ipAdEntAddr [3].
            If this network interface operates over another
            IPv6 interface, the value of this object refers to
            an instance of ipv6IfIndex.  If this network
            interface is not currently operating over an active
            protocol layer, then the value of this object
            should be set to the OBJECT ID { 0 0 }."
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Discovery.NSipv6ifTableEntry.ipv6IfIdentifier">
            <summary>
            RFC 2465: "The Interface Identifier for this interface that
            is (at least) unique on the link this interface is
            attached to. The Interface Identifier is combined                
            with an address prefix to form an interface address.
            By default, the Interface Identifier is autoconfigured
            according to the rules of the link type this
            interface is attached to."
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Discovery.NSipv6ifTableEntry.ipv6IfIdentifierLength">
            <summary>
            RFC 2465: "The length of the Interface Identifier in bits."
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.ServerNetworkInterfaces">
            <summary>
            Gets collection of Subnet objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.DiscoveryJobs">
            <summary>
            Gets collection of DiscoveryJob objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Discovery.DiscoveryJobs.Get(System.Int32)">
            <summary>
            Retrieves the Discovery Jobs for the Network Domain.
            </summary>
            <param name="networkDomainID">The NetworkDomainID.</param>
            <returns>Discovery Jobs.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.DiscoveryJobsAsync">
            <summary>
            Gets collection of DiscoveryJob objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.DiscoveryRequests">
            <summary>
            Gets collection of DiscoveryRequest objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Discovery.DiscoveryRequestsAsync">
            <summary>
            Gets collection of DiscoveryRequest objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.BackgroundImages">
            <summary>
            Gets collection of BackgroundImages objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.BackgroundImages.SetMaxUploadSize">
            <summary>
            Need to setMaxUploadSize on server. If we are in remoting mode the 
            web.config will be the default config and contain the necessary value.
            If we are in direct database mode the value is unimportant.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.BackgroundImages.MaxUploadSize">
            <summary>
            maxRequestLength
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.BackgroundImagesAsync">
            <summary>
            Gets collection of BackgroundImage objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.EventServiceSettings">
            <summary>
            Gets collection of EventServiceSetting objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.EventServiceSettingsAsync">
            <summary>
            Gets collection of EventServiceSetting objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ExportImport">
            <summary>
            An instance of this is what gets saved to file for the purpose of
            exporting data from one system and importing it into another system.
            Further, this class provides the static methods for the processes of
            exporting and importing.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.ExportDirective">
            <summary>
            Specifies what should be exported.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.FeatureLicense.ClearValues">
            <summary>
            Clear all values.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.ErrorMessage">
            <summary>
            Get/Set DaysRemaining
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.DaysRemaining">
            <summary>
            Get/Set DaysRemaining
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.StatusOK">
            <summary>
            Get/Set StatusOK
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.LicensesRemaining">
            <summary>
            Get/Set LicensesRemaining
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.LicensesUsed">
            <summary>
            Get/Set LicensesUsed
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.TotalLicences">
            <summary>
            Get/Set TotalLicences
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.FeatureName">
            <summary>
            Get/Set FeatureName
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.DisplayName">
            <summary>
            Get/Set Display Name
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.FeatureLicense.Maxed">
            <summary>
            Get/Set IsMaxed 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.FeatureLicenses">
            <summary>
            Gets collection of FeatureLicense objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.FeatureLicenses.CompareStrings(System.String,System.String)">
            <summary>
            compare two strings
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.FeatureLicenses.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            compare two byte arrays
            </summary>
            <param name="array1">first byte array</param>
            <param name="array2">second byte array</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.FeatureLicenses.GetDaysRemaining(System.String)">
            <summary>
            Get days remaining from current date.
            </summary>
            <param name="expirationDate"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.FeatureLicenses.GetClientSessions(AiMetrix.BusinessObject.Enums.SessionType)">
            <summary>
            Get total client sessions
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.FeatureLicensesAsync">
            <summary>
            Gets collection of FeatureLicense objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.LicenseObject.SetIsLicensed(System.Guid,System.Boolean)">
            <summary>
            Only administrators are authorized to manage License counts
            </summary>
            <param name="nsObjectID"></param>
            <param name="isLicensed"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.LicenseObject.NSObjectID">
            <summary>
            Get/Set NSObjectID
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.LicenseObject.DisplayName">
            <summary>
            Get/Set Display Name
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.LicenseObject.ClassificationType">
            <summary>
            Get/Set ClassificationType
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.LicenseObject.IsLicensed">
            <summary>
            Get/Set IsLicensed
            Only objects with IsManaged set to true are counted as licensed objects
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.LicenseObjects">
            <summary>
            Gets collection of License objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.LicenseObjectsAsync">
            <summary>
            Gets collection of License objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.SaveAs(System.String)">
            <summary>
            Save the current map as a new map
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObject(System.Int32,System.Guid)">
            <summary>
            Add object of specified type to user defined map.
            </summary>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObject(System.Int32,System.Guid,System.Boolean)">
            <summary>
            Add object of specified type to user defined map.
            </summary>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
            <param name="includeDescendants">automatically include all descendants of this object</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObjectsChildren(System.Int32,System.Guid)">
            <summary>
            Add all of the specified object's descendants that are the same object type.
            </summary>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObject(System.Guid,System.Int32,System.Guid)">
            <summary>
            Add object of specified type to user defined map.
            </summary>
            <param name="mapId">map to contain new object</param>
            <param name="containmentTypeId">object type to be added</param>
            <param name="objectId">object id to be added</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObject(System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Add object of specified type to user defined map.
            </summary>
            <param name="mapId"></param>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
            <param name="includeDescendants">automatically include all descendants of this object</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObjectsChildren(System.Guid,System.Int32,System.Guid)">
            <summary>
            Add all of the specified object's descendants.
            </summary>
            <param name="mapId"></param>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddNSObjects(System.Guid,System.Collections.Generic.List{System.Guid})">
            <summary>
            Adds NSObjects to a Map.
            </summary>
            <param name="mapID">The ID for the Map.</param>
            <param name="nsObjects">The list of NSObjectIDs to add to the Map.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.AddObject(System.Guid,System.Int32,System.Guid,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Currently used by MapExportImports.
            </summary>
            <param name="mapId"></param>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
            <param name="securityUserID"></param>
            <param name="includeDescendants"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.RemoveObject(System.Int32,System.Guid,System.Boolean)">
            <summary>
            Remove an object of specified type from user defined map
            if objectOnly is true, descendants will remain on map.
            </summary>
            <param name="containmentTypeId"></param>
            <param name="objectId"></param>
            <param name="objectOnly"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.RemoveObject(System.Guid,System.Int32,System.Guid,System.Boolean)">
            <summary>
            Remove an object of specified type from user defined map
            if objectOnly is true, descendants will remain on map.
            if object
            </summary>
            <param name="mapId">map to remove object from</param>
            <param name="containmentTypeId">object type to be removed</param>
            <param name="objectId">object id to be removed</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Map.GetJumpToMapId(System.Int32,System.Guid)">
            <summary>
            Get the builtin mapId for the specified object
            Used primarily for default jumpTo functionality.
            </summary>
            <param name="containmentTypeId"></param>
            <param name="containerId"></param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Map.MapScopeType">
            <summary>
            This will always be public except for AssetGroup maps that belong to group or user scoped assetGroups
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Maps">
            <summary>
            Gets collection of Map objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.Get">
            <summary>
            Get all maps that should be displayed at the top level of the Map tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetSubnetMaps">
            <summary>
            Get all topLevel subnet maps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetTreeMapsOnly">
            <summary>
            Get all maps that should be displayed at the top level of the Map tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetJumpToMapsByMapId(System.Guid)">
            <summary>
            Get all user specified jump to maps for specified map
            </summary>
            <param name="mapId">mapId of the jumptoMaps to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetJumpToMapsForMapObject(System.Guid,System.Int32,System.Guid)">
            <summary>
            Get all user specified jumpToMaps for specified object and specified map.
            </summary>
            <param name="mapId">Id of map that contains the jumptomaps and object</param>
            <param name="mapObjectTypeId">acceptable values see enums containmentType also acceptable is value of 3 for Edges, mapObjectId for link is EdgeID from Edge table</param>
            <param name="mapObjectId">ObjectId corresponds to containmentType.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetByMapId(System.Guid)">
            <summary>
            Get a map.
            </summary>
            <param name="mapId">mapId of the map to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetBySubnetId(System.Guid)">
            <summary>
            Get a builtin map for a specified subnet.
            </summary>
            <param name="subnetId">subnet Id of the map to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetByAssetGroupId(System.Guid)">
            <summary>
            Get a builtin map for a specfied asset group. 
            </summary>
            <param name="assetGroupId">asset group id of the map to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetMapsForObject(System.Int32,AiMetrix.Common.DatabaseObjectID)">
            <summary>
            Get a list of maps that contain specified object
            </summary>
            <param name="containmentTypeID">object database type</param>
            <param name="containerID">database id of object</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Maps.GetMapsForObject(System.Object,System.Int32,AiMetrix.Common.DatabaseObjectID)">
            <summary>
            Get a list of maps that contain specified object
            </summary>
            <param name="sender"></param>
            <param name="containmentTypeID"></param>
            <param name="containerID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.MapsAsync">
            <summary>
            Gets collection of Map objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.MapsAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.JumpToMap.Save(System.Guid,System.Int32,System.Guid,System.Guid)">
            <summary>
            Add a jumpToMap definition
            </summary>
            <param name="mapID"></param>
            <param name="mapObjectTypeId">acceptable values see enums containmentType also acceptable is value of 3 for Edge/link, mapObjectId for Edge/link is EdgeID from Edge table</param>
            <param name="mapObjectID"></param>
            <param name="jumpToMapID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.JumpToMap.Save">
            <summary>
            Add a jumpToMap definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.JumpToMap.Delete">
            <summary>
            Delete this jumptomap definition
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.JumpToMap.Delete(System.Guid,System.Int32,System.Guid,System.Guid)">
            <summary>
            Delete a jumptomap definition
            </summary>
            <param name="mapID"></param>
            <param name="mapObjectTypeId">acceptable values see enums containmentType also acceptable is value of 3 for Edge/link, mapObjectId for Edge/link is EdgeID from Edge table or MapEdge API call</param>
            <param name="mapObjectID"></param>
            <param name="jumpToMapID"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Link">
            <summary>
            Has Link properties and has methods to update Link information.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.SetOwner(System.Guid,System.Guid)">
            <summary>
            Particularly for user-defined links, this can specify a subsystem ownership.
            </summary>
            <param name="linkID">Identifies the link.</param>
            <param name="ownerID">Identifies the owner.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.SaveUserDefinedBulk(System.Collections.Generic.List{AiMetrix.BusinessObject.Inventory.Link},System.Boolean)">
            <summary>
            Saves user-defined Link information.  For each Link in links, if it already exists, its name gets updated, and, if it does not already exist, it gets created.  Note that existence is determined by an exact examination of the A and Z positions (i.e., e.g., NSObjectID_A is only searched for in the A position).
            </summary>
            <param name="links">The user-defined Links to save.  The following properties are used from the Link instances: NSObjectID_A, NSObjectID_Z, and LinkName.</param>
            <param name="saveRecordEvenWithoutChange">When true, an existing record will be updated even when the new name is the same as the old name.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.CreateUserDefinedLink(System.Guid,System.Guid,System.String)">
            <summary>
            Creates a user-defined Link.
            </summary>
            <param name="nsObjectID_A">The ID of the NSObject on the A side of the Link.</param>
            <param name="nsObjectID_Z">The ID of the NSObject on the Z side of the Link.</param>
            <param name="linkName">The name for the Link.</param>
            <returns>A representation of the creation.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.CreateUserDefinedLink(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Creates a user-defined Link.
            </summary>
            <param name="linkID">The ID for the Link.</param>
            <param name="nsObjectID_A">The ID of the NSObject on the A side of the Link.</param>
            <param name="nsObjectID_Z">The ID of the NSObject on the Z side of the Link.</param>
            <param name="linkName">The name for the Link.</param>
            <returns>A representation of the creation.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Rename(System.Guid,System.String)">
            <summary>
            Renames a Link.
            </summary>
            <param name="linkID">The ID of the Link.</param>
            <param name="name">The new name for the Link.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Save">
            <summary>
            Saves a Link (ignoring the LinkID property of the instance to save).
            </summary>
            <returns>A representation of the save.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Save(System.Guid,System.Guid)">
            <summary>
            Saves a Link as LinkType == Enums.LinkTypes.Router.
            </summary>
            <param name="nsObjectID_A">The ID of the NSObject on the A side of the Link.</param>
            <param name="nsObjectID_Z">The ID of the NSObject on the Z side of the Link.</param>
            <returns>A representation of the save.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Save(System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.LinkTypes)">
            <summary>
            Saves a Link.
            </summary>
            <param name="nsObjectID_A">The ID of the NSObject on the A side of the Link.</param>
            <param name="nsObjectID_Z">The ID of the NSObject on the Z side of the Link.</param>
            <param name="linkType">Specifies the LinkType for the Link.</param>
            <returns>A representation of the save.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Save(System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.LinkTypes,System.Boolean)">
            <summary>
            Saves a Link.
            </summary>
            <param name="nsObjectID_A">The ID of the NSObject on the A side of the Link.</param>
            <param name="nsObjectID_Z">The ID of the NSObject on the Z side of the Link.</param>
            <param name="linkType">Specifies the LinkType for the Link.</param>
            <param name="isLocked">Specifies the value of an internally-used Link property.</param>
            <returns>A representation of the save.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Save(System.Guid,System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="nsObjectID_A"></param>
            <param name="physicalAddress_Z"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Delete">
            <summary>
            Deletes a Link.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.Delete(System.Guid)">
            <summary>
            Deletes a Link.
            </summary>
            <param name="linkID">The ID of the Link to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.AbsorbCommonLinks(System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.LinkTypes)">
            <summary>
            Deletes any Link for which the forgoer has a similar position as the absorber.  For example: if the absorber has Link X/absorber (A/Z), then any occurrence of X/forgoer or forgoer/X will be deleted.
            </summary>
            <param name="nsObjectID_Absorber">The absorber of Links.</param>
            <param name="nsObjectID_Forgoer">The forgoer of Links.</param>
            <param name="linkType">Specifies LinkType for the Links that can be absorded.</param>
            <returns>Ignore.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.AbsorbCommonLinks(System.Guid,System.Guid)">
            <summary>
            Deletes any Link for which the forgoer has a similar position as the absorber.  For example: if the absorber has Link X/absorber (A/Z), then any occurrence of X/forgoer or forgoer/X will be deleted.
            </summary>
            <param name="nsObjectID_Absorber">The absorber of Links.</param>
            <param name="nsObjectID_Forgoer">The forgoer of Links.</param>
            <returns>Ignore.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.RemoveCommonAncestralLinks(System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.LinkTypes)">
            <summary>
            Deletes Links where one side is an ancestor of one of the logic anchors and the other side is an ancestor of the other logic anchor.  Also deletes Links where one side is an ancestor of one of the logic anchors and the other side is the other logic anchor.
            </summary>
            <param name="nsObjectID_A">A logic anchor.</param>
            <param name="nsObjectID_Z">A logic anchor.</param>
            <param name="linkType">Specifies LinkType for the Links that can be removed.</param>
            <returns>Ignore.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.RemoveCommonAncestralLinks(System.Guid,System.Guid)">
            <summary>
            Deletes Links where one side is an ancestor of one of the logic anchors and the other side is an ancestor of the other logic anchor.  Also deletes Links where one side is an ancestor of one of the logic anchors and the other side is the other logic anchor.
            </summary>
            <param name="nsObjectID_A">A logic anchor.</param>
            <param name="nsObjectID_Z">A logic anchor.</param>
            <returns>Ignore.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Link.ToStringDebug">
            <summary>
            Returns display information.
            </summary>
            <returns>Display information.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.LinkID">
            <summary>
            Uniquely identifies a Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.LinkType">
            <summary>
            The Link type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.NSObjectID_A">
            <summary>
            The ID of the NSObject on the A side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.NSObjectID_Z">
            <summary>
            The ID of the NSObject on the Z side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.LinkName">
            <summary>
            The name for the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.ParentNSObjectID_A">
            <summary>
            The ID of the parent NSObject of the ID of the NSObject on the A side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.ParentNSObjectID_Z">
            <summary>
            The ID of the parent NSObject of the ID of the NSObject on the Z side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.NodePrefix_A">
            <summary>
            The display name of the top-level NSObject of the NSObject on the A side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.DisplayName_A">
            <summary>
            The display name of the NSObject on the A side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.NodePrefix_Z">
            <summary>
            The display name of the top-level NSObject of the NSObject on the Z side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.DisplayName_Z">
            <summary>
            The display name of the NSObject on the Z side of the Link.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.DisplayName">
            <summary>
            DisplayName is set the first time it is accessed.  Upon the first access, if LinkName is non-empty, then DisplayName == LinkName; otherwise, upon the first access, DisplayName is a default value.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.IgnoreStoredProcedureRetVal">
            <summary>
            Indicates whether, during certain scenarios, the return value of a stored procedure will be ignored.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Link.OwnerID">
            <summary>
            Particularly for user-defined links, this can specify a subsystem ownership.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.MapEdges">
            <summary>
            Gets collection of MapEdge objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.MapEdgesAsync">
            <summary>
            Gets collection of MapEdge objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.MapEdgesAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.MapExportImport">
            <summary>
            An instance of this class contains information 
            pertaining to a Map.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.MapExportImport.MapMapDefs">
            <summary>
            Each instance in the collection is populated with the data from 
            both the Map table and the MapDef table.  An instance of this 
            collection is all the MapDef records for a given Map record,
            unless there are no MapDef records (in which case there is only
            one item in the collection and only the Map properties are 
            populated).
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.MapExportImport.nsObjects">
            <summary>
            For each NSObject in the map, its Guid is in this list.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.MapExportImport.NSIPAddressesList">
            <summary>
            For each NSObject in the map, one NSIPAddresses instance is in this list.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.MapExportImports._subnets">
            <summary>
            All the subnets in the source database.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.MapExportImports._assetGroups">
            <summary>
            All the asset groups in the source database.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.MapExportImports._links">
            <summary>
            All the user-defined links (LinkTypeID == 3) in the source database.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.MapExportImports.Export">
            <summary>
            Gets map data from the database and returns an 
            instance of MapExportImports.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.MapExportImports.Import(AiMetrix.BusinessObject.MapExportImports)">
            <summary>
            Puts the MapExportImports data into the database.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.NetworkVitals">
            <summary>
            Gets collection of NetworkVital objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.NetworkVitalsAsync">
            <summary>
            Gets collection of NetworkVital objects asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSEvent.Send">
            <summary>
            Send event to the well-known msmq event queue (nsmq_eventservice) on the local machine for assembly execution.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSEvent.Send(System.String,System.String,System.String)">
            <summary>
            Send event to the specified msmq queue path for assembly execution.  Send error response to error response queue specified for error assembly execution.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSEvent.Send(System.String)">
            <summary>
            Send event to the specified msmq queue path for assembly execution.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSEvent.SendAck(System.String)">
            <summary>
            Send an acknowledgment to the specified msmq queue path to indicate.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.NSEvent.Assembly">
            <summary>
            Assembly name that is executed for this event.  (Example:  CustomAssembly or CustomAssembly.dll)
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.NSEvent.Data">
            <summary>
            Data that is passed into assembly when it is executed.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.Send(System.Guid)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.Send(System.Guid,AiMetrix.BusinessObject.Events.RemoteNSEventSendOptions)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            Options:
               Binary serialization
               Use secondary host instead of primary host
               Both
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.SendAndWait(System.Guid)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            Wait for and then return the response sent back from executed assembly.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.SendAndWait(System.Guid,AiMetrix.BusinessObject.Events.RemoteNSEventSendOptions)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            Wait for and then return the response sent back from executed assembly.
            Options:
               Binary serialization
               Use secondary host instead of primary host
               Both
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.SendAndWait(System.Guid,System.Int32)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            Wait for and then return the response sent back from executed assembly.
            Timeout for response can be between 1 and 3600000 milliseconds.
            
            *** Warning ***
            Excessive wait timeout periods can severely degrade server performance.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RemoteNSEvent.SendAndWait(System.Guid,System.Int32,AiMetrix.BusinessObject.Events.RemoteNSEventSendOptions)">
            <summary>
            Send event from portal server to the specified NSNodeID for assembly execution.
            Wait for and then return the response sent back from executed assembly.
            Timeout for response can be between 1 and 3600000 milliseconds.
            Options:
               Binary serialization
               Use secondary host instead of primary host
               Both
            
            *** Warning ***
            Excessive wait timeout periods can severely degrade server performance.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.RemoteNSEvent.Assembly">
            <summary>
            Assembly name that is executed for this event.  (Example:  CustomAssembly or CustomAssembly.dll)
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.RemoteNSEvent.Data">
            <summary>
            Data that is passed into assembly when it is executed.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.RemoteNSEventAsync.Assembly">
            <summary>
            Assembly name that is executed for this event.  (Example:  CustomAssembly or CustomAssembly.dll)
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.RemoteNSEventAsync.Data">
            <summary>
            Data that is passed into assembly when it is executed.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeServices">
            <summary>
            Gets collection of NSNodeService objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeServicesAsync">
            <summary>
            Gets collection of NSNodeService objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ObjectStates">
            <summary>
            Gets collection of ObjectState objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.ObjectStatesAsync">
            <summary>
            Gets collection of ObjectState objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.ObjectStatesAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.Menus.RootMenu">
            <summary>
            Summary description for MenuRoot
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Menus.MenuItem.Icon">
            <summary>
            Gets and sets the Image to be displayed.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Menus.MenuItem.Text">
            <summary>
            Gets and sets the display text.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReportDataSet.ReportDataSetComparer">
            <summary>
            Used for distributed reports
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReportDataSets">
            <summary>
            Gets collection of ReportDataSet objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.ReportDataSets.Get(System.Collections.Generic.List{System.String},AiMetrix.BusinessObject.NSSqlParameters)">
            <summary>
            Use information stored in report file to retrieve reportdata
            All storedProcedures in dataSourceNames must accept the same parameters.
            </summary>
            <param name="dataSourceNames">must be same as StoredProcedure Name</param>
            <param name="sqlParams"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReportDataSetAsync">
            <summary>
            Gets ReportDataSet object asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReportDataSetsAsync">
            <summary>
            Gets collection of ReportDataSet objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.Reports">
            <summary>
            Gets collection of Report objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReportsAsync">
            <summary>
            Gets collection of Report objects asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.ImpersonateUser(AiMetrix.BusinessObject.Security.BusinessIdentity.Request,System.Security.Principal.WindowsImpersonationContext@,System.IntPtr@,System.IntPtr@)">
            <summary>
            This method is used to impersonate a user on the Server side if we are using remoting.
            </summary>
            <param name="crit"></param>
            <param name="impersonatedUser"></param>
            <param name="tokenHandle"></param>
            <param name="dupeTokenHandle"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.CreateAuditLog(System.Data.SqlClient.SqlConnection,AiMetrix.BusinessObject.Security.BusinessIdentity.Request)">
            <summary>
            record every attempt at logon in the SecurityAudit table
            </summary>
            <param name="cn"></param>
            <param name="req"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.CreateSession(System.Data.SqlClient.SqlConnection)">
            <summary>
            User is authenticated and a session is available
            add it to database.
            </summary>
            <param name="cn"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.SetUsersSecurityGroup(System.Data.SqlClient.SqlConnection,System.Int32)">
            <summary>
            Get the group independently while in the server side code.
            </summary>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.CreateNewSecurityUserDB(System.Data.SqlClient.SqlConnection,AiMetrix.BusinessObject.Security.BusinessIdentity.Request,System.Int32)">
            <summary>
            If a windows group is a valid securitygroup, users are not required
            to exist in system. They will be added on the first login.
            </summary>
            <param name="cn"></param>
            <param name="req"></param>
            <param name="groupId">Valid windows SecurityGroup that user is a member of.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.UpdateSecurityUserGroupDB(System.Data.SqlClient.SqlConnection,AiMetrix.BusinessObject.Security.BusinessIdentity.Request)">
            <summary>
            Windows user group has changed update the record accordingly
            </summary>
            <param name="cn"></param>
            <param name="req"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.LockoutSecurityUserAccountDB(System.Data.SqlClient.SqlConnection,AiMetrix.BusinessObject.Security.BusinessIdentity.Request)">
            <summary>
            Locout securityUser account, user has exceeded lockout threshold
            this user is not authenticated, no information other than what 
            is included in the LoginRequest object is available
            </summary>
            <param name="cn"></param>
            <param name="req"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.EvaluateSessionStatus(System.Data.SqlClient.SqlConnection)">
            <summary>
            Evaluate whether a session is available and update sessionStatus as required
            </summary>
            <param name="cn"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.GetLicenseStatus(System.Data.SqlClient.SqlConnection,System.Int32,AiMetrix.BusinessObject.Enums.SessionType)">
             <summary>
            Is a session available.
             </summary>
             <param name="crit"></param>
             <param name="row"></param>
             <returns>One of the following status: Valid, InvalidLicense, LicenseExceeded, InvalidMAC, LicenseExpired</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.ValidUserLoginHash(Nsda2.Data.SafeDataReader,System.Int32@,System.String@,System.String@,System.Int32@)">
            <summary>
            compare computed username, salt, groupID hash to validate value
            if they it is correct then we have authenticated the user
            </summary>
            <param name="crit"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.ValidWindowsGroup(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            compare groupName vs. Windows groups user belongs to
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.GetUsersWindowsGroups(AiMetrix.BusinessObject.Security.BusinessIdentity.Request)">
            <summary>
            Get all the Windows groups for this user.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.GetNTGroupsFromDB(System.Data.SqlClient.SqlConnection)">
            <summary>
            Get list of all valid windows groups currently in database
            </summary>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessIdentity.ClearValues">
            <summary>
            Something went wrong with login make sure that any previously set values are cleared
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.AuthenticationType">
            <summary>
            Mirrors the AuthenticationType property for BusinessIdentity.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.Name">
            <summary>
            Mirrors the Name property for BusinessIdentity.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.UserID">
            <summary>
            UserID
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.DisplayName">
            <summary>
            DisplayName for display purposes
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.FirstName">
            <summary>
            FirstName for display purposes
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.BusinessIdentity.LastName">
            <summary>
            LastName for display purposes
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ServiceIdentity.ValidSession(Nsda2.Data.SafeDataReader,System.String)">
            <summary>
            compare req.password to returned password hash
            compare computed username, salt, groupID hash to validate value
            if they are both correct then we have authenticated the user
            </summary>
            <param name="crit"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ServiceIdentity.CompareStrings(System.String,System.String)">
            <summary>
            compare two strings byte by byte
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ServiceIdentity.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            compare two byte arrays
            </summary>
            <param name="array1">first byte array</param>
            <param name="array2">second byte array</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ServiceIdentity.ClearValues">
            <summary>
            Something went wrong with login make sure that any previously set values are cleared
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.ServicePollerTypes">
            <summary>
            Gets collection of ServicePollerType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.ServicePollerTypesAsync">
            <summary>
            Gets collection of ServicePollerType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SNMPMIBInfoAsync">
            <summary>
            Gets SNMPMIBInfo object asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.SNMPMIB_Const">
            
             SNMP MIB 
            
        </member>
        <member name="T:AiMetrix.BusinessObject.SNMPMIBIncompleteImports_Const">
            
            SNMP MIB Incomplete Import
            
        </member>
        <member name="T:AiMetrix.BusinessObject.SNMPMergedMIB_Const">
            
            SNMP Merged MIB
            
        </member>
        <member name="T:AiMetrix.BusinessObject.SNMPMergedMIBSource_Const">
            
            SNMP Merged MIB Source
            
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.DiscoveryStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.DiscoveryStatusMessagesAsync">
            <summary>
            Gets collection of DiscoveryStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.DopplerColors">
            <summary>
            Gets collection of DopplerColor objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.DopplerColorsAsync">
            <summary>
            Gets collection of DopplerColor objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Enums.DisplayTextType">
            <summary>
            Determines the value of the DisplayText
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Enums.LinkTypes">
            <summary>
            The supported Link types.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.UNKNOWN">
            <summary>
            LinkType is not set or invalid.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.Router">
            <summary>
            Data link Layer 2 which includes Router.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.Switch">
            <summary>
            Data link Layer 3 which includes Switch.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.UserDefined">
            <summary>
            UserDefined
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.Dash">
            <summary>
            Link that is visually displayed as a dashed line.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.Unidirectional">
            <summary>
            Link that is visually displayed with an arrow at one end.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.Bidirectional">
            <summary>
            Link that is visually displayed with an arrow at both ends.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.UnidirectionalWave">
            <summary>
            Link that is visually displayed as a wave at one end.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.LinkTypes.BidirectionalWave">
            <summary>
            Link that is visually displayed as a wave at both ends.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Enums.SeededAssetGroupTypes">
            <summary>
            lookup for AssetGroupTypeNameKey to AssetGroupTypeID for seeded types
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Enums.SeededClassificationTypes">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Enums.AlarmSeverity">
            <summary>
            Alarm enums currently reside in both the Alarm class and here, many applications
            use the Alarm enums and I didn't want to remove them until everything is upgraded to 
            use these enums.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.dopplerVUE_Rich">
            <summary>
            dopplerVUE Rich Client (aka SmartClient), our original client
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.dopplerVUE_Thin">
            <summary>
            dopplerVUE Thin Client, HTML, JavaScript AJAX
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.NeuralStar_Rich">
            <summary>
            NeuralStar Rich Client
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.NeuralStar_Thin">
            <summary>
            NeuralStar Thin Client, HTML, JavaScript AJAX
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.NeuralStarAPI">
            <summary>
            Custom Client using API.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Enums.SessionType.ServiceManager_Rich">
            <summary>
            ServiceManager Rich Client.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.NSException.GetBaseExceptionMessage(System.Exception)">
            <summary>
            Get the exception message that caused the DataPortalException.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.NSException.GetBaseExceptionMessage">
            <summary>
            Get the exception message that caused the DataPortalException.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.NameValueListType">
            <summary>
            Current types that read-only name/value pair list can be used to obtain
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.GenericNameValuePair">
            <summary>
            Name value pair item to populate GenericList   
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.GenericList">
            <summary>
            Get name/value pair of items, useful for binding to drop down lists etc.
            Currently available for the following:
            SecurityGroups, AlarmFields, ContainmentTypes, CollectorTypes, Routers
            New items can be added on request.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.GenericList.Get(AiMetrix.BusinessObject.NameValueListType)">
            <summary>
            Get name/value pair of current items
            Sample Usage
               foreach (GenericNameValuePair item in list)
               {      
                   Debug.WriteLine(item.Value);
                   Debug.WriteLine(item.Key);        
               }
            Sample Databinding Usage - Use when binding NameValueList to comboBox, etc.
            	this.cboGroups.DataSource =  list;
            	this.cboGroups.DisplayMember = "Value";
            	this.cboGroups.ValueMember = "Key";
            </summary>
            <returns>GenericList</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.GenericList.GetInterfaces(System.Guid)">
            <summary>
            Get the NSObjectIDs and DisplayNames of all interfaces of a Node.
            </summary>
            <param name="nodeNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.GenericList.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="Criteria">empty criteria</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.GenericListAsync">
            <summary>
            GenericList asychronous methods.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.NSNameValueList">
            <summary>
            Name/value pair list no direct data access used by Rules class as a container.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.AvgIntervalList">
            <summary>
            Average interval Name/value pair list used by device, server, interface, and device list views.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.ObjectItem.op_Equality(AiMetrix.BusinessObject.ObjectItem,AiMetrix.BusinessObject.ObjectItem)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.ObjectItem.op_Inequality(AiMetrix.BusinessObject.ObjectItem,AiMetrix.BusinessObject.ObjectItem)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObject">
            <summary>
            Specialized business object used by Inventory tree and graph for displaying objects
            and the properties that are of specific interest to gui user.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObject.Save">
            <summary>
            Save will currently update displayName, ClassificationType and Latitude and Longitude
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObject.ResetScrubInventoryNSObject">
            <summary>
            Resets the RowVersion for the Scrub_Inventory_NSObject Task.  This causes the scrub to start from its beginning.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.DisplayText">
            <summary>
            The actual text to be displayed in the gui the  based on the Enums.DisplayTextType
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.DisplayName">
            <summary>
            The DisplayName field from NSObject table DisplayName
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.IPAddress">
            <summary>
            The first IPAddress associated with this object
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.DnsName">
            <summary>
            The first DnsName associated with this object
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.ObjectType">
            <summary> 
            NSObject, Subnet, Link, Containment, etc.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObject.ClassificationTypeID">
            <summary>
            Used to determine the correct Icon for display
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObjects">
            <summary>
            Gets collection of InventoryObject objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.#ctor(AiMetrix.BusinessObject.Inventory.InventoryObject)">
            <summary>
            Can be used to create classification folders in inventory tree, get the corresponding icons in maps, etc.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.Get(System.Int32,System.Guid)">
            <summary>
            Get inventory object with specified containmentTypeid and id, 
            assumes displayText property will contain DisplayName
            </summary>
            <param name="containmentTypeId">containmentType of object to retrieve</param>
            <param name="id">databaseId of object to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.Get(System.Object,System.Int32,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get inventory object with specified containmentTypeId and id.
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="containmentTypeId">containmentType of object to retrieve</param>
            <param name="id">databaseId of object to retrieve</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetPerformance(System.Object)">
            <summary>
            Get all objects that have performance data, 
            assumes displayText property will contain DisplayName.
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetPerformance(System.Object,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get all objects that have performance data.
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetTopLevel(System.Int32,System.Boolean)">
            <summary>
            Get TopLevel objects of containmentType, 
            assumes displayText property will contain DisplayName.
            </summary>
            <param name="containmentTypeId">Type of objects to return</param>
            <param name="containerOnly">signifies that all objects returned should be of same containmentType</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetTopLevel(System.Int32,System.Boolean,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get TopLevel objects of containmentType.
            </summary>
            <param name="containmentTypeId">Type of objects to return</param>
            <param name="containerOnly">signifies that all objects returned should be of same containmentType</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetTopLevel(System.Object,System.Int32,System.Boolean,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get TopLevel objects of containmentType.
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="containmentTypeId">Type of objects to return</param>
            <param name="containerOnly"></param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetChildren(System.Int32,System.Guid)">
            <summary>
            Get Children based on containmentType (e.g. NsObject, Subnet, AssetGroup etc.) and Id (2 part key)
            Will return child objects of all containment types, 
            assumes displayText property will contain DisplayName.
            </summary>
            <param name="containmentTypeId">Type of objects to return</param>
            <param name="id">parentId of children to return</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetChildren(System.Int32,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get Children based on containmentType (e.g. NsObject, Subnet, AssetGroup etc.) and Id (2 part key)
            Will return child objects of all containment types.
            </summary>
            <param name="containmentTypeId">Type of objects to return</param>
            <param name="id">databaseId for containmentType(e.g. nsObjectId, subnetId, assetGroupId)</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetChildren(System.Object,System.Int32,System.Guid,System.Boolean,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get Children based on containmentType (e.g. NsObject, Subnet, AssetGroup etc.) and Id (2 part key)
            Container only will return just the child objects of the same containment type as the parent.
            </summary>
            <param name="containmentTypeId">determines type of Id</param>
            <param name="id">databaseId for containmentType(e.g. nsObjectId, subnetId, assetGroupId)</param>
            <param name="containerOnly">If containmentType is subnet and ContainerOnly then only return child subnets of this Id</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap(System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get all inventory contained in map
            </summary>
            <param name="mapID">Id of map</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap(System.Object,System.Byte[],System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get all inventory contained in map
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="rowVersion">used to insure that items are retrieved only once</param>
            <param name="mapID">Id of map</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByAssetGroup(System.Guid)">
            <summary>
            Get InventoryObjects representing objects of all types directly contained by this assetGroup,  
            assumes displayText property will contain DisplayName.
            </summary>
            <param name="assetGroupID">Id of AssetGroup to return.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByAssetGroup(System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get InventoryObjects representing objects of all types directly contained by this assetGroup 
            </summary>
            <param name="assetGroupID">Id of AssetGroup to return.</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByAssetGroup(System.Object,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get InventoryObjects representing objects of all types directly contained by this assetGroup 
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="assetGroupID">Id of AssetGroup to return.</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByNSObject(System.Guid)">
            <summary>
            Get InventoryObject for passed in NSobjectId, 
            assumes displayText property will contain DisplayName.
            </summary>
            <param name="nsObjectID">nsObjectId to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByNSObject(System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get InventoryObject for passed in NSobjectId
            </summary>
            <param name="nsObjectID">nsObjectId to retrieve</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByNSObject(System.Object,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get InventoryObject for passed in NSobjectId
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="nsObjectID">nsObjectId to retrieve</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectedNSObjects(System.Guid)">
            <summary>
            Get all top level NSObjects that are connected to this nsObject, 
            assumes DisplayText property will contain DisplayName.
            </summary>
            <param name="nsObjectID">Id of NSobject to get current connections for.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectedNSObjects(System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get all top level NSobjects that are connected to this nsObject
            </summary>
            <param name="nsObjectID">Id of NSobject to get current connections for.</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectedNSObjects(System.Object,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get all top level NSobjects that are connected to this nsObject
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="nsObjectID">Id of NSobject to get current connections for.</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectedNSObjects(System.Object,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType,System.Boolean)">
            <summary>
            Get all  NSobjects that are connected to this nsObject
            </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
            <param name="nsObjectID">Id of NSobject to get current connections for.</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <param name="firstLevelOnly">direct connections only</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectingNSObjects(System.Guid,System.Guid)">
            <summary>
            Get collection of all nsObjects that exist between 2 specified nsObjects
            </summary>
            <param name="nsObjectID_1">end point 1</param>
            <param name="nsObjectID_2">end point 2</param>
            <returns>Inventory objects between given objects</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectingNSObjects(System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get collection of all nsObjects that exist between 2 specified nsObjects
            </summary>
            <param name="nsObjectID_1">end point 1</param>
            <param name="nsObjectID_2">end point 2</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns>Inventory objects between given objects</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetConnectingNSObjects(System.Object,System.Guid,System.Guid,AiMetrix.BusinessObject.Enums.DisplayTextType)">
             <summary>
             Get collection of all nsObjects that exist between 2 specified nsObjects
             </summary>
            <param name="sender">pass through for asynchronous calls, can be null</param>
             <param name="nsObjectID_1">end point 1</param>
             <param name="nsObjectID_2">end point 2</param>
             <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
             <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetUpdatedObjects(System.Object,System.Byte[],System.Boolean,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get object that have been updated since the RowVersion change
            </summary>
            <param name="sender"></param>
            <param name="rowVersion"></param>
            <param name="GroupBy">containmentTypeID that Display is currently groupedBy</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetUpdatedObjects(System.Object,System.Byte[],System.Int32,System.Boolean,AiMetrix.BusinessObject.Enums.DisplayTextType)">
            <summary>
            Get object that have been updated since the RowVersion change
            </summary>
            <param name="sender"></param>
            <param name="rowVersion"></param>
            <param name="GroupBy">containmentTypeID that Display is currently groupedBy</param>
            <param name="displayTextBy">Value put into DisplayText property, DisplayName, IPAddress, DnsName</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByNSObjectList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Get InventoryObjects for this list of NSObjectIds
            assumes displayText property will contain DisplayName
            </summary>
            <param name="nsObjectIDList">List of NSObjectIds</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByStateType(System.Int64)">
            <summary>
            Affords retrieval via filtration specification.
            </summary>
            <param name="stateTypeID">Instances returned are associated with the State Type specified by this value.</param>
            <returns>InventoryObject instances</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByStateType(System.Int64,System.Boolean)">
            <summary>
            Affords retrieval via filtration specification.
            </summary>
            <param name="stateTypeID">Instances returned are associated with the State Type specified by this value.</param>
            <param name="keysOnly">Specifies whether to reduce the properties set on the returned instances.</param>
            <returns>InventoryObject instances</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjects.SetItemIPAddress(AiMetrix.BusinessObject.Inventory.InventoryObject@,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            If one IPAddress is determined to be the managementIP use that for the displayValue of IPAddress.
            </summary>
            <param name="item"></param>
            <param name="ipAddresses"></param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObjects.TopLevel">
            <summary>
            Is this a collection of topLevel objects
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.InventoryObjects.NodePrefixAvailable">
            <summary>
            Do any of the objects in this collection have
            NodePrefix data available
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.InventoryObjectsAsync">
            <summary>
            Gets collection of InventoryObject objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjectsAsync.ResetRowVersion">
            <summary>
            Used to refresh data 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjectsAsync.BeginGetByStateType(System.Int64,System.Boolean)">
            <summary>
            Affords asynchronous retrieval via filtration specification.
            </summary>
            <param name="stateTypeID">Instances returned are associated with the State Type specified by this value.</param>
            <param name="keysOnly">Specifies whether to reduce the properties set on the returned instances.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.InventoryObjectsAsync.BeginGetByStateType(System.Int64)">
            <summary>
            Affords asynchronous retrieval via filtration specification.
            </summary>
            <param name="stateTypeID">Instances returned are associated with the State Type specified by this value.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.EventStatusMessages">
            <summary>
            Gets collection of EventStatusMessage objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.EventStatusMessagesAsync">
            <summary>
            Gets collection of EventStatusMessage objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.JobSchedulerStatusMessages">
            <summary>
            Gets collection of JobSchedulerStatusMessage objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.JobSchedulerStatusMessagesAsync">
            <summary>
            Gets collection of JobSchedulerStatusMessage objects asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Links">
            <summary>
            Has methods to retrieve Link instances and has aggregate property information about the collection of Link instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.Get">
            <summary>
            Retrieves all Link instances.
            </summary>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.Get(System.Int32)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="linkTypeID">Specifies the LinkType for the Link instances to retrieve.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.Get(System.Byte[])">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="linkLastRowVersion">The Link record-change mark after which data can be retrieved.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.Get(System.Byte[],AiMetrix.BusinessObject.Enums.LinkTypes)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="linkLastRowVersion">The Link record-change mark after which data can be retrieved.</param>
            <param name="linkTypeID">Specifies the LinkType for the Link instances to retrieve.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.GetByNSObject(System.Guid)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="nsObjectID">Either the A or Z side of the retrieved Link instances will be nsObjectID.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.GetByNSObject(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="nsObjectIDList">Either the A or Z side of the retrieved Link instances will be in nsObjectIDList.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.GetByNSObject(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="nsObjectIDList">Either the A or Z side of the retrieved Link instances will be in nsObjectIDList.</param>
            <param name="includeLinksOfDescendants">When true, adds the descendants of NSObjects in nsObjectIDList to nsObjectIDList.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.GetByLastUpdateTimeCeiling(System.DateTime)">
            <summary>
            Gets Link records with LastUpdateTime before the ceiling.
            </summary>
            <param name="ceiling">The cutoff point for LastUpdateTime.</param>
            <returns>A Links instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Links.GetByNSObjectAZPair(System.Guid,System.Guid)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="nsObjectID_AorZ_1">For each retrieved Link, nsObjectID_AorZ_1 will be one side while nsObjectID_AorZ_2 will be the other side.</param>
            <param name="nsObjectID_AorZ_2">For each retrieved Link, nsObjectID_AorZ_1 will be one side while nsObjectID_AorZ_2 will be the other side.</param>
            <returns>A collection of Link instances.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Links.MaxRowVersion">
            <summary>
            The largest record-change mark in a retrieved collection of Link instances.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LinksAsync">
            <summary>
            Has methods to retrieve Link instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.LinksAsync.BeginGet">
            <summary>
            Retrieves all Link instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.LinksAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Retrieves Link instances.
            </summary>
            <param name="nsObjectID">Either the A or Z side of the retrieved Link instances will be nsObjectID.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.LinksAsync.OnGetResponse">
            <summary>
            Fires when a Links instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.LinksAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LinksAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="links"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.LinksAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MeasurementCollector.NSDataReader.Add(System.Object[])">
            <summary>
            Add row to internal list of rows to be read.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Performance.MeasurementCollector.NSDataReader.Count">
            <summary>
            Number of rows in internal list of rows.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.MetricMeasurements">
            <summary>
            Gets collection of Metric objects synchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MetricMeasurements.GetBySrcDestNSObject(System.Guid,System.Guid,System.Collections.Generic.List{System.Int64},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="srcNSObjectID"></param>
            <param name="destNSObjectID"></param>
            <param name="metricIDList"></param>
            <param name="dataPoints"></param>
            <param name="summaryInterval">in minutes</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MetricMeasurements.GetBySrcDestNSObjectMinutesBack(System.Guid,System.Guid,System.Collections.Generic.List{System.Int64},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="srcNSObjectID"></param>
            <param name="destNSObjectID"></param>
            <param name="metricIDList"></param>
            <param name="minutesBack"></param>
            <param name="summaryInterval">in minutes</param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.MetricMeasurementsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.Metrics">
            <summary>
            Gets collection of Metric objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.MetricsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MeasurementArchiveSetting.SetAllRawArchiveDataForIrrevocableDeletion(System.Int32)">
            <summary>
            When this method is called, ALL Raw Archive Measurement data is marked to be destroyed and 
            will be destroyed asynchronously!!!  Also, MeasurmentArchiveSetting is set so that any future 
            raw archived measurements will be retained for numberOfDaysInNewRawArchiveStorage days.
            Only administrators can use this feature.
            </summary>
            <param name="numberOfDaysInNewRawArchiveStorage"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MeasurementArchiveSetting.SetAllHourArchiveDataForIrrevocableDeletion(System.Int32)">
            <summary>
            When this method is called, ALL Hour Archive Measurement data is marked to be destroyed and 
            will be destroyed asynchronously!!!  Also, MeasurmentArchiveSetting is set so that any future 
            hour archived measurements will be retained for numberOfHoursInNewHourArchiveStorage days.
            Only administrators can use this feature.
            </summary>
            <param name="numberOfHoursInNewHourArchiveStorage"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MeasurementArchiveSetting.SetAllDayArchiveDataForIrrevocableDeletion(System.Int32)">
            <summary>
            When this method is called, ALL Day Archive Measurement data is marked to be destroyed and 
            will be destroyed asynchronously!!!  Also, MeasurmentArchiveSetting is set so that any future 
            day archived measurements will be retained for numberOfDaysInNewDayArchiveStorage days.
            Only administrators can use this feature.
            </summary>
            <param name="numberOfDaysInNewDayArchiveStorage"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.MeasurementArchiveSettings.Get">
            <summary>
            Only administrators can use this feature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecification.Save(System.Int64,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecificationVariableDefinition})">
            <summary>
            Use this when saving a GCM (Generic Calculated Metric) Formula Specification.
            </summary>
            <param name="calculatedMetricID"></param>
            <param name="timespanSeconds"></param>
            <param name="formulaDisplay"></param>
            <param name="formulaVariableMapping"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecification.Save(System.Guid,System.Int64,System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecificationVariableDefinition})">
            <summary>
            Use this when saving an SCM (Specific Calculated Metric) Formula Specification.
            </summary>
            <param name="nsObjectIDOnWhichToPublishMeasurements"></param>
            <param name="calculatedMetricID"></param>
            <param name="timespanSeconds"></param>
            <param name="formulaDisplay"></param>
            <param name="formulaVariableMapping"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecificationsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CalculatedMetricNSObjectsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecificationMathematicalItemsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.CalculatedMetricFormulaSpecificationVariableDefinitionsAsync">
            <summary>
            Gets collection of Metric objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddress">
            <summary>
            Has properties for a NSIPAddress and methods to retrieve and update NSIPAddresses.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.GetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.GetByIPAddress(System.String,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.Delete">
            <summary>
            Deletes the NSIPAddress.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.Update(System.Guid,System.String,System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="NodeNSObjectID"></param>
            <param name="IPAddressToAdd"></param>
            <param name="IPAddressToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.Update(System.Guid,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            </summary>
            <param name="NodeNSObjectID"></param>
            <param name="IPAddressToAdd"></param>
            <param name="IPAddressToDelete"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.Create">
            <summary>
            Logs an exception if the create wasn't successful.
            </summary>
            <returns>null if the create wasn't successful.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.Save">
            <summary>
            Saves a NSIPAddress.
            </summary>
            <returns>The saved NSIPAddress.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsDHCP(System.String,System.Boolean)">
            <summary>
            Updates the IsDhcp property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isDHCP">Specifies whether the IP address is DHCP.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsDHCP(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Updates the IsDhcp property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isDHCP">Specifies whether the IP address is DHCP.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsManagedIP(System.String,System.Boolean)">
            <summary>
            Updates the IsManagedIP property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isManagedIP">Specifies the value for the IsManagedIP property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsManagedIP(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Updates the IsManagedIP property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isManagedIP">Specifies the value for the IsManagedIP property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsManagementIP(System.String,System.Boolean)">
            <summary>
            Updates the IsManagementIP property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isManagementIP">Specifies the value for the IsManagementIP property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsManagementIP(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Updates the IsManagementIP property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isManagementIP">Specifies the value for the IsManagementIP property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetIsManagementIP(System.Guid,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates the IsManagementIP property of all records having ipAddress and nodeNSObjectID.
            </summary>
            <param name="nodeNSObjectID">The ID of the node-level NSObject for the update.</param>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="isManagementIP">Specifies the value for the IsManagementIP property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetDNSName(System.String,System.String)">
            <summary>
            Updates the DNSName property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="dnsName">Specifies the value for the DNSName property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetDNSName(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Updates the DNSName property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="dnsName">Specifies the value for the DNSName property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetPhysicalAddress(System.String,System.String)">
            <summary>
            Updates the PhysicalAddress property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="physicalAddress">Specifies the value for the PhysicalAddress property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetPhysicalAddress(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Updates the PhysicalAddress property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="physicalAddress">Specifies the value for the PhysicalAddress property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetPhysicalAddress(System.String,System.String,System.Boolean)">
            <summary>
            Updates the PhysicalAddress property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="physicalAddress">Specifies the value for the PhysicalAddress property.</param>
            <param name="overwriteNullOnly">Specifies whether to complete the update for non-null PhysicalAddress properties.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetPhysicalAddress(System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Updates the PhysicalAddress property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="physicalAddress">Specifies the value for the PhysicalAddress property.</param>
            <param name="overwriteNullOnly">Specifies whether to complete the update for non-null PhysicalAddress properties.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetNodeNSObjectID(System.String,System.Guid)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="nodeNSObjectID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetNodeNSObjectID(System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="nodeNSObjectID"></param>
            <param name="networkDomainID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetInterfaceNSObjectID(System.String,System.Guid)">
            <summary>
            Updates the InterfaceNSObjectID property of all records on a default network domain having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="interfaceNSObjectID">Specifies the value for the InterfaceNSObjectID property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.SetInterfaceNSObjectID(System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Updates the InterfaceNSObjectID property of all records having ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the update.</param>
            <param name="interfaceNSObjectID">Specifies the value for the InterfaceNSObjectID property.</param>
            <param name="networkDomainID">When not null, networkDomainID is the ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.ToString">
            <summary>
            Returns the IPAddress property.
            </summary>
            <returns>The IPAddress property.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddress.ToStringDebug">
            <summary>
            Returns a display for the NSIPAddress.
            </summary>
            <returns>A display for the NSIPAddress.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.DisplayIPAddress">
            <summary>
            DisplayIpAddress  IPv6 -removes extra zeros, IPv4 same as IPAddress
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.IPAddress">
            <summary>
            The IP address for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.NetworkDomainID">
            <summary>
            The ID of the network domain for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.networkDomain">
            <summary>
            The display text of the network domain for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.NodeNSObjectID">
            <summary>
            The ID of the node-level NSObject for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.InterfaceNSObjectID">
            <summary>
            The ID of the interface-level NSObject for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.HostName">
            <summary>
            The host name associated with the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.DnsName">
            <summary>
            The DNS name associated with the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.PhysicalAddress">
            <summary>
            The physicall address associated with the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.IsDhcp">
            <summary>
            Indicates whether DHCP is in effect for the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.IsManagedIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.IsManagementIP">
            <summary>
            Indicates whether the IP address is the management IP address.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.LastUpdateTime">
            <summary>
            The time the corresponding IPAddress record was last updated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.OuiCompany">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.IPAddressListToKeep">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.LockIsDHCP">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.LockIsDHCPOverride">
            <summary>
            
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.TopLevelNSObjectID">
            <summary>
            The ID of the top-level NSObject of the node-level NSObject of the NSIPAddress.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddress.Tag">
            <summary>
            A property for internal use.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddresses">
            <summary>
            Has methods to retrieve NSIPAddresses.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.Get">
            <summary>
            Retrieves all NSIPAddress instances.
            </summary>
            <returns>A collection of NSIPAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByNSObject(System.Guid)">
            <summary>
            Retrieves NSIPAddress instances.
            </summary>
            <param name="nsObjectID">Corresponds to the NodeNSObjectID or InterfaceNSObjectID properties of the retrieved NSIPAddress instances.</param>
            <returns>A collection of NSIPAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByNSObject(System.Guid,System.Boolean)">
            <summary>
            Retrieves NSIPAddress instances.
            </summary>
            <param name="nsObjectID">Corresponds to the NodeNSObjectID or InterfaceNSObjectID properties of the initial set of retrieved NSIPAddress instances.</param>
            <param name="includeAllDescendantPossibilities">When true, the intial set of retrieved NSIPAddress instances expands by including certain descendants of nsObjectID.</param>
            <returns>A collection of NSIPAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByNSObject(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves NSIPAddress instances.
            </summary>
            <param name="nsObjectIDList">Corresponds to the NodeNSObjectID or InterfaceNSObjectID properties of the retrieved NSIPAddress instances.</param>
            <returns>A collection of NSIPAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByNSObject(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Retrieves NSIPAddress instances.
            </summary>
            <param name="nsObjectIDList">Corresponds to the NodeNSObjectID or InterfaceNSObjectID properties of the initial set of retrieved NSIPAddress instances.</param>
            <param name="includeAllDescendantPossibilities">When true, the intial set of retrieved NSIPAddress instances expands by including certain descendants of nsObjectIDList.</param>
            <returns>A collection of NSIPAddress instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress(System.String)">
            <summary>
            Returns a set of all NSIPAddress instances that have ipAddress/defaultNetworkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns a set of all NSIPAddress instances that have ipAddress/networkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress(string) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetByIPAddress(System.String,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetAllByIPAddress(string, int?) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddresses.GetPageByFilter(System.Object,AiMetrix.BusinessObject.Enums.IPAddressFilterType,System.String,System.Int32,System.Int32)">
            <summary>
            Get NSIpAddresses that meet the filter criteria specified in pageSize chunks of data
            Sets totalcount property on collection so that you know when you have reached the end
            </summary>
            <param name="filterType">IPAddress, HostName, DnsName, PhysicalAddress</param>
            <param name="filter">filter meets sql like syntax criteria</param>
            <param name="pageNumber"></param>
            <param name="pageSize">how many objects in this call</param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddresses.Item(System.String)">
            <summary>
            Allows immediate access to the first NSIPAddress instance whose IPAddress property matches ipAddress.
            </summary>
            <param name="ipAddress">The IP address for the search.</param>
            <returns>The first NSIPAddress instance whose IPAddress property matches ipAddress.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSIPAddresses.TotalCount">
            <summary>
            If total count is available will contain
            the total number of objects that meet the filter criteria.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync">
            <summary>
            Has methods to retrieve NSIPAddresses asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.BeginGet">
            <summary>
            Asynchronously retrieves all NSIPAddress instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Asynchronously retrieves all NSIPAddress instances.
            </summary>
            <param name="nsObjectID">Corresponds to the NodeNSObjectID or InterfaceNSObjectID properties of the retrieved NSIPAddress instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.BeginGetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.BeginGetByIPAddress(System.String,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.BeginGetPageByFilter(System.Object,AiMetrix.BusinessObject.Enums.IPAddressFilterType,System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves all NSIPAddress instances.
            </summary>
            <param name="sender"></param>
            <param name="filterType"></param>
            <param name="filter"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.OnGetResponse">
            <summary>
            Fires when a NSIPAddresses instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.OnGetSenderResponse">
            <summary>
            Fires when a NSIPAddresses instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsIPAddresses"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.GetSenderResponseDelegate">
            <summary>
            Delegate for OnGetSenderResponse.
            </summary>
            <param name="sender"></param>
            <param name="nsIPAddresses"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSIPAddressesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.PollingNode">
            <summary>
            Has limited applicability.  Occassionally useful for a specialized scenario in a non-distributed environment.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.PollingNode.GetPollingNodeName">
            <summary>
            Gets the Name of the Polling Node (NSNodes[0].HostName)
            in a single NSNode environment.
            
            WARNING: If multiple NSNodes share the samer database, this
            will not work.
            </summary>
            <param name="pollingNode"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNode">
            <summary>
            Has information about a system instance and has methods to update information about system instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.SaveDistributedChild(System.Guid)">
            <summary>
            Records an NSNode as a distributed child of the NSNode correpsonding to IsMe == true.
            </summary>
            <param name="nsNodeIDChild">The ID of the NSNode to be recorded as a distributed child of the NSNode correpsonding to IsMe == true.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.SaveDistributedParent(System.Guid)">
            <summary>
            Records an NSNode as a distributed parent of the NSNode correpsonding to IsMe == true.
            </summary>
            <param name="nsNodeIDParent">The ID of the NSNode to be recorded as a distributed parent of the NSNode correpsonding to IsMe == true.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.SaveDistributedPeer(System.Guid)">
            <summary>
            Records an NSNode as a distributed peer of the NSNode correpsonding to IsMe == true.
            </summary>
            <param name="nsNodeIDParent">The ID of the NSNode to be recorded as a distributed peer of the NSNode correpsonding to IsMe == true.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Save">
            <summary>
            Saves a NSNode (creates the NSNode if it does not exist; otherwise, the existing NSNode is updated).
            </summary>
            <returns>The saved NSNode.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Save(System.Boolean)">
            <summary>
            Saves a NSNode (creates the NSNode if it does not exist; otherwise, the existing NSNode is updated).
            </summary>
            <param name="propagateChangedNetworkDomainToInventory">When true, then, if the NetworkDomainID corresponding to the NSNode is changed, certain NSIPAddress and CustomObject data will correspondingly change.</param>
            <returns>The saved NSNode.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Delete">
            <summary>
            Deletes an NSNode.  WARNING: Never attempt to delete a NSNode corresponding to IsMe == true!
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Delete(System.Guid)">
            <summary>
            Deletes an NSNode.  WARNING: Never attempt to delete a NSNode corresponding to IsMe == true!
            </summary>
            <param name="nsNodeID">The ID of the NSNode to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Register(System.Guid,System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="nsNodeID"></param>
            <param name="masterController"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.Unregister(System.Guid)">
            <summary>
            Not implemented.
            </summary>
            <param name="nsNodeID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.EstablishConnection(System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="nsNodeConnection"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.ToString">
            <summary>
            Returns the DisplayName property.
            </summary>
            <returns>The DisplayName property.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNode.ToStringDebug">
            <summary>
            Returns display information for the NSNode.
            </summary>
            <returns>Display information for the NSNode.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.NSNodeID">
            <summary>
            The ID of the NSNode.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.NSNodeType">
            <summary>
            This property has been deprecated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.DisplayName">
            <summary>
            The display name for the NSNode.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.NetworkDomainID">
            <summary>
            The ID of the NSNode's network domain.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.NetworkDomain">
            <summary>
            Display for the NSNode's network domain.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsMe">
            <summary>
            Indicates whether the instance corresponds to the login.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsStandAlone">
            <summary>
            Indicates whether a NSNode is in a distributed environment.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsDistributedPerformance">
            <summary>
            Indicates whether a distributed NSNode receives Performance information from a child NSNode.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsDistributedChild">
            <summary>
            Indicates whether a NSNode is a child NSNode in a distributed environment.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsDistributedParent">
            <summary>
            Indicates whether a NSNode is a parent NSNode in a distributed environment.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsDistributedPeer">
            <summary>
            Indicates whether a NSNode is a peer NSNode in a distributed environment.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNode.IsDistributedTwoWay">
            <summary>
            Indicates whether a NSNode shares certain data with one or more NSNodes in a distributed environment.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodes">
            <summary>
            Has methods to retrieve NSNode instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.AddToCollection(AiMetrix.BusinessObject.Inventory.NSNode)">
            <summary>
            Adds a NSNode to the collection of NSNode instances.
            </summary>
            <param name="nsNode">The NSNode to add to the collection.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.Get(System.Boolean)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="excludeMe">Specifies whether to exclude the NSNode corresponding to IsMe == true.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.BeginGetDiscoveryNSNodes">
            <summary>
            Retrieves NSNode instances that are Discovery NSNodes.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.BeginGetDiscoveryNSNodes(System.Int32)">
            <summary>
            Retrieves NSNode instances that are Discovery NSNodes.
            </summary>
            <param name="networkDomainID">Tends to restrict the retrieval to instances to where NetworkDomainID = networkDomainID.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetByNSNode(System.Guid)">
            <summary>
            Retrieves a NSNode instance.
            </summary>
            <param name="nsNodeID">The ID of the NSNode to retrieve.</param>
            <returns>A NSNode instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetByNSNode(System.String)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="hostName">The HostName property of the retrieved instances.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetByNSNode(System.String,System.Int32)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="hostName">The HostName property of the retrieved instances.</param>
            <param name="networkDomainID">The NetworkDomainID property of the retrieved instances.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetByNetworkDomain(System.Int32)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="networkDomainID">The NetworkDomainID property of the retrieved instances.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetByNSObject(System.Guid)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="nsObjectID">Restricts the retrieval set to NSNode instances whose NetworkDomainID properties correspond to NetworkDomainID properties of NSIPAddress and/or CustomObject instances related to nsObjectID.</param>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetLocalNode">
            <summary>
            Retrieves NSNode instances where IsMe == true.  Typically, only one instance can be retrieved.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetMe">
            <summary>
            Retrieves a NSNode instance where IsMe == true.
            </summary>
            <returns>A NSNode instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetDistributedChildren">
            <summary>
            Retrieves NSNode instances in a distributed environment that are child NSNodes of the NSNode having IsMe == true.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetDistributedParents">
            <summary>
            Retrieves NSNode instances in a distributed environment that are parent NSNodes of the NSNode having IsMe == true.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetDistributedPeers">
            <summary>
            Retrieves NSNode instances in a distributed environment that are peer NSNodes of the NSNode having IsMe == true.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodes.GetReplicatedNSNodes">
            <summary>
            Retrieves NSNode instances that replicate with the NSNode having IsMe == true.
            </summary>
            <returns>A collection of NSNode instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodesAsync">
            <summary>
            Has methods to retrieve NSNode instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGet(System.Boolean)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="excludeMe">Specifies whether to exclude the NSNode corresponding to IsMe == true.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetDiscoveryNSNodes">
            <summary>
            Retrieves NSNode instances that are Discovery NSNodes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetDiscoveryNSNodes(System.Int32)">
            <summary>
            Retrieves NSNode instances that are Discovery NSNodes.
            </summary>
            <param name="networkDomainID">Tends to restrict the retrieval to instances to where NetworkDomainID = networkDomainID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetByNetworkDomain(System.Int32)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="networkDomainID">The NetworkDomainID property of the retrieved instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Retrieves NSNode instances.
            </summary>
            <param name="nsObjectID">Restricts the retrieval set to NSNode instances whose NetworkDomainID properties correspond to NetworkDomainID properties of NSIPAddress and/or CustomObject instances related to nsObjectID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetLocalNode">
            <summary>
            Retrieves NSNode instances where IsMe == true.  Typically, only one instance can be retrieved.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetMe">
            <summary>
            Retrieves a NSNode instance where IsMe == true.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetByNSNode(System.Guid)">
            <summary>
            Retrieves a NSNode instance.
            </summary>
            <param name="nsNodeID">The ID of the NSNode to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetReplicatedNSNodes">
            <summary>
            Retrieves NSNode instances that replicate with the NSNode having IsMe == true.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodesAsync.BeginGetDistributedPeers">
            <summary>
            Retrieves peer NSNode instances for the NSNode having IsMe == true.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSNodesAsync.OnGetResponse">
            <summary>
            Fires when a NSNodes instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSNodesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsNodes"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration">
            <summary>
            Has information about a NSNode and has methods to update information about the NSNode.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Save">
            <summary>
            Saves a NSNodeConfiguration instance (creates a NSNodeConfiguration if it does not exist; otherwise, updates the existing NSNodeConfiguration).
            </summary>
            <returns>The saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Save(System.Boolean)">
            <summary>
            Saves a NSNodeConfiguration instance (creates a NSNodeConfiguration if it does not exist; otherwise, updates the existing NSNodeConfiguration).
            </summary>
            <returns>The saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Delete">
            <summary>
            Deletes a NSNodeConfiguration.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Delete(System.Guid)">
            <summary>
            Deletes a NSNodeConfiguration.
            </summary>
            <param name="nsNodeConfigurationID">The ID of the NSNodeConfiguration to delete.</param>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.NSNodeConfigurationID">
            <summary>
            The ID for the NSNodeConfiguration.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.NSNodeID">
            <summary>
            The ID of the NSNode of the NSNodeConfiguration.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Name">
            <summary>
            Identifies a particular NSNodeConfiguration for the NSNode identified by NSNodeID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.Value">
            <summary>
            The value for the NSNodeConfiguration.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSNodeConfiguration.UserCredentialID">
            <summary>
            The ID of a credential associated with the NSNodeConfiguration.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations">
            <summary>
            Has methods to retrieve NSNodeConfiguration instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.AddToCollection(AiMetrix.BusinessObject.Inventory.NSNodeConfiguration)">
            <summary>
            Adds a NSNodeConfiguration to the collection of NSNode instances.
            </summary>
            <param name="nsNodeConfiguration">The NSNodeConfiguration to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.Get">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <returns>A collection of NSNodeConfiguration instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.Get(System.Guid)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="nsNodeID">Restricts the retrieved set.</param>
            <returns>A collection of NSNodeConfiguration instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.Get(System.String)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="name">Restricts the retrieved set.</param>
            <returns>A collection of NSNodeConfiguration instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.Get(System.String,System.Boolean)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="name">Restricts the retrieved set.</param>
            <param name="peerOnly">When true, excludes from the retrieval set NSNode instances that are parents or children of the NSNode having IsMe == true.</param>
            <returns>A collection of NSNodeConfiguration instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurations.Get(System.Guid,System.String)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="nsNodeID">Restricts the retrieved set.</param>
            <param name="name">Restricts the retrieved set.</param>
            <returns>A collection of NSNodeConfiguration instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync">
            <summary>
            Has methods to retrieve NSNodeConfiguration instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.BeginGet">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.BeginGetByID(System.Guid)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="nsNodeID">Restricts the retrieved set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.BeginGetByName(System.String)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="name">Restricts the retrieved set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.BeginGetByNamePeerOnly(System.String)">
            <summary>
            Retrieves NSNodeConfiguration instances that are neither parents nor children of the NSNode having IsMe == true.
            </summary>
            <param name="name">Restricts the retrieved set.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.BeginGetByIDAndName(System.Guid,System.String)">
            <summary>
            Retrieves NSNodeConfiguration instances.
            </summary>
            <param name="nsNodeID">Restricts the retrieved set.</param>
            <param name="name">Restricts the retrieved set.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.OnGetResponse">
            <summary>
            Fires when an NSNodeConfigurations instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsNodeConfigurations"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSNodeConfigurationsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NSNodeStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NSNodeStatusMessagesAsync">
            <summary>
            Gets collection of JobScheduleStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.NSObjectMeasurements">
            <summary>
            Gets collection of NSObject objects synchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.NSObjectMeasurementsAsync">
            <summary>
            Gets collection of NSObject objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObject">
            <summary>
            Has properties for a NSObject and methods to retrieve and update NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByNSObject(System.Guid)">
            <summary>
            Retrieves a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to retrieve.</param>
            <returns>An NSObject instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByNSObject(System.Guid,System.Boolean)">
            <summary>
            Retrieves a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to retrieve.</param>
            <param name="includeSystem">Specifies whether to allow the system NSObject to be retrieved.</param>
            <returns>An NSObject instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByNSObject(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Intentionally internal.
            </summary>
            <param name="nsObjectID"></param>
            <param name="includeSystem"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByNSObjectKeys(System.Guid)">
            <summary>
            Retrieves a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to retrieve.</param>
            <returns>A NSObject instance with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressKeys(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddress(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressKeys(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressIfIndexKeys(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressIfIndex(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetByIPAddressIfIndexKeys(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetIPAndHost(AiMetrix.BusinessObject.Inventory.NSObject,System.String@,System.String@,System.String@,System.Collections.Generic.List{System.Net.IPAddress}@)">
            <summary>
            Retrieves IP information for a NSObject.
            </summary>
            <param name="nsObject">An instance of the NSObject.</param>
            <param name="ipAddress">The IP address of the management IP.</param>
            <param name="hostName">The host name corresponding to the management IP.</param>
            <param name="dnsName">The dns name corresponding to the management IP.</param>
            <param name="alternateIPAddressList">The NSObject's IP addresses that are not the management IP.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetIPAndHost(System.Guid,System.String@,System.String@,System.String@,System.Collections.Generic.List{System.Net.IPAddress}@)">
            <summary>
            Retrieves IP information for a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject.</param>
            <param name="ipAddress">The IP address of the management IP.</param>
            <param name="hostName">The host name corresponding to the management IP.</param>
            <param name="dnsName">The dns name corresponding to the management IP.</param>
            <param name="alternateIPAddressList">The NSObject's IP addresses that are not the management IP.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Save(System.Guid,System.Guid,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime})">
            <summary>
            Saves (insert or update) an NSObject.
            </summary>
            <param name="nsObjectID">ID for the NSObject.</param>
            <param name="parentNSObjectID">ID for the NSObject's parent.</param>
            <param name="nsObjectTypeID">Internal type ID.</param>
            <param name="classificationTypeID">ID for the NSObject's Classification Type.</param>
            <param name="displayName">The NSObject's display name.</param>
            <param name="shouldLock">Specifies whether certain NSObject fields (e.g., DisplayName, ClassificationTypeID) for the NSObject can be overwritten by certain processes (e.g., Discovery).</param>
            <param name="firstDiscovered">The date the NSObject was first discovered.</param>
            <param name="lastDiscovered">The date the NSObject was last discovered.</param>
            <param name="isValid">Specifies whether the NSObject is valid.</param>
            <param name="isManaged">Specifies whether the NSObject is managed.</param>
            <param name="timeDeleted">Specifies the time at which the NSObject was invalidated.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetParent(System.Guid,System.Guid)">
            <summary>
            Sets the parent NSObject for a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to be updated.</param>
            <param name="parentNSObjectID">The ID of the new parent NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetDisplayName(System.Guid,System.String)">
            <summary>
            Updates a NSObject's display name.
            </summary>
            <param name="nsObjectID">The ID of the NSObjet to update.</param>
            <param name="displayName">The new display name for the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetDisplayName(System.Guid,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates a NSObject's display name.
            </summary>
            <param name="nsObjectID">The ID of the NSObjet to update.</param>
            <param name="displayName">The new display name for the NSObject.</param>
            <param name="shouldLock">Specifies whether future updates to this field require lockOverride == true.</param>
            <param name="lockOverride">Specifies whether to override the NSObject's Lock property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetLastDiscovered(System.Guid,System.DateTime)">
            <summary>
            Updates a NSObject's last discovered time.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to update.</param>
            <param name="lastDiscovered">The new last discovered time for the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetIsManaged(System.Guid,System.Boolean)">
            <summary>
            Sets the IsManaged property of a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to update.</param>
            <param name="isManaged">The new value for the property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Create(System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).
            </summary>
            <param name="diplayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Create(System.Guid,System.String)">
            <summary>
            Creates an NSObject with NSObjectID == nsObjectID (if it doesn't already exist).
            </summary>
            <param name="nsObjectID">The NSObjectID for the NSObject; Guid.Empty is disallowed.</param>
            <param name="diplayName">The DisplayName for the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByNSObjectID(System.Guid,System.Int32,System.String)">
            <summary>
            If an NSObject does not already exist with nsObjectID, then an NSObject is created with nsObjectID.
            </summary>
            <param name="nsObjectID"></param>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.Int32,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.Int32,System.String)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID).
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.Int32,System.String,System.Guid)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.Guid,System.Int32,System.String,System.Guid)">
            <summary>
            Creates an NSObject (if it doesn't already exist).
            </summary>
            <param name="nsObjectID">The nsObjectID for the NSObject, unless nsObjectID == Guid.Empty (in which case nsObjectID is ignored).</param>
            <param name="classificationTypeID">The ClassificationTypeID for the NSObject.</param>
            <param name="displayName">The DisplayName for the NSObject.</param>
            <param name="parentNSObjectID">The ParentNSObjectID for the NSObject.</param>
            <returns>nsObjectID (or the created NSObjectID if nsObjectID == Guid.Empty)</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.Int32,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <param name="parent"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.Int32,System.String,System.Guid)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.Int32,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <param name="parent"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.String,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.String,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.String,System.String,System.Guid)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.String,System.String,System.Guid)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationType(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/defaultNetworkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/networkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.
            Creates a corresponding CustomObject with [className = classificationType]/objectName/defaultNetworkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.
            Creates a corresponding CustomObject with [className = classificationType]/objectName/defaultNetworkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/defaultNetworkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/defaultNetworkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Int32)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/networkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates an NSObject (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/networkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="networkDomainID"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Int32)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/networkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateServiceByClassificationTypeAsClassName(System.String,System.String,System.String,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates an NSObject service (and returns its NSObjectID) as a child of parentNSObjectID.  
            Creates a corresponding CustomObject with [className = classificationType]/objectName/networkDomainID.  
            Also creates classificationType if it doesn't already exist.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="parentNSObjectID"></param>
            <param name="networkDomainID"></param>
            <param name="attemptWaitForTopLevelScrub"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(System.String,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding CustomObject with className/objectName/defaultNetworkDomainID.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(System.String,System.String,System.Int32)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding CustomObject with className/objectName/networkDomainID.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding NSIPAddress with ipAddress/defaultNetworkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(System.String,System.String)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding NSIPAddress with ipAddress/defaultNetworkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(System.String,System.Int32)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding NSIPAddress with ipAddress/networkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(System.String,System.String,System.Int32)">
            <summary>
            Creates an NSObject (and returns its NSObjectID).  
            Also creates a corresponding NSIPAddress with ipAddress/networkDomainID.
            </summary>
            <param name="ipAddress"></param>
            <param name="diplayName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.LicenseIsExceeded">
            <summary>
            Is there an object license available for NSObject.Create
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.LicenseIsExceeded(System.Guid)">
            <summary>
            Is there an object license available for NSObject.Create
            </summary>
            <param name="parentID">NetworkElements feature only tracks top level objects for licensing</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Create(System.String,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, string) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="diplayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Create(System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="diplayName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetClassificationType(System.Guid,System.Int32)">
            <summary>
            Updates a NSObject's classification type.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to update.</param>
            <param name="classificationTypeID">The ID of the new classification type.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetClassificationType(System.Guid,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Updates a NSObject's classification type.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to update.</param>
            <param name="classificationTypeID">The ID of the new classification type.</param>
            <param name="shouldLock">Specifies whether future updates to this field require lockOverride == true.</param>
            <param name="lockOverride">Specifies whether to override the NSObject's Lock property.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.SetModel(System.Guid,System.Int64)">
            <summary>
            Sets a NSObject's Model.
            </summary>
            <param name="nsObjectID">Uniquely identifies the NSObject.</param>
            <param name="modelID">The ID of the Model corrsponding to the NSObject.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.GetModel(System.Guid)">
            <summary>
            Retrieves a NSObject's ModelID.
            </summary>
            <param name="nsObjectID">Uniquely identifies the NSObject.</param>
            <returns>null if a model is not assigned to the NSObject; otherwise, the ModelID.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.UpdateLastDiscovered(System.Guid)">
            <summary>
            Updates a NSObject's last discovered time.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to update.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Delete(System.Collections.Generic.List{System.Guid})">
            <summary>
            Deletes NSObjects.
            </summary>
            <param name="nsObjectIDList">The IDs of the NSObjects to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Delete(System.Guid)">
            <summary>
            Deletes a NSObject and all its child NSObjects.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to delete.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Delete(System.Guid,System.Boolean)">
            <summary>
            Deletes a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to delete.</param>
            <param name="deleteAllChildren">When true, all child NSObjects will be deleted too.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.Delete">
            <summary>
            Deletes a NSObject and all its child NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.DeleteAll">
            <summary>
            Deletes all non-system NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.AssignAsSame(System.Collections.Generic.List{System.Guid})">
            <summary>
            Irrevocably declares that the specified NSObjects are the same NSObject.
            This command instructs the system to attempt to coalesce said NSObjects into one NSObject.
            </summary>
            <param name="nsObjectIDList">The IDs of the NSObjects to coalesce.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.AssignAsSame(System.Collections.Generic.List{System.Guid},System.Guid)">
            <summary>
            Irrevocably declares that the specified NSObjects are the same NSObject.
            This command instructs the system to attempt to coalesce said NSObjects into one NSObject.
            </summary>
            <param name="nsObjectIDList">The IDs of the NSObjects to coalesce.</param>
            <param name="nsObjectIDWinner">The ID of the "winning" NSObject in nsObjectIDList.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.AssignAsSame(System.Collections.Generic.List{System.Guid},System.Guid,System.Boolean)">
            <summary>
            Irrevocably declares that the specified NSObjects are the same NSObject.
            This command instructs the system to attempt to coalesce said NSObjects into one NSObject.
            </summary>
            <param name="nsObjectIDList">The IDs of the NSObjects to coalesce.</param>
            <param name="nsObjectIDWinner">The ID of the "winning" NSObject in nsObjectIDList.</param>
            <param name="adoptDescendantsAsIs">When true, descendant NSObjects of the "losing" NSObjects in nsObjectIDList are adopted by nsObjectIDWinner; otherwise, an attempt is made to assign information from said descendants to nsObjectIDWinner and then said descendants are deleted.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObject.ToStringDebug">
            <summary>
            Returns descriptive information about a NSObject.
            </summary>
            <returns>Descriptive information about a NSObject.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.HasChildren">
            <summary>
            Specifies whether an NSObject has at least one child NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.NSObjectID">
            <summary>
            Uniquely identifies an NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.ParentNSObjectID">
            <summary>
            The ID of an NSObject's parent NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.ClassificationTypeID">
            <summary>
            The ID of an NSObject's classification type.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.ClassificationType">
            <summary>
            Display for the classification type of a NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.NodePrefix">
            <summary>
            Part of the name of a NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.DisplayName">
            <summary>
            The name of a NSObject.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.IsDataAvailable">
            <summary>
            Specifies whether a NSObject has Performance data.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.FirstDiscovered">
            <summary>
            The date a NSObject was first discovered.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.LastDiscovered">
            <summary>
            The date a NSObject was last discovered.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.TimeDeleted">
            <summary>
            Intentionally internal.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.IsManaged">
            <summary>
            Indicates whether a NSObject is being managed by the system.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObject.IsValid">
            <summary>
            Intentionally internal
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjects">
            <summary>
            Has methods to retrieve NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetDeltaByList(System.Collections.Generic.List{System.Guid},System.Byte[])">
            <summary>
            Returns NSObjects from nsobjectIDList that have an "inventory delta" after rowVersion.
            </summary>
            <param name="nsobjectIDList"></param>
            <param name="rowVersion"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetMaxRowversion">
            <summary>
            Returns the current NSObject max rowversion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.AddNewNSObject(AiMetrix.BusinessObject.Inventory.NSObject)">
            <summary>
            Adds a NSObject to the collection.
            </summary>
            <param name="nsObject">The NSObject to add.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.Get">
            <summary>
            Retrieves all non-system NSObjects.
            </summary>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.Get(System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="includeSystem">Specifies whether to allow the system NSObject to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetKeys">
            <summary>
            Retrieves NSObjects.
            </summary>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetDelta(System.Byte[],System.Guid,System.Int32)">
            <summary>
            Returns the "KeysOnly" version of the topN TopLevel NSObjects that 
            have an "inventory delta" after rowVersion.  Only NSObjects corresponding
            to childNSNodeID in the NSObjectNSNode table are returned.
            </summary>
            <param name="rowVersion"></param>
            <param name="childNSNodeID"></param>
            <param name="topN"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetDelta(System.Byte[],System.Int32)">
            <summary>
            Returns the "KeysOnly" version of the topN TopLevel NSObjects that 
            have an "inventory delta" after rowVersion.  
            </summary>
            <param name="rowVersion"></param>
            <param name="topN"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByDisplayName(System.String)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByDisplayName(System.String,System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <param name="parentNSObjectID">The ID of the parent NSObject of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByDisplayNameKeys(System.String)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByDisplayNameKeys(System.String,System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <param name="parentNSObjectID">The ID of the parent NSObject of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationType(System.Object,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationType(System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="classificationTypeId">The ClassificationTypeID of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationTypeKeys(System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="classificationTypeId">The ClassificationTypeID of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationType(System.String,System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="classificationType">The classification type of the NSObjects to retrieve.</param>
            <param name="parent">The ID of the parent NSObject of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationType(System.String,System.String,System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="classificationType">The classification type of the NSObjects to retrieve.</param>
            <param name="customObjectName">Retrieved NSObjects must have a CustomObject record matching customObjectName.</param>
            <param name="parent">The ID of the parent NSObject of the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationType(System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="classificationType">The classification type of the NSObjects to retrieve.</param>
            <param name="objectName">Retrieved NSObjects must have a CustomObject record matching the networkDomain or the objectName parameter.</param>
            <param name="parent">The ID of the parent NSObject of the NSObjects to retrieve.</param>
            <param name="networkDomain">Retrieved NSObjects must have a CustomObject record matching the networkDomain or the objectName parameter.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="sender">ignored</param>
            <param name="classificationTypeId">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="sender">ignored</param>
            <param name="classificationTypeId">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="metricID">When not null, metricID restricts the initial candidate retrieval set to NSObjects that have Performance data with metricID.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean,System.Nullable{System.Int64},AiMetrix.BusinessObject.Enums.NSObjectGetByIDType)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="sender">ignored</param>
            <param name="classificationTypeId">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="getByID">When not null, ID restricts the initial candidate retrieval set to NSObjects that have data with ID.</param>
            <param name="getByIDType">Specifies the type of ID that will be used to filter the return NSObjects.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByClassificationTypeKeysBandwidth(System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="sender">ignored</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="useBandwidthMetrics">When true, the initial candidate retrieval set is restricted to NSObjects that have Performance data with bandwidth metrics.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByMap(System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap() instead.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByMapKeys(System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap() instead.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByAssetGroup(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup containing the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByAssetGroupKeys(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup containing the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByMetric(System.Int64)">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByMetricKeys(System.Int64)">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByMetricList(System.Collections.Generic.List{System.Int64})">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="nsObjectID">The ID of the non-system NSObject to retrieve.</param>
            <returns>A NSObject instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Guid,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="nsObjectID">The ID of the NSObject to retrieve.</param>
            <param name="includeSystem">Specifies whether to allow the system NSObject to be retrieved.</param>
            <returns>A NSObject instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="nsObjectIDList">The IDs of the non-system NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="nsObjectIDList">The IDs of the NSObjects to retrieve.</param>
            <param name="includeSystem">Specifies whether to allow the system NSObject to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Intentionally internal.
            </summary>
            <param name="nsObjectID"></param>
            <param name="includeSystem"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObject(System.Collections.Generic.List{System.Guid},System.Boolean,System.Boolean)">
            <summary>
            Intentionally internal.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNSObjectKeys(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="nsObjectID">The ID of the non-system NSObject to retrieve.</param>
            <returns>A NSObject instance with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(System.String)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(System.String)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(System.String,System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(System.String,System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(string) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressKeys(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(string) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddress(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressKeys(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressKeys(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddress(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressKeys(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressIfIndexKeys(System.String,System.Int64)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressIfIndex(System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByIPAddressIfIndexKeys(System.String,System.Int64,System.Int32)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
            <returns>A collection of NSObject instances with only certain properties populated.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressIfIndexKeys(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressIfIndex(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.SearchByIPAddressIfIndexKeys(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByTopLevelNSObjectID(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="topLevelNSObjectID">The ID of the NSObject that is both the parent and the top level for the NSObjects to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByTopLevelNSObjectID(System.Guid,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="topLevelNSObjectID">The ID of the NSObject that is both the parent and the top level for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByTopLevelNSObjectID(System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByTopLevelNSObjectID(System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByTopLevelNSObjectIDBandwidth(System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <param name="useBandwidthMetrics">When true, the set of NSObjects to be retrieved is restricted to those that have Performance data with bandwidth metrics.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByParentNSObjectID(System.Guid)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByParentNSObjectID(System.Guid,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByParentNSObjectID(System.Guid,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByParentNSObjectIDBandwidth(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Retrieves NSObjects.
            </summary>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="useBandwidthMetrics">When true, the set of NSObjects to be retrieved is restricted to those that have Performance data with bandwidth metrics.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNetFlowType(System.Int32)">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByNetFlowTypeKeys(System.Int32)">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByWinEventLogFilter(System.Int32)">
            <summary>
            Get all NSObjects that currently collect Windows Event Log messages
            that meet the filterId criteria
            </summary>
            <param name="filterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetByWinEventLogFilterKeys(System.Int32)">
            <summary>
            KeysOnly - generally used for display purposes, Get all NSObjects that currently collect Windows Event Log messages
            that meet the filterId criteria
            </summary>
            <param name="filterID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetNonSNMPInterface(System.Boolean)">
            <summary>
            Retrieves NSObjects that are not SNMP interfaces.
            </summary>
            <param name="includeSystem">Specifies whether to include the system NSObject in the retrieval set.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetNonSNMPInterface(System.Boolean,System.Guid)">
            <summary>
            Retrieves NSObjects that are not SNMP interfaces.
            </summary>
            <param name="includeSystem">Specifies whether to include the system NSObject in the retrieval set.</param>
            <param name="topLevelNSObjectID">The ID of the NSObject that is both the parent and the top level for the NSObjects to be retrieved.</param>
            <returns>A collection of NSObject instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjects.GetPageByFilter(System.Object,AiMetrix.BusinessObject.Enums.NSObjectFilterType,System.String,System.Int32,System.Int32)">
            <summary>
            Get NSObject that meet the filter criteria specified in pageSize chunks of data
            Sets totalcount property on collection so that you know when you have reached the end
            </summary>
            <param name="filterType">DisplayName or ClassificationType</param>
            <param name="filter">filter meets sql like syntax criteria</param>
            <param name="pageNumber"></param>
            <param name="pageSize">how many objects in this call</param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjects.NodePrefixAvailable">
            <summary>
            Specifies whether any of the objects in this collection have NodePrefix data available.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjects.IsTopLevelOnlyForGrouping">
            <summary>
            Are all the objects in this collection TopLevel objects only?  Only used when sending the TopLevelOnly parameter.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjects.TotalCount">
            <summary>
            If total count is available will contain
            the total number of objects that meet the filter criteria.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjects.MaxRowVersion">
            <summary>
            This gets populated after a call to the GetDelta functionality.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectsAsync">
            <summary>
            Has methods to retrieve NSObjects asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGet">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetKeys">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByClassificationType(System.Object,System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeID">The ClassificationTypeID of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByClassificationTypeKeys(System.Object,System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeID">The ClassificationTypeID of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean,System.Nullable{System.Int64},AiMetrix.BusinessObject.Enums.NSObjectGetByIDType)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="getByID">When not null, the set of NSObjects to be retrieved is restricted to those that have data with id.</param>
            <param name="getByIDType">The type of the getByID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByClassificationTypeKeys(System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects that form the initial candidate retrieval set.</param>
            <param name="topLevelOnly">When false, the initial candidate retrieval set (ICRS) is retrieved; otherwise, the following is retrieved: (a) ICRS NSObjects that do not have parents and (b) top-level NSObjects of ICRS NSObjects that do have parents.</param>
            <param name="useBandwidthMetrics">When true, the set of NSObjects to be retrieved is restricted to those that have Performance data with bandwidth metrics.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByDisplayName(System.String)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByDisplayNameKeys(System.String)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByDisplayNameAndParentNSObjectID(System.String,System.Guid)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <param name="parentNSObjectID">The ID of the parent NSObject of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByDisplayNameAndNSObjectIDKeys(System.String,System.Guid)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="displayName">The display name of the NSObjects to retrieve.</param>
            <param name="parentNSObjectID">The ID of the parent NSObject of the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByMap(System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap() instead.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByMapKeys(System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.InventoryObjects.GetByMap() instead.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByAssetGroup(System.Guid)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup containing the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByAssetGroupKeys(System.Guid)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="assetGroupID">The ID of the AssetGroup containing the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByMetricKeys(System.Int64)">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByMetricList(System.Collections.Generic.List{System.Int64})">
            <summary>
            This method is deprecated.
            Please refer to AiMetrix.BusinessObject.Inventory.InventoryObjects for a corresponding method.
            </summary>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Asynchronously retrieves a NSObject.
            </summary>
            <param name="nsObjectID">The ID of the non-system NSObject to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByNSObjectKeys(System.Guid)">
            <summary>
            Asynchronously retrieves a NSObject with only certain properties populated.
            </summary>
            <param name="nsObjectID">The ID of the non-system NSObject to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(string) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressKeys(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(string) instead.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressNetworkDomain(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddress(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressKeys(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObjects.GetAllByIPAddressKeys(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddress(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressKeys(System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressNetworkDomain(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressNetworkDomainKeys(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressIfIndexKeys(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressNetworkDomainIfIndex(System.String,System.Int64,System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByIPAddressNetworkDomainIfIndexKeys(System.String,System.Int64,System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="ipAddress">An IP address belonging to the NSObjects to retrieve.</param>
            <param name="ifIndex">An ifIndex belonging to the NSObjects to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressIfIndexKeys(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressNetworkDomainIfIndex(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginSearchByIPAddressNetworkDomainIfIndexKeys(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetPageByFilter(System.Object,AiMetrix.BusinessObject.Enums.NSObjectFilterType,System.String,System.Int32,System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="filterType">DisplayName or ClassificationType</param>
            <param name="filter">filter meets sql like syntax criteria</param>
            <param name="pageNumber"></param>
            <param name="pageSize">how many objects in this call</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByTopLevelNSObjectID(System.Object,System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByTopLevelNSObjectID(System.Object,System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByTopLevelNSObjectID(System.Object,System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int64},AiMetrix.BusinessObject.Enums.NSObjectGetByIDType)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByTopLevelNSObjectID(System.Object,System.Guid,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="topLevelNSObjectID">The ID of the NSObject that is the top level for the NSObjects to be retrieved.</param>
            <param name="classificationTypeID">The ID of the classification type of the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="returnAllLevels">When false, the NSObject represented by topLevelNSObjectID is also the parent for the NSObjects to be retrieved.</param>
            <param name="useBandwidthMetrics">When true, the set of NSObjects to be retrieved is restricted to those that have Performance data with bandwidth metrics.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByParentNSObjectID(System.Object,System.Guid,System.Boolean)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>        
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByParentNSObjectID(System.Object,System.Guid,System.Boolean,System.Nullable{System.Int64})">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByParentNSObjectID(System.Object,System.Guid,System.Boolean,System.Nullable{System.Int64},AiMetrix.BusinessObject.Enums.NSObjectGetByIDType)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="metricID">When not null, the set of NSObjects to be retrieved is restricted to those that have Performance data with metricID.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByParentNSObjectID(System.Object,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="sender"></param>
            <param name="parentNSObjectID">The ID of the NSObject that is the parent for the NSObjects to be retrieved.</param>
            <param name="keysOnly">Specifies whether only certain properties should be populated for the NSObject instances of the returned collection.</param>
            <param name="useBandwidthMetrics">When true, the set of NSObjects to be retrieved is restricted to those that have Performance data with bandwidth metrics.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByWinEventLogFilter(System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects.
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.BeginGetByWinEventLogFilterKeys(System.Int32)">
            <summary>
            Asynchronously retrieves NSObjects with only certain properties populated.
            </summary>
            <param name="filterID"></param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.OnGetResponse">
            <summary>
            Fires when a NSObjects instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.OnGetSenderResponse">
            <summary>
            Fires when a NSObjects instance returns from certain asynchronous calls.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="nsObjects"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.GetSenderResponseDelegate">
            <summary>
            Delegate for OnGetSenderResponse.
            </summary>
            <param name="sender"></param>
            <param name="nsObjects"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectID">
            <summary>
            Has properties relating to NSObjects and can be used to retrieve IDs of NSObjects.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string).
            </summary>
            <param name="ipAddress"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, int) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, int) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string, int) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string, int).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.Guid,System.Int64)">
            <summary>
            Retrieves the NSObjectID of an SNMP interface.
            </summary>
            <param name="nodeNSObjectID">The ID of the node NSObject for the SNMP interface to be retrieved.</param>
            <param name="ifIndex">The ifIndex of the SNMP interface to be retrieved.</param>
            <returns>A NSObjectID.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.Int64)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.Int64,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, int) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string) instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string, int) instead.
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.String,System.Guid)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(string, string, string, Guid) instead.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="customObjectName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.String,System.Guid,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(string, string, string, Guid, int) instead.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="customObjectName"></param>
            <param name="parent"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.Int32,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(int, string) instead.
            </summary>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.Guid,System.Int32,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByNSObjectID(Guid, int, string) instead.
            </summary>
            <param name="nsObjectID"></param>
            <param name="classificationTypeID"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.String)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(string, string, string) instead.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationTypeAsClassName(string, string, string, int) instead.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="objectName"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.Create(System.String,System.String,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassificationType(string, string) instead.
            </summary>
            <param name="classificationType"></param>
            <param name="displayName"></param>
            <param name="logCreate"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string, int) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string, int).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Int64,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Int64,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, int) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, long, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <param name="isService"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string) or AiMetrix.BusinessObject.Inventory.NSObject.CreateByClassName(string, string, int) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string) or AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, string, int).
            </summary>
            <param name="className"></param>
            <param name="objectName"></param>
            <param name="create"></param>
            <param name="isService"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Boolean)">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string) instead when create == true; otherwise, please use AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string).
            </summary>
            <param name="ipAddress"></param>
            <param name="create"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method is deprecated.
            Please use AiMetrix.BusinessObject.Inventory.NSObject.CreateByIPAddress(string, int) and AiMetrix.BusinessObject.Inventory.NSObjectID.GetID(string, int) instead.
            </summary>
            <param name="ipAddress"></param>
            <param name="create"></param>
            <param name="networkDomainID"></param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.NodeNSObjectID">
            <summary>
            The ID of a node NSObject that corresponds to the other properties.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.InterfaceNSObjectID">
            <summary>
            The ID of an interface NSObject that corresponds to the other properties.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.ifIndex">
            <summary>
            The ifIndex corresponding to InterfaceNSObjectID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.IPAddress">
            <summary>
            An IP address corresponding to NodeNSObjectID and/or InterfaceNSObjectID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.PhysicalAddress">
            <summary>
            A physical address corresponding to NodeNSObjectID and/or InterfaceNSObjectID.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.NSObjectID.DNSName">
            <summary>
            A DNS name corresponding to NodeNSObjectID and/or InterfaceNSObjectID.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSObjectIDs">
            <summary>
            Has methods to retrieve NSObjectIDs.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.AddNewNSObjectID(AiMetrix.BusinessObject.Inventory.NSObjectID)">
            <summary>
            Adds a NSObjectID instance to the NSObjectIDs collection.
            </summary>
            <param name="newNSObjectID">A NSObjectID instance to add to the NSObjectIDs collection.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByIPAddress(System.String)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddress">An IP address belonging to the retrieved NSObjectIDs in a default network domain.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByIPAddress(System.String,System.Int32)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddress">An IP address belonging to the retrieved NSObjectIDs.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddress.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByDNSName(System.String)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="dnsName">A DNS name belonging to the retrieved NSObjectIDs in a default network domain.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByDNSName(System.String,System.Int32)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="dnsName">A DNS name belonging to the retrieved NSObjectIDs.</param>
            <param name="networkDomainID">The ID of the network domain for dnsName.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByPhysicalAddress(System.String)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="physicalAddress">A physical address belonging to the retrieved NSObjectIDs in a default network domain.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.NodeNSObjectIDGetByPhysicalAddress(System.String,System.Int32)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="physicalAddress">A physical address belonging to the retrieved NSObjectIDs.</param>
            <param name="networkDomainID">The ID of the network domain for physicalAddress.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.SearchForNodeNSObjectID(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddressList">A list of IP addresses that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <param name="physicalAddressList">A list of physical addresses that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <param name="dnsNameList">A list of DNS names that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.SearchForNodeNSObjectID(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddressList">A list of IP addresses that might yield NSObjectIDs to retrieve.</param>
            <param name="physicalAddressList">A list of physical addresses that might yield NSObjectIDs to retrieve.</param>
            <param name="dnsNameList">A list of DNS names that might yield NSObjectIDs to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddressList, physicalAddressList, and dnsNameList.</param>
            <returns>A collection of NSObjectID instances that correspond to node-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.SearchForInterfaceNSObjectID(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Guid,System.Int64)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddressList">A list of IP addresses that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <param name="physicalAddressList">A list of physical addresses that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <param name="dnsNameList">A list of DNS names that, in a default network domain, might yield NSObjectIDs to retrieve.</param>
            <param name="nodeNSObjectID">The ID of a node-level NSObject that, when combined with ifIndex, might yield a NSObjectID to retrieve.</param>
            <param name="ifIndex">The ifIndex of an interface-level NSObject that, when combined with nodeNSObjectID, might yield a NSObjectID to retrieve.</param>
            <returns>A collection of NSObjectID instances that correspond to interface-level NSObjects.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.NSObjectIDs.SearchForInterfaceNSObjectID(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Guid,System.Int64,System.Int32)">
            <summary>
            Retrieves a collection of NSObjectID instances.
            </summary>
            <param name="ipAddressList">A list of IP addresses that might yield NSObjectIDs to retrieve.</param>
            <param name="physicalAddressList">A list of physical addresses that might yield NSObjectIDs to retrieve.</param>
            <param name="dnsNameList">A list of DNS names that might yield NSObjectIDs to retrieve.</param>
            <param name="nodeNSObjectID">The ID of a node-level NSObject that, when combined with ifIndex, might yield a NSObjectID to retrieve.</param>
            <param name="ifIndex">The ifIndex of an interface-level NSObject that, when combined with nodeNSObjectID, might yield a NSObjectID to retrieve.</param>
            <param name="networkDomainID">The ID of the network domain for ipAddressList, physicalAddressList, and dnsNameList.</param>
            <returns>A collection of NSObjectID instances that correspond to interface-level NSObjects.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SLAObjectID">
            <summary>
            This class is deprecated.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SLAObjectID.GetID(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            This method is deprecated.
            </summary>
            <param name="srcNSObjectID"></param>
            <param name="destNSObjectID"></param>
            <param name="initiator"></param>
            <param name="testType"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSSourceObjects">
            <summary>
            Gets collection of NSSourceObject objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.NSSourceObjectsAsync">
            <summary>
            Gets collection of NSSourceObject objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NSStatusMessages">
            <summary>
            Gets collection of NSStatusMessage objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.NSStatusMessagesAsync">
            <summary>
            Gets collection of NSStatusMessage objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.PendingActions">
            <summary>
            Gets collection of PendingAction objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.PendingActionsAsync">
            <summary>
            Gets collection of PendingAction objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceCollectorTypes">
            <summary>
            Gets collection of PerformanceCollectorType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceCollectorTypesAsync">
            <summary>
            Gets collection of PerformanceCollectorType objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Performance.PerformanceJob.NodeName">
            <summary>
            NOTE: This property is not an attribute from the database.
            It is up to the user to populate this property.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceJobs">
            <summary>
            Gets collection of PerformanceJob objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceJobsAsync">
            <summary>
            Gets collection of PerformanceJob objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceJobExportImport">
            <summary>
            An instance of this has a performance job (an instance of PerformanceJob)
            and an instance of NSIPAddresses (corresponding to the NSObjectID  
            specified by the performance job).
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceJobExportImports">
            <summary>
            An instance of this has a list of PerformanceJobExportImport 
            instances and instances of the following: CollectorTypes 
            and ServicePollerTypes.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.PerformanceJobExportImports.Export">
            <summary>
            Gets performance job data from the database and returns an instance of 
            PerformanceJobExportImports.
            </summary>
            <param name="exportFile">Specifies the file to which to export the data.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.PerformanceJobExportImports.Import(AiMetrix.BusinessObject.Performance.PerformanceJobExportImports)">
            <summary>
            Puts the PerformanceJobExportImports data into the database.
            </summary>
            <param name="importFile">Specifies the file from which to import the data.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.PerformanceStatusMessage">
            <summary>
            This class will replace the PerformanceJob class in the old business object
            it processes messages between the PerformanceService and the GUI. Will Use
            DBStatus to send update messages to PMManager using DataPortal.Execute. 
            Will poll Status data table directly to get messages. 
            Will probably be single PerfStatusMessage that inherits from CommandBase, 
            containing PMManager status and Read only collection of PMJobs. 
            PMJobs collection can be client side code only because message body
            is xmlDoc to be parsed into PMJobs and PMManager instance. 
            Async class will be for gets on PerfStatusMessage 
            No PerfStatusMessages class required.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.PerformanceStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.PerformanceStatusMessages.Request">
            <summary>
            Get list of PerfJobIDs for this nsObjectID
            </summary>
            <param name="nsObjectID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.PerformanceStatusMessagesAsync">
            <summary>
            Gets collection of PerformanceStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceRequests">
            <summary>
            Gets collection of PerformanceRequest objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.PerformanceRequestsAsync">
            <summary>
            Gets collection of PerformanceRequest objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnly">
            <summary>
              Looks up a localized string similar to Must be an administrator to access this functionality..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyActivateUser">
            <summary>
              Looks up a localized string similar to Must be administrator to activate a user..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyAddUser">
            <summary>
              Looks up a localized string similar to Must be administrator to add new users..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyAuthorizations">
            <summary>
              Looks up a localized string similar to Must be administrator to manage authorizations..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyConfiguration">
            <summary>
              Looks up a localized string similar to Must be administrator to manage configuration settings..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyDeActivateUser">
            <summary>
              Looks up a localized string similar to Must be administrator to deactivate user..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyDeleteUser">
            <summary>
              Looks up a localized string similar to Must be administrator to delete users..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyResetUserPassword">
            <summary>
              Looks up a localized string similar to Must be administrator to reset user passwords..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAdminOnlyUpdateGroup">
            <summary>
              Looks up a localized string similar to Must be administrator to update user&apos;s group..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExAnonymousAccess">
            <summary>
              Looks up a localized string similar to Unable to authenticate attempted login from {0}, windows login authentication requires anonymous access to be disabled on the virtual directory located at {1}..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExChangePassword">
            <summary>
              Looks up a localized string similar to User not authorized to update password..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExEnforcePasswordHistory">
            <summary>
              Looks up a localized string similar to Password does not meet unique requirements. Cannot reuse any of the last {0} passwords..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExInvalidGroupName">
            <summary>
              Looks up a localized string similar to The name {0} cannot be used.  Name may not be reserved name (Administrator, SYSTEM) or contain the following characters: `/ \ ~ ! # $ % ^ &amp; * ( ) = + [ ] {{ }} | &apos; &quot; ? &lt; &gt;.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExInvalidSystemCredential">
            <summary>
              Looks up a localized string similar to System credential does not exist..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExInvalidUserName">
            <summary>
              Looks up a localized string similar to The name {0} cannot be used.  Name may not be reserved name (SYSTEM) or contain the following characters: `/ \ ~ ! # $ % ^ &amp; * ( ) = + [ ] {{ }} | &apos; &quot; ? &lt; &gt;.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExSecurityGroupCorrupted">
            <summary>
              Looks up a localized string similar to SecurityGroup, {0}, has been corrupted and is no longer valid..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExSecurityOnChildNode">
            <summary>
              Looks up a localized string similar to Changes to security cannot be made on child node, login to parent node to make changes..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExSQLInjectionInput">
            <summary>
              Looks up a localized string similar to Possible SQL injection attempt. User {0} attempted to input {1} as invalid value..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExSystemOnlyAuthorization">
            <summary>
              Looks up a localized string similar to Must be system account to access this method..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExUnauthenticatedUser">
            <summary>
              Looks up a localized string similar to Access is denied. Must be an authenticated user to access this method..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExUnauthorizedAccess">
            <summary>
              Looks up a localized string similar to User is not authorized to access this functionality..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExWindowsEvenLog">
            <summary>
              Looks up a localized string similar to Error occurred while  user, {0}, was trying to access Windows Event Log messages on {1}..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExWindowsGroupsManageUsers">
            <summary>
              Looks up a localized string similar to Manage windows group user membership through the Microsoft users and groups management console..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExWindowsUserInvalidGroup">
            <summary>
              Looks up a localized string similar to Windows user, {0}, no longer member of windows group {1}..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Properties.Resources.ExWMIPerformance">
            <summary>
              Looks up a localized string similar to Error occurred while  user, {0}, was trying to access WMI performance counters on {1}..
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.Rule.SysLogConditionList">
            <summary>
            ConditionsList, is a collection of Conditions that
            is created by parsing the Conditions string that is stored
            in the database. Can be bound to a datagrid with add, edit, 
            remove capabilities builtin.  Can be set as the DataSource 
            of a BindingSource to also get builtin navigating, sorting, 
            filtering and updating.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.Rule.SNMPTrapConditionList">
            <summary>
            ConditionsList, is a collection of Conditions that
            is created by parsing the Conditions string that is stored
            in the database. Can be bound to a datagrid with add, edit, 
            remove capabilities builtin.  Can be set as the DataSource 
            of a BindingSource to also get builtin navigating, sorting, 
            filtering and updating.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.Rule.CustomOccurrenceConditionList">
            <summary>
            ConditionsList, is a collection of Conditions that
            is created by parsing the Conditions string that is stored
            in the database. Can be bound to a datagrid with add, edit, 
            remove capabilities builtin.  Can be set as the DataSource 
            of a BindingSource to also get builtin navigating, sorting, 
            filtering and updating.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria.op_Equality(AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria,AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria.op_Inequality(AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria,AiMetrix.BusinessObject.Events.Rule.PredictiveCriteria)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria.op_Equality(AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria,AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria)">
            <summary>
            == Operator
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria.op_Inequality(AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria,AiMetrix.BusinessObject.Events.Rule.StatisticalTimespanCriteria)">
            <summary>
            != Operator
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.Rules">
            <summary>
            Gets collection of Rule objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RulesAsync">
            <summary>
            Gets collection of Rule objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RuleGroupExportImport">
            <summary>
            An instance of this has a rule group (an instance of Rule--a bit of a misnomer)
            and a list of NSIPAddresses (one item of the list per nsobject specified by the rule group).
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Events.RuleGroupExportImport._snmpInterfaceIdentifierList">
            This is included here to catch snmp interfaces that are in the RuleObject table but don't have an ip address.
            If there is an nsobject specified by the rule group that is an snmp interface, then it gets added to this list.
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.RuleGroupExportImports">
            <summary>
            An instance of this has a list of RuleGroupExportImport 
            instances and instances of the following: ActionTypes, 
            Actions, SNMPTrapTypes, and Metrics.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleGroupExportImports.Export">
            <summary>
            Gets rule group data from the database and returns an instance of 
            RuleGroupExportImports.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleGroupExportImports.Import(AiMetrix.BusinessObject.Events.RuleGroupExportImports)">
            <summary>
            Puts the RuleGroupExportImports data into the database.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.SNMPInterfaceIdentifier.NodeNSObjectID">
            <summary>
            This is the NSObjectID of the 
            SNMPNode for the SNMPInterface.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.SNMPInterfaceIdentifier.IfIndex">
            <summary>
            The ifIndex of the SNMPInterface.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Events.SNMPInterfaceIdentifier.InterfaceNSObjectID">
            <summary>
            This is the NSObjectID of the 
            SNMPInterface.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,System.Collections.Generic.List{System.DayOfWeek})">
            <summary>
            Use this method when you want to specify certain days of the week.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to place the schedule.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="activeDays">The active days for the schedule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,AiMetrix.BusinessObject.Events.NSTime,AiMetrix.BusinessObject.Events.NSTime)">
            <summary>
            Use this method when you want to specify start and end times for every day.  Null start and end times means all day.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,System.Collections.Generic.List{System.DayOfWeek},AiMetrix.BusinessObject.Events.NSTime,AiMetrix.BusinessObject.Events.NSTime)">
            <summary>
            Use this method when you want to specify certain days of the week and start and end times within those days.  Null start and end times means all day.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to place the schedule.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="activeDays">The active days for the schedule.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create">
            <summary>
            Use this method when you want to specify certain days of the week and start and end times within those days.  Null start and end times means all day.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,System.Collections.Generic.List{System.DayOfWeek},AiMetrix.BusinessObject.Events.NSTime,AiMetrix.BusinessObject.Events.NSTime,System.Boolean)">
            <summary>
            Use this method when you want to specify certain days of the week and start and end times within those days.  Null start and end times means all day.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to place the schedule.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="activeDays">The active days for the schedule.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="automaticallyAdjustForDaylightSavings">Specifies whether to adjust for daylight savings for the time zone specified in startTime.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,AiMetrix.BusinessObject.NSDateTime,AiMetrix.BusinessObject.NSDateTime)">
            <summary>
            Use this method when you want to specify a starting date/time and an ending date/time.
            </summary>
            <param name="ruleGroupID"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.Create(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType,AiMetrix.BusinessObject.NSDateTime,AiMetrix.BusinessObject.NSDateTime,System.Boolean)">
            <summary>
            Use this method when you want to specify a starting date/time and an ending date/time.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to place the schedule.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="automaticallyAdjustForDaylightSavings">Specifies whether to adjust for daylight savings for the time zone specified in startTime.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.UpdateDaylightSavingsAdjustment(System.Guid,AiMetrix.BusinessObject.Enums.RuleScheduleType,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Updates daylight savings adjustments.
            </summary>
            <param name="id">The RuleActiveTimeID or RuleInactiveTimeID for which to adjust daylight savings adjustments.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="adjustmentStart">The beginning of daylight savings.</param>
            <param name="adjustmentEnd">The end of daylight savings.</param>
            <param name="hourAdjustment">The daylight savings adjustment.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedule.DisableDaylightSavingsAdjustment(System.Guid,AiMetrix.BusinessObject.Enums.RuleScheduleType)">
            <summary>
            Disables daylight savings adjustments.
            </summary>
            <param name="id">The RuleActiveTimeID or RuleInactiveTimeID for which to disable daylight savings adjustments.</param>
            <param name="scheduleType">The type of schedule.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedules.Get(AiMetrix.BusinessObject.Enums.RuleScheduleType)">
            <summary>
            Retrieves a set of RuleSchedule instances.
            </summary>
            <param name="scheduleType">The type of schedule.</param>
            <returns>RuleSchedules</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedules.Get(System.Int64,AiMetrix.BusinessObject.Enums.RuleScheduleType)">
            <summary>
            Retrieves a set of RuleSchedule instances.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to filter.</param>
            <param name="scheduleType">The type of schedule.</param>
            <returns>RuleSchedules</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.RuleSchedules.Get(System.Nullable{System.Int64},AiMetrix.BusinessObject.Enums.RuleScheduleType,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a set of RuleSchedule instances.
            </summary>
            <param name="ruleGroupID">The RuleGroupID on which to filter; null implies RuleGroupID will not be used as a filter.</param>
            <param name="scheduleType">The type of schedule.</param>
            <param name="onlyReturnWhereAutomaticallyAdjustingForDaylightSavings">Specifies whether to return only those rule schedules that automatically adjust for daylight savings.</param>
            <returns>RuleSchedules</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.ToDatabaseString">
            <summary>
            Returns a string representing the Time instance using the format HH:mm:ss.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.ToString(System.String,System.Boolean)">
            <summary>
            Returns a string representing the Time instance using the format specified.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.ToString">
            <summary>
            Returns a string representing the Time instance using the format HH:mm:ss.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.ToShortTimeString">
            <summary>
            Converts the value of the current Time object to its equivalent short time string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.#ctor(System.Int32,System.Int32,System.Int32,AiMetrix.BusinessObject.Events.NSTime.TimeHourFormat,System.TimeZoneInfo)">
            <summary>
            Create a Time class instance using hour, minute, second, hourFormat values.
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="hourFormat"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.#ctor(System.Int32,System.Int32,System.Int32,System.TimeZoneInfo)">
            <summary>
            Create a Time class instance using hour, minute, second values.  The hour format will default to 24 hours.
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.NSTime.#ctor(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Create a Time class instance using a DateTime class.
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigm">
            <summary>
            Utility for time paradigms.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigm.Create(System.Collections.Generic.List{AiMetrix.BusinessObject.Misc.Schedule})">
            <summary>
            Creates a TimeParadigm.
            </summary>
            <param name="schedules">Specifies the TimeParadigm's time blocks by day.</param>
            <returns>The ID of the created TimeParadigm.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigm.DeleteByRule(System.Int64)">
            <summary>
            Deletes all TimeParadigms associated with a RuleGroup.
            </summary>
            <param name="ruleGroupID">The ID of the RuleGroup used to identify TimeParadigms to delete.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigms">
            <summary>
            Facilitates retrieval of TimeParadigm instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigms.Get(System.Int64)">
            <summary>
            Retrieves TimeParadigm instances.
            </summary>
            <param name="ruleGroupID">The retrieval set is restricted to TimeParadigms associated with the RuleGroup specified by ruleGroupID.</param>
            <returns>A collection of TimeParadigm instances.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigmsAsync">
            <summary>
            Facilitates asynchronous retrieval of TimeParadigm instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigmsAsync.BeginGet(System.Int64)">
            <summary>
            Retrieves TimeParadigm instances.
            </summary>
            <param name="ruleGroupID">The retrieval set is restricted to TimeParadigms associated with the RuleGroup specified by ruleGroupID.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.TimeParadigmsAsync.OnGetResponse">
            <summary>
            Fires when a TimeParadigms instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Events.TimeParadigmsAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigmsAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="schedules"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigmsAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigmTimeBlockByDay">
            <summary>
            Part of the infrastructure dealing with time paradigm blocks.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigmTimeBlockByDay.UpdateDaylightSavingsAdjustment(System.Int64,System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Updates daylight savings adjustments.
            </summary>
            <param name="timeParadigmID">Part of the unique identifier for the block to edit.</param>
            <param name="beginHour">Part of the unique identifier for the block to edit.</param>
            <param name="endHour">Part of the unique identifier for the block to edit.</param>
            <param name="adjustmentStart">The beginning of daylight savings.</param>
            <param name="adjustmentEnd">The end of daylight savings.</param>
            <param name="hourAdjustment">The daylight savings adjustment.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Events.TimeParadigmTimeBlockByDays">
            <summary>
            Part of the infrastructure dealing with time paradigm blocks.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Events.TimeParadigmTimeBlockByDays.Get(System.Boolean)">
            <summary>
            Retrieves time paradigm blocks.
            </summary>
            <param name="onlyReturnWhereAutomaticallyAdjustingForDaylightSavings">Specifies whether to return only blocks that automatically adjust for daylight savings.</param>
            <returns>Time paradigm blocks</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.LoginRequest">
            <summary>
            Implements a LoginRequest class that supports
            NSDA .NET data access via the DataPortal. Allows an unauthenticated user to 
            request his salt to enable him to hash his password and login.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.LoginRequest.DataPortal_Fetch(System.Object)">
            <summary>
            Retrieves the salt data for a specific user.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.BusinessPrincipal">
            <summary>
            This class is for internal use only. 
            To log in use AiMetrix.BusinessObject.User.Login("username", "passsword");
            When logging in using a windows account use the domainName\username as the username.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessPrincipal.WindowsUserIsAuthenticated(System.String)">
            <summary>
            Make sure that the windows user information passed in is
            the currently authenticated user on the client computer.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessPrincipal.WebWindowsUserIsAuthenticated(System.String)">
            <summary>
            Make sure that the windows user information passed in is
            the authenticated in the current web request
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.BusinessPrincipal.NetworkUserIsAuthenticated(System.String,System.String)">
            <summary>
            Make sure that the windows user can be authenticated on the web server
            when attempting to use windows login authentication type.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.Utilities">
            <summary>
            Methods used to manipulate hash 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.CreateSalt">
            <summary>
            Create random salt for each user
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.CreateHashString(System.String)">
            <summary>
            Create hashed string for password and validation comparisons
            </summary>
            <param name="incomingString"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.GetTempKey(System.String,System.String,System.DateTime)">
            <summary>
            Create a temp key used for 1 time transfer across wire
            </summary>
            <param name="incomingString"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.GetNormalizedMACAddress">
            <summary>
            Get current machine's MAC address without delimiters 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.CompareStrings(System.String,System.String)">
            <summary>
            compare two strings byte by byte
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.Utilities.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            compare two byte arrays
            </summary>
            <param name="array1">first byte array</param>
            <param name="array2">second byte array</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPAgent.Save">
            <summary>
            Saves a SNMPAgent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPAgent.Save(System.Boolean)">
            <summary>
            Saves a SNMPAgent.
            </summary>
            <param name="isZeroRetriesAValue">Specifies whether, if Retries == 0, the intended value for Retries is 0.</param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPAgent.Save_LastBoot(System.DateTime)">
            <summary>
            Saves the last boot time for a SNMPAgent.
            </summary>
            <param name="lastBoot"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPAgent.Delete">
            <summary>
            Deletes a SNMPAgent.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPAgent.V1SerialTableMode">
            <summary>
            Set this to True if GetTable() should only get one varbind at a time, as
            opposed to trying to get multiple columns in each GetNext. This only applies
            when using SnmpV1. The defalt is false.
            
            Some older SnmpV1 agents misbehave when trying to get multiple columns in each GetNext.
            Setting this to true will sometimes solve this. 
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPAgents">
            <summary>
            Gets collection of SNMPAgent objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPAgents.GetByDiscoveryNSNode(System.Guid)">
            <summary>
            
            </summary>
            <param name="discoveryNSNodeID">filter for the return set</param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPAgentsAsync">
            <summary>
            Gets collection of SNMPAgent objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterface">
            <summary>
            Has properties and methods for SNMP interfaces.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Inventory.SNMPInterface._ifIndexParent">
            ifIndex is supposed to be greater than or equal to 1,
            so initializing _ifIndexParent to -1 enables us to know
            whether it has been set.
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.GetByNSObject(System.Guid)">
            <summary>
            Retrieves a SNMPInterface instance.
            </summary>
            <param name="nsObjectID">The ID of the NSObject corresponding to the retrieved SNMPInterface instance.</param>
            <returns>A SNMPInterface instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.GetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.Save">
            <summary>
            Saves a SNMPInterface.
            </summary>
            <returns>A representation of the saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.Save(System.Nullable{System.Int32})">
            <summary>
            Saves a SNMPInterface.
            </summary>
            <param name="networkDomainID">When not null, specifies the NetworkDomainID to use in conjunction with IPAddressList.</param>
            <returns>A representation of the saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.Save(System.Guid)">
            <summary>
            Saves a SNMPInterface.
            </summary>
            <param name="nsNodeID">When not Guid.Empty, specifies NSObjectNSNode information.</param>
            <returns>A representation of the saved instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterface.ToStringDebug">
            <summary>
            Returns display information.
            </summary>
            <returns>Display information for the SNMPInterface instance.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifIndex">
            <summary>
            SNMP information; see RFC 2863.  Uniquely identifies an interface on a SNMP device.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifIndexParent">
            <summary>
            IfIndexParent is initialized to -1, this lets us know 
            whether it has been set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifName">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifType">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifAlias">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifSpeed">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifSpeedIsSet">
            <summary>
            Indicates whether ifSpeed has been set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifHighSpeed">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifHighSpeedIsSet">
            <summary>
            Indicates whether ifHighSpeed has been set.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifPhysAddress">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.ifDescr">
            <summary>
            SNMP information; see RFC 2863.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.LastUpdateTime">
            <summary>
            The last time a SNMPInterface record was updated.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.NodeNSObjectID">
            <summary>
            The ID of the NSObject that is the node-level NSObject for the SNMPInterface.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterface.IPAddressList">
            <summary>
            If IPAddressList != string.Empty when Save is called, then, for corresponding IP address information for NodeNSObjectID, InterfaceNSObjectID will be set to the NSObjectID of the SNMPInterface and PhysicalAddress will be set to ifPhysAddress.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfaces">
            <summary>
            Has methods to retrieve SNMPInterface instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.Get">
            <summary>
            Retrieves all SNMPInterface instances.
            </summary>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByNodeNSObjectID(System.Guid)">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="nodeNSObjectID">This will be the NodeNSObjectID property of all retrieved instances.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByNodeNSObjectID(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="nsObjectIDList">All retrieved instances will have NodeNSObjectID in this list.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByNSObjectList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="nsObjectIDList">All retrieved instances will have NSObjectID in this list.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByIPAddress(System.String)">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="ipAddress">For each retrieved SNMPInterface instance, there is an IP address record where the InterfaceNSObjectID equals the NSObjectID property of the SNMPInterface.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByNSObject(System.Guid)">
            <summary>
            Retrieves a SNMPInterface instance.
            </summary>
            <param name="nsObjectID">The ID of the NSObject corresponding to the retrieved SNMPInterface instance.</param>
            <returns>A SNMPInterface instance.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            This method has been deprecated.
            </summary>
            <param name="ipAddress"></param>
            <param name="ifIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetAllByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="ipAddress">For each retrieved SNMPInterface instance, there is an IP address record where the InterfaceNSObjectID equals the NSObjectID property of the SNMPInterface.</param>
            <param name="ifIndex">Every retrieved SNMPInterface instance's ifIndex property equals ifIndex.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.GetIfTypeForPhysAddress">
            <summary>
            Retrieves information from the SNMPInterfaceIfTypeForPhysAddress table.
            </summary>
            <returns>Information from the SNMPInterfaceIfTypeForPhysAddress table.</returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.Item(System.String)">
            <summary>
            From the collection of SNMPInterface instances, accesses the first SNMPInterface instance whose abbreviated display name matches displayName.
            </summary>
            <param name="displayName">Specifies what to access from the collection of SNMPInterface instances.</param>
            <returns>A SNMPInterface instance.</returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.IfTypesForPhysAddress">
            <summary>
            Used to help digest information from the SNMPInterfaceIfTypeForPhysAddress table.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfaces.IfTypesForPhysAddress.IsIfTypeForPhysAddress(System.String)">
            <summary>
            Used to help analyze information that could be related to information from the SNMPInterfaceIfTypeForPhysAddress table.
            </summary>
            <param name="ifType"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync">
            <summary>
            Has methods to retrieve SNMPInterface instances asynchronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGet">
            <summary>
            Asynchronously retrieves all SNMPInterface instances.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGetByNodeNSObjectID(System.Guid)">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="nodeNSObjectID">This will be the NodeNSObjectID property of all retrieved instances.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGetByNSObjectList(System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="nsObjectIDList">All retrieved instances will have NSObjectID in this list.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGetByIPAddress(System.String)">
            <summary>
            Retrieves SNMPInterface instances.
            </summary>
            <param name="ipAddress">For each retrieved SNMPInterface instance, there is an IP address record where the InterfaceNSObjectID equals the NSObjectID property of the SNMPInterface.</param>
            <returns>A collection of SNMPInterface instances.</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGetByNSObject(System.Guid)">
            <summary>
            Retrieves a SNMPInterface instance.
            </summary>
            <param name="nsObjectID">The ID of the NSObject corresponding to the retrieved SNMPInterface instance.</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.BeginGetByIPAddressIfIndex(System.String,System.Int64)">
            <summary>
            Asynchronously retrieves SNMPInterface instances.
            </summary>
            <param name="ipAddress">For each retrieved SNMPInterface instance, there is an IP address record where the InterfaceNSObjectID equals the NSObjectID property of the SNMPInterface.</param>
            <param name="ifIndex">Every retrieved SNMPInterface instance's ifIndex property equals ifIndex.</param>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.OnGetResponse">
            <summary>
            Fires when a SNMPInterfaces instance returns from an asynchronous call.
            </summary>
        </member>
        <member name="E:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.OnErrorResponse">
            <summary>
            Fires when an asynchronous Get errors.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.GetResponseDelegate">
            <summary>
            Delegate for OnGetResponse.
            </summary>
            <param name="snmpInterfaces"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPInterfacesAsync.ErrorResponseDelegate">
            <summary>
            Delegate for OnErrorResponse.
            </summary>
            <param name="ex">The error's exception.</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPNodes">
            <summary>
            Gets collection of SNMPNode objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SNMPNodesAsync">
            <summary>
            Gets collection of SNMPNode objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SNMPTrapTypes">
            <summary>
            Gets collection of SNMPTrapType objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Protocols.SNMPTrapTypesAsync">
            <summary>
            Gets collection of SNMPTrapType objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.SNMPTrapStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.SNMPTrapStatusMessagesAsync">
            <summary>
            Gets collection of SNMPTrapStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.SyslogStatusMessages">
            <summary>
            Gets collection of AssetGroup objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.StatusMessages.SyslogStatusMessagesAsync">
            <summary>
            Gets collection of SyslogStatusMessages objects asychronously.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Inventory.Subnet.ObjectsInSubnet">
            <summary>
            Keep this internal.  The only time it has accurate 
            information is when the instance is returned from 
            the internal method Subnets::GetObjectCount.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.Subnets">
            <summary>
            Gets collection of Subnet objects sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.Get(System.Object,System.Boolean)">
            <summary>
            Get all subnets, include the count of the object contained in each subnet.
            </summary>
            <param name="sender"></param>
            <param name="getObjectCount"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.Get(System.String)">
            <summary>
            Get subnet with specified name
            </summary>
            <param name="subnetName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.GetTopLevel">
            <summary>
            Get all top level subnets
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.GetChildren(System.Guid)">
            <summary>
            Get the child subnets of the subnetId passed in.
            </summary>
            <param name="subnetId"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.GetByID(System.Guid)">
            <summary>
            Get subnet with specified Id
            </summary>
            <param name="subnetId"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Inventory.Subnets.GetObjectCount(System.Guid)">
            <summary>
            This should be kept internal because it doesn't return a fully usable Subnet instance.
            Rather its return value is just to get the object count.
            </summary>
            <param name="subnetID"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Inventory.SubnetsAsync">
            <summary>
            Gets collection of Subnet objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SystemCredential.Delete(System.String,System.String,AiMetrix.BusinessObject.Enums.CredentialType)">
            <summary>
            This method is deprecated.
            Please use Delete(int credentialID) instead.
            </summary>
            <param name="domainName"></param>
            <param name="userName"></param>
            <param name="type"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SystemCredential.AddSecurityUserID(System.Int32,System.Int64)">
            <summary>
            Associate a securityUserID with a credential
            </summary>
            <param name="credentialID"></param>
            <param name="securityUserID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SystemCredential.AddSecurityUserIDList(System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Associate a list of securityUserIDs with a credential
            </summary>
            <param name="credentialID"></param>
            <param name="securityUserIDList"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SystemCredential.RemoveSecurityUserID(System.Int32,System.Int64)">
            <summary>
            Remove the relationship between a credential and a neuralstar user
            </summary>
            <param name="credentialID"></param>
            <param name="securityUserID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.SystemCredential.RemoveAllSecurityUserID(System.Int32)">
            <summary>
            Remove all of the relationships between a credential and neuralstar Users
            </summary>
            <param name="credentialID"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SystemCredentials">
            <summary>
            Gets collection of SystemCredential objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.SystemCredentialsAsync">
            <summary>
            Gets collection of SystemCredential objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomAlarmsVitalsGroupsGaugesViews">
            <summary>
            Gets collection of CustomAlarmsVitalsGroupsGaugesView objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomAlarmsVitalsGroupsGaugesViewsAsync">
            <summary>
            Gets collection of CustomAlarmsVitalsGroupsGaugesViewsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.Templates">
            <summary>
            Gets collection of Template objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.TemplatesAsync">
            <summary>
            Gets collection of Template objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.Themes">
            <summary>
            Gets collection of Theme objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ThemesAsync">
            <summary>
            Gets collection of Theme objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.User">
            <summary>
            Used by Administrator to create and manage user accounts. 
            Used by all users to Login/Logout, change own password. 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create new user
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="groupId"></param>
            <param name="authenticationType">should be NSDA or Windows</param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.IsCurrentUserAdmin">
            <summary>
            Is the currently logged in user an administrator or SYSTEM account
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.LoginAsCurrentWindowsUser">
            <summary>
            Note this method is compatible with Windows or Mixed Authentication Types only:
            Logs in as the windows user currently logged in to this machine.
            </summary>
            <returns>LoginStatus enumeration</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns>LoginStatus enumeration</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.Logout">
            <summary>
            End the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.LoginAsAService">
            <summary>
            INTERNAL USE ONLY: NeuralStar services Login only
            will not count as license used no userName assigned,
            session will not expire, is member of Administrators group.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <returns>LoginStatus enumeration</returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.EndUserSession">
            <summary>
            INTERNAL USE ONLY: End current users session
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.EndUserSession(System.Guid)">
            <summary>
            Force a user logout
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.FailOverUserSession">
            <summary>
            INTERNAL USE ONLY: During client failover validate and create session on current server
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.ValidUserSession">
            <summary>
            Check to see if the current users session is still valid.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.UpdatePassword(System.Int64,System.String,System.String)">
            <summary>
            User can update own password
            </summary>
            <param name="id"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.IsCurrentUserPasswordExpired">
            <summary>
            Has the currently logged in user's password expired.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DaysToExpire">
            <summary>
            How long before the current users password expires
            used to notify user of impending password expiration
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.CreateNewUser(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Administrator can create new NSDA user. 
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.AddWindowsUser(System.String,System.Int32)">
            <summary>
            Administrator can add windows users
            </summary>
            <param name="username">Windows User account</param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.ResetPassword(System.Int64,System.String,System.Boolean)">
            <summary>
            Administrator can reset any users password
            </summary>
            <param name="id"></param>
            <param name="authenticationType"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DeleteUser(System.Int64)">
            <summary>
             Administrator can delete existing user.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DeActivateUser(AiMetrix.BusinessObject.Security.SecurityUser)">
            <summary>
             Administrator can de-activate existing user.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.ActivateUser(AiMetrix.BusinessObject.Security.SecurityUser)">
            <summary>
            Administrator can re-activate existing user
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.UpdateGroup(AiMetrix.BusinessObject.Security.SecurityUser,System.Int32)">
            <summary>
             Administrator can change users group.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.Save">
            <summary>
            extra level of security check for unauthorized attempt to save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DataPortal_Create(System.Object)">
            <summary>
            called by DataPortal so we can get salt for existing users
            needed to update password or groupId.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DataPortal_Fetch(System.Object)">
            <summary>
            called by DataPortal to get session info to determine if current
            session is still valid.
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DataPortal_Insert">
            <summary>
            called by DataPortal to add data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.DataPortal_Update">
            <summary>
            called by DataPortal to delete/update data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.Update(System.Data.SqlClient.SqlConnection)">
            <summary>
            Common update method used by both DataPortal_Update and DataPortal_Insert
            Need to do this because we don't reuse the user object, the user is always
            new therefore the businessobject always thinks it is doing an insert. 
            The DataPortal_Update is just insurance.
            </summary>
            <param name="cn"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.ValidatePasswordUniqueRequirement(System.Data.SqlClient.SqlCommand,System.UInt32,System.String,AiMetrix.BusinessObject.Security.LoginRequest)">
            <summary>
            Does this password meet the unique password requirements as specified by the 
            password policy
            </summary>
            <param name="cm"></param>
            <param name="enforcePasswordHistory"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.User.CurrentPrincipal">
            <summary>
            Return the current BusinessPrincipal, useful for IsInRole and accessing specific properties of current users BusinessIdentity.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.Security.User.CurrentUser">
            <summary>
            Return the current BusinessIdentity, direct access to current user Business Identity properties. 
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.Valid">
            <summary>
            User has valid session
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.LicenseExceeded">
            <summary>
            /// User session has exceeded the available licenses 
            beyond the nag point.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.InvalidUser">
            <summary>
            Invalid user account.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.DuplicateLogin">
            <summary>
            User is already logged in to system.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.HasNoLicense">
            <summary>
            User session has not license.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.InvalidLicense">
            <summary>
             Invalid license key.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.ServerUnavailable">
            <summary>
            Remote web server is not available
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.DatabaseUnavailable">
            <summary>
            Cannot connect to the database
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.LicenseExpired">
            <summary>
            License has expired.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.InvalidMAC">
            <summary>
            Invalid MAC address.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.PasswordExpired">
            <summary>
            Password has expired.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.ResetRequired">
            <summary>
            A password reset is required.
            </summary>
        </member>
        <member name="F:AiMetrix.BusinessObject.Security.User.SessionStatus.InactiveUser">
            <summary>
            User account has been deactivated
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.User.Request.#ctor">
            <summary>
            use for getting server DateTime
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.UnAuthenticatedUser">
            <summary>
            Used by Administrator to create and manage user accounts. 
            Used by all users to Login/Logout, change own password. 
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UnAuthenticatedUser.Save">
            <summary>
            extra level of security check for unauthorized attempt to save.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UnAuthenticatedUser.DataPortal_Insert">
            <summary>
            called by DataPortal to add data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UnAuthenticatedUser.DataPortal_Update">
            <summary>
            called by DataPortal to delete/update data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UnAuthenticatedUser.Update(System.Data.SqlClient.SqlConnection)">
            <summary>
            Common update method used by both DataPortal_Update and DataPortal_Insert
            Need to do this because we don't reuse the user object, the user is always
            new therefore the businessobject always thinks it is doing an insert. 
            The DataPortal_Update is just insurance.
            </summary>
            <param name="cn"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UnAuthenticatedUser.Request.#ctor">
            <summary>
            use for getting server DateTime
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.ContactInformation">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.#ctor">
            <summary>
            public empty constructor for xmlSerialization
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.Get(Nsda2.Data.SafeDataReader)">
            <summary>
            Used by readonly SecurityUser class that is displayed in SecurityListVue
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.GetIdValue">
            <summary>
            This is what is returned when you call ToString() 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.DataPortal_Fetch(System.Object)">
            <summary>
            Called by DataPortal to load data from the database.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.DataPortal_Update">
            <summary>
            Called by DataPortal when Save is called on ContactInformation
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.ContactInformation.Request.#ctor">
            <summary>
            use for getting server DateTime
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.UserSession">
            <summary>
            DO NOT REMOVE THIS CODE:
            Used to test async callback
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Security.UserSession.Request.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Security.UserSessionAsync">
            <summary>
            Gets UserSession asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Utils.ParseTooltip(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Common method to build tooltip display in gui for inventory Objects.
            </summary>
            <param name="classificationType"></param>
            <param name="nodePrefix"></param>
            <param name="displayName"></param>
            <param name="TooltipXml"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Utils.GetPrefixedDisplayName(System.String,System.String)">
            <summary>
            If nodePrefix has value then concatenate using standard delimiter.
            </summary>
            <param name="nodePrefix"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Utils.RemovePrefixFromDisplayName(System.String,System.String)">
            <summary>
            If display name starts with nodePrefix
            </summary>
            <param name="nodePrefix"></param>
            <param name="displayName"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Utils.SqlInjectionStrings">
            <summary>
            Add values to the list as we determine there may be a threat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.ClientSideCredential.New(System.Net.NetworkCredential)">
            <summary>
            Get a new ClientSideCredential all values are encrypted
            </summary>
            <param name="networkCredential"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.ClientSideCredential.New(System.String,System.String,System.String)">
            <summary>
            Get a new ClientSideCredential all values are encrypted
            </summary>
            <param name="domain"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.DataPortal_Insert">
            <summary>
            called by DataPortal to add data into the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.DataPortal_Update">
            <summary>
            called by DataPortal to update data in the database
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.ReadPerformanceCounterElement(System.Xml.XmlTextReader@)">
            <summary>
            Parse one performance counter xml element to a instance of a WMIPerformance counter
            </summary>
            <param name="xRead"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.CreateXmlStream">
            <summary>
            Create Xml stream to save to database
            </summary>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.WriteNodeParamsElement(System.Xml.XmlTextWriter@)">
            <summary>
            Write the NodeParamsElement to the xmlTextWriter
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceConfig.WritePerformanceCounterElement(System.Xml.XmlTextWriter@,AiMetrix.BusinessObject.Performance.WMIPerformanceCounter)">
            <summary>
            Write one instance of a PerformanceCounter to the xmlTextWriter
            </summary>
            <param name="xWriter"></param>
            <param name="pc"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIPerformanceConfigAsync">
            <summary>
            Gets WMI configuration asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMISystemInfo">
            <summary>
            Contains SystemInformation obtained by connecting directly 
            to a WMINode assists user in verifying that they have successfully
            connected to the desired Node.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceCounter.Get(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This internal Get method is used to create a PerformanceCounter object that is part of a collection
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceCounter.GetAllCounter(System.String,System.String)">
            <summary>
            This internal Get method is used to create a PerformanceCounter object that is part of a collection
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIPerformanceCounters">
            <summary>
            Gets collection of WMIPerformanceCounters sychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceCounters.WriteNodeParamsElement(System.Xml.XmlTextWriter@)">
            <summary>
            Write the NodeParams Element of the WMIConfig document.
            </summary>
            <param name="xWriter"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.Performance.WMIPerformanceCounters.WritePerformanceCounterElement(System.Xml.XmlTextWriter@,AiMetrix.BusinessObject.Performance.WMIPerformanceCounter)">
            <summary>
            Write one instance of a PerformanceCounter to the 
            </summary>
            <param name="xWriter"></param>
            <param name="pc"></param>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIPerformanceCountersAsync">
            <summary>
            Gets collection of Wmi Performance Counters available
            for specified machine, and Wmi Class asynchronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIClass">
            <summary>
            Summary description for WMIClass.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIClasses">
            <summary>
            Gets collection of WMIClasses objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIClasses.Request">
            <summary>
            This request does not use StoredProcedure and SqlParams because
            WMIClass requests do not use database connection, alway require
            connection data to access current WMI data on server.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.Performance.WMIClassesAsync">
            <summary>
            Gets collection of WMI objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ActiveDirectoryCenterWorkspaceItems">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ActiveDirectoryCenterWorkspaceItemsAsync">
            <summary>
            Gets collection of ActiveDirectoryCenterWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.AssetGroupVueWorkspaceItems">
            <summary>
            Gets collection of AssetGroupVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.AssetGroupVueWorkspaceItemsAsync">
            <summary>
            Gets collection of AssetGroupVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ServiceManagerDeviceVueWorkspaceItems">
            <summary>
            Gets collection of CustomServiceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ServiceManagerDeviceVueWorkspaceItemsAsync">
            <summary>
            Gets collection of ServiceManagerDeviceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.VMWareVMVueWorkspaceItems">
            <summary>
            Gets collection of VMWareVMVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.VMWareVMVueWorkspaceItemsAsync">
            <summary>
            Gets collection of VMWareVMVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.VMHostVueWorkspaceItems">
            <summary>
            Gets collection of VMHostVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.VMHostVueWorkspaceItemsAsync">
            <summary>
            Gets collection of VMHostVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomServiceVueWorkspaceItems">
            <summary>
            Gets collection of CustomServiceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.CustomServiceVueWorkspaceItemsAsync">
            <summary>
            Gets collection of CustomServiceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.GridWidgetWorkspaceItems">
            <summary>
            Gets collection of GridWidgetWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.GridWidgetWorkspaceItemsAsync">
            <summary>
            Gets collection of GridWidgetWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ExchangeCenterWorkspaceItems">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ExchangeCenterWorkspaceItemsAsync">
            <summary>
            Gets collection of ExchangeCenterWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.IISCenterWorkspaceItems">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.IISCenterWorkspaceItemsAsync">
            <summary>
            Gets collection of IISCenterWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.LogicalDiskVueWorkspaceItems">
            <summary>
            Gets collection of LogicalDiskVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.LogicalDiskVueWorkspaceItemsAsync">
            <summary>
            Gets collection of LogicalDiskVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ProcessorVueWorkspaceItems">
            <summary>
            Gets collection of ProcessorVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ProcessorVueWorkspaceItemsAsync">
            <summary>
            Gets collection of ProcessorVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.DeviceVueWorkspaceItems">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.DeviceVueWorkspaceItemsAsync">
            <summary>
            Gets collection of DeviceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.SQLServerCenterWorkspaceItems">
            <summary>
            Gets collection of DeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.SQLServerCenterWorkspaceItemsAsync">
            <summary>
            Gets collection of SQLServerCenterWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.TextWidgetPropertyValues">
            <summary>
            Gets collection of TextWidgetProperties objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.TextWidgetPropertyValuesAsync">
            <summary>
            Gets collection of CustomServiceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.DisplayObjects.DataValue.Equals(System.Object)">
            <summary>
            If datavalue is same name then Arraylist contains
            will return true. I hope.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.GridColumnDisplayDef">
            <summary>
            Summary description for GridColumnDisplayDef.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.GridColumnDisplayDefs">
            <summary>
            Gets collection of GridColumnDisplayDefs objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.GridColumnDisplayDefsAsync">
            <summary>
            Gets collection of GridColumnDisplayDefsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.InterfaceVueWorkspaceItems">
            <summary>
            Gets collection of InterfaceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.InterfaceVueWorkspaceItemsAsync">
            <summary>
            Gets collection of InterfaceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.MapWorkspaceItems">
            <summary>
            Gets collection of MapWorkspaceItems objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.MapWorkspaceItemsAsync">
            <summary>
            Gets collection of MapWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.NodeVueWorkspaceItems">
            <summary>
            Gets collection of NodeVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.NodeVueWorkspaceItemsAsync">
            <summary>
            Gets collection of NodeVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.NSDeviceVueWorkspaceItems">
            <summary>
            Gets collection of NSDeviceVueWorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.NSDeviceVueWorkspaceItemsAsync">
            <summary>
            Gets collection of NSDeviceVueWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.OpsCenterWorkspaceItems">
            <summary>
            Gets collection of OpsCenterWorkspaceItems objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.OpsCenterWorkspaceItemsAsync">
            <summary>
            Gets collection of OpsCenterWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.WidgetHolderWorkspaceItem">
            <summary>
            This class is used to save all the properties of the widgetholder as applies to the workspace.
            Use this to save and restore workspace settings for the widgetholder.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.WidgetWorkspaceItem">
            <summary>
            This class holds all the workspace attributes for the widget classes.
            Use this to save and restore workspace settings.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.WorkspaceItem.Delete(System.String,System.Guid)">
            <summary>
            Delete all workspaceItems for this objectType and id.
            </summary>
            <param name="IDType"></param>
            <param name="ID"></param>
        </member>
        <member name="M:AiMetrix.BusinessObject.UI.WorkspaceItem.Delete(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            for internal use to allow us to delete any/all workspace items
            when needed. 
            Optional flag allows delete for allUsers.
            </summary>
            <param name="templateType">pass in null or empty string to delete all templateTypes</param>
            <param name="IDType">pass in null or empty string to delete all IDTypes</param>
            <param name="ID">pass in Guid.Empty to delete all of specific type</param>
            <param name="allUsers">delete for all users</param>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.WorkspaceItems">
            <summary>
            Gets collection of WorkspaceItem objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.WorkspaceItemsAsync">
            <summary>
            Gets collection of WorkspaceItem objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReminderWorkspaceItem">
            <summary>
            Summary description for ReminderWorkspaceItem.
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.ReminderWorkspaceItem.FirstUseDate">
            <summary>
            Date user first opened client
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.ReminderWorkspaceItem.ReminderList">
            <summary>
            List of Reminder objects
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.DaysUntilDisplay">
            <summary>
            Number of days from FirstUseDate to display reminder
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.ReminderName">
            <summary>
            Name of Reminder
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.IsLicenseReminder">
            <summary>
            License reminders automatically get priority if within expiration window
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.DisplayOrderIndex">
            <summary>
            Reminder precedence based on ReminderID
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.Displayed">
            <summary>
            Has reminder been displayed to user
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.DisplayedDate">
            <summary>
            Date when reminder was displayed
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.Queued">
            <summary>
            Is reminder queued to be displayed to user on next startup
            </summary>
        </member>
        <member name="P:AiMetrix.BusinessObject.UI.Reminder.Message">
            <summary>
            Message text to show to user
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReminderWorkspaceItems">
            <summary>
            Gets collection of ReminderWorkspaceItems objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ReminderWorkspaceItemsAsync">
            <summary>
            Gets collection of ReminderWorkspaceItemsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ListVueColumnDisplayDef">
            <summary>
            Summary description for ListVueColumnDisplayDef.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ListVueColumnDisplayDefs">
            <summary>
            Gets collection of ListVueColumnDisplayDefs objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.ListVueColumnDisplayDefsAsync">
            <summary>
            Gets collection of ListVueColumnDisplayDefsAsync objects asychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.Workspaces">
            <summary>
            Gets collection of Workspace objects sychronously.
            </summary>
        </member>
        <member name="T:AiMetrix.BusinessObject.UI.WorkspacesAsync">
            <summary>
            Gets collection of Workspace objects asychronously.
            </summary>
        </member>
        <member name="M:AiMetrix.BusinessObject.WMI.WMIEngine.IsLocalHost(System.String)">
            <summary>
            WMI query doesn't allow you to pass connection options as part of 
            a WQL query on the local server. We must know if the query is for 
            the local server to build the correct ManagementScope object.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
